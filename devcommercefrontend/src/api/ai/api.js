import { getAuthHeaders } from '../../lib/auth-utils';
import { API_BASE_URL } from '../auth/api';

class AIAPIError extends Error {
  constructor(message, code, status) {
    super(message);
    this.code = code;
    this.status = status;
  }
}

export const aiAPI = {
  /**
   * üöÄ –ï–î–ò–ù–°–¢–í–ï–ù–ù–´–ô –ú–ï–¢–û–î –î–õ–Ø –ì–ï–ù–ï–†–ê–¶–ò–ò –ü–û–†–¢–§–û–õ–ò–û
   * –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Å –æ–¥–Ω–∏–º –∑–∞–ø—Ä–æ—Å–æ–º –∫ AI
   */
  async generatePortfolio(data) {
    return this.smartGenerate(data);
  },

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –ª–∏–º–∏—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  async getUserLimits() {
    try {
      const response = await fetch(`${API_BASE_URL}/ai/limits/`, {
        headers: getAuthHeaders(),
      });

      if (!response.ok) {
        throw new Error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–∏–º–∏—Ç–æ–≤');
      }

      return await response.json();
    } catch (error) {
      console.error('Error fetching AI limits:', error);
      throw error;
    }
  },

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ AI –≥–µ–Ω–µ—Ä–∞—Ü–∏–π
   */
  async getGenerationHistory(page = 1, pageSize = 20) {
    try {
      const response = await fetch(
        `${API_BASE_URL}/ai/history/?page=${page}&page_size=${pageSize}`,
        {
          headers: getAuthHeaders(),
        }
      );

      if (!response.ok) {
        throw new Error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏');
      }

      return await response.json();
    } catch (error) {
      console.error('Error fetching AI history:', error);
      throw error;
    }
  },

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  async getUserStats() {
    try {
      const response = await fetch(`${API_BASE_URL}/ai/stats/`, {
        headers: getAuthHeaders(),
      });

      if (!response.ok) {
        throw new Error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏');
      }

      return await response.json();
    } catch (error) {
      console.error('Error fetching AI stats:', error);
      throw error;
    }
  },

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–æ–≤ –ø—Ä–æ–º–ø—Ç–æ–≤
   */
  async getPromptTemplates(category = null, style = null) {
    try {
      const params = new URLSearchParams();
      if (category) params.append('category', category);
      if (style) params.append('style', style);

      const response = await fetch(
        `${API_BASE_URL}/ai/templates/?${params.toString()}`,
        {
          headers: getAuthHeaders(),
        }
      );

      if (!response.ok) {
        throw new Error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–æ–≤');
      }

      return await response.json();
    } catch (error) {
      console.error('Error fetching AI templates:', error);
      throw error;
    }
  },

  /**
   * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞ –∫–∞–∫ —à–∞–±–ª–æ–Ω–∞
   */
  async savePromptTemplate(templateData) {
    try {
      const response = await fetch(`${API_BASE_URL}/ai/templates/save/`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          ...getAuthHeaders(),
        },
        body: JSON.stringify(templateData),
      });

      if (!response.ok) {
        const error = await response.json();
        throw new Error(error.error || '–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–∞');
      }

      return await response.json();
    } catch (error) {
      console.error('Error saving AI template:', error);
      throw error;
    }
  },

  /**
   * –£–¥–∞–ª–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞ –ø—Ä–æ–º–ø—Ç–∞
   */
  async deletePromptTemplate(templateId) {
    try {
      const response = await fetch(
        `${API_BASE_URL}/ai/templates/${templateId}/delete/`,
        {
          method: 'DELETE',
          headers: getAuthHeaders(),
        }
      );

      if (!response.ok) {
        const error = await response.json();
        throw new Error(error.error || '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–∞');
      }

      return await response.json();
    } catch (error) {
      console.error('Error deleting AI template:', error);
      throw error;
    }
  },

  /**
   * üöÄ –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–ê–Ø –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ - –æ–¥–∏–Ω –∑–∞–ø—Ä–æ—Å –∫ AI!
   */
  async smartGenerate(data) {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö –∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —Ñ–æ—Ä–º–∞—Ç
      let requestBody;
      let headers = { ...getAuthHeaders() };
      
      // –ï—Å–ª–∏ –µ—Å—Ç—å —Ñ–∞–π–ª—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º FormData
      if (data.profile_photo || (data.education && data.education.diplomaImage)) {
        const formData = new FormData();
        
        // –î–æ–±–∞–≤–ª—è–µ–º JSON –¥–∞–Ω–Ω—ã–µ
        formData.append('personal_info', JSON.stringify(data.personal_info));
        formData.append('education', JSON.stringify({
          university: data.education?.university || '',
          degree: data.education?.degree || '',
          field: data.education?.field || '',
          graduationYear: data.education?.graduationYear || ''
        }));
        formData.append('experience', JSON.stringify(data.experience || []));
        formData.append('skills', JSON.stringify(data.skills || {}));
        formData.append('projects', JSON.stringify(data.projects || []));
        formData.append('contacts', JSON.stringify(data.contacts || {}));
        formData.append('design_preferences', JSON.stringify(data.design_preferences || {}));
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–π–ª—ã –µ—Å–ª–∏ –µ—Å—Ç—å
        if (data.profile_photo) {
          formData.append('profile_photo', data.profile_photo);
        }
        if (data.education?.diplomaImage) {
          formData.append('diplomaImage', data.education.diplomaImage);
        }
        
        requestBody = formData;
        // –ù–µ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Content-Type –¥–ª—è FormData
      } else {
        // –û–±—ã—á–Ω—ã–π JSON –∑–∞–ø—Ä–æ—Å
        headers['Content-Type'] = 'application/json';
        requestBody = JSON.stringify(data);
      }

      const response = await fetch(`${API_BASE_URL}/ai/smart-generate/`, {
        method: 'POST',
        headers,
        body: requestBody
      });

      const result = await response.json();

      if (!response.ok) {
        throw new AIAPIError(
          result.error || '–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏',
          result.error_code || 'UNKNOWN',
          response.status
        );
      }

      return result;
    } catch (error) {
      if (error instanceof AIAPIError) {
        throw error;
      }
      console.error('AI Generation Error:', error);
      throw new AIAPIError('–û—à–∏–±–∫–∞ —Å–µ—Ç–∏', 'NETWORK_ERROR', 0);
    }
  },

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ AI –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
   */
  async getMetrics() {
    try {
      const response = await fetch(`${API_BASE_URL}/ai/metrics/`, {
        headers: getAuthHeaders(),
      });

      if (!response.ok) {
        throw new Error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫');
      }

      return await response.json();
    } catch (error) {
      console.error('Error fetching AI metrics:', error);
      throw error;
    }
  },

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫—ç—à–µ AI
   */
  async getCacheInfo() {
    try {
      const response = await fetch(`${API_BASE_URL}/ai/cache/`, {
        headers: getAuthHeaders(),
      });

      if (!response.ok) {
        throw new Error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫—ç—à–µ');
      }

      return await response.json();
    } catch (error) {
      console.error('Error fetching cache info:', error);
      throw error;
    }
  },

  /**
   * –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ AI (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
   */
  async clearCache() {
    try {
      const response = await fetch(`${API_BASE_URL}/ai/cache/clear/`, {
        method: 'DELETE',
        headers: getAuthHeaders(),
      });

      if (!response.ok) {
        const error = await response.json();
        throw new Error(error.error || '–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞');
      }

      return await response.json();
    } catch (error) {
      console.error('Error clearing cache:', error);
      throw error;
    }
  },

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  async getUserDetailedStats() {
    try {
      const response = await fetch(`${API_BASE_URL}/ai/stats/user/`, {
        headers: getAuthHeaders(),
      });

      if (!response.ok) {
        throw new Error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏');
      }

      return await response.json();
    } catch (error) {
      console.error('Error fetching detailed user stats:', error);
      throw error;
    }
  },

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –≥–ª–æ–±–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
   */
  async getGlobalStats() {
    try {
      const response = await fetch(`${API_BASE_URL}/ai/stats/global/`, {
        headers: getAuthHeaders(),
      });

      if (!response.ok) {
        throw new Error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≥–ª–æ–±–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏');
      }

      return await response.json();
    } catch (error) {
      console.error('Error fetching global stats:', error);
      throw error;
    }
  },

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ AI –≥–µ–Ω–µ—Ä–∞—Ü–∏–π —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º–∏ —Ñ–∏–ª—å—Ç—Ä–∞–º–∏
   */
  async getGenerationHistoryAdvanced(filters = {}) {
    try {
      const params = new URLSearchParams();
      
      if (filters.page) params.append('page', filters.page);
      if (filters.page_size) params.append('page_size', filters.page_size);
      if (filters.status) params.append('status', filters.status);
      if (filters.style) params.append('style', filters.style);

      const response = await fetch(
        `${API_BASE_URL}/ai/history/?${params.toString()}`,
        {
          headers: getAuthHeaders(),
        }
      );

      if (!response.ok) {
        throw new Error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏');
      }

      return await response.json();
    } catch (error) {
      console.error('Error fetching advanced AI history:', error);
      throw error;
    }
  },
};

// –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –∫–æ–¥–æ–≤ –æ—à–∏–±–æ–∫
export const AI_ERROR_CODES = {
  LIMIT_EXCEEDED: 'LIMIT_EXCEEDED',
  NOT_PREMIUM: 'NOT_PREMIUM',
  TIMEOUT: 'TIMEOUT',
  AI_ERROR: 'AI_ERROR',
  INVALID_RESPONSE: 'INVALID_RESPONSE',
  NETWORK_ERROR: 'NETWORK_ERROR',
};

// –ß–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–∞—Ö
export const getErrorMessage = (errorCode) => {
  const messages = {
    [AI_ERROR_CODES.LIMIT_EXCEEDED]: '–ü—Ä–µ–≤—ã—à–µ–Ω –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç AI –≥–µ–Ω–µ—Ä–∞—Ü–∏–π',
    [AI_ERROR_CODES.NOT_PREMIUM]: 'AI –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ Premium –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º',
    [AI_ERROR_CODES.TIMEOUT]: '–í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∏—Å—Ç–µ–∫–ª–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ',
    [AI_ERROR_CODES.AI_ERROR]: '–°–µ—Ä–≤–µ—Ä–∞ AI –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã',
    [AI_ERROR_CODES.INVALID_RESPONSE]: 'AI –≤–µ—Ä–Ω—É–ª –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∫–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø—Ä–æ–º–ø—Ç',
    [AI_ERROR_CODES.NETWORK_ERROR]: '–û—à–∏–±–∫–∞ —Å–µ—Ç–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É',
  };

  return messages[errorCode] || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞';
}; 