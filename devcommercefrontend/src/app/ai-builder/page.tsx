'use client';

import { useState, useEffect } from 'react';
import { useRouter } from 'next/navigation';
import { aiAPI } from '../../api/ai/api';
import './style.scss';

interface FormData {
  title: string;
  description: string;
  prompt: string;
  businessInfo: {
    industry: string;
    target_audience: string;
    goals: string[];
    competitors: string[];
  };
  design: {
    style: string;
    colorScheme: string;
    typography: string;
    mood: string;
  };
  content: {
    mainSections: string[];
    keyMessages: string[];
    callToActions: string[];
  };
  technical: {
    features: string[];
    animations: boolean;
    responsive: boolean;
    accessibility: boolean;
  };
}

interface UserLimits {
  is_premium: boolean;
  daily_limit: number;
  used_today: number;
  remaining_today: number;
  can_generate: boolean;
  limit_message: string;
}

const STEPS = [
  { id: 1, title: '–ë–∏–∑–Ω–µ—Å-–∞–Ω–∞–ª–∏–∑', description: '–ê–Ω–∞–ª–∏–∑ —Ü–µ–ª–µ–π –∏ –∞—É–¥–∏—Ç–æ—Ä–∏–∏' },
  { id: 2, title: '–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞', description: '–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∏ UX —Å–∞–π—Ç–∞' },
  { id: 3, title: '–î–∏–∑–∞–π–Ω', description: '–í–∏–∑—É–∞–ª—å–Ω–∞—è –∫–æ–Ω—Ü–µ–ø—Ü–∏—è' },
  { id: 4, title: '–ö–æ–Ω—Ç–µ–Ω—Ç', description: '–°—Ç—Ä–∞—Ç–µ–≥–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞' },
  { id: 5, title: '–ú–µ–¥–∏–∞', description: '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ –≤–∏–¥–µ–æ' },
  { id: 6, title: '–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤', description: '–ê–Ω–∏–º–∞—Ü–∏–∏ –∏ —ç—Ñ—Ñ–µ–∫—Ç—ã' },
  { id: 7, title: '–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è', description: '–§–∏–Ω–∞–ª—å–Ω—ã–µ —É–ª—É—á—à–µ–Ω–∏—è' }
];

const DESIGN_STYLES = [
  { value: 'minimal', label: '‚ú® –ú–∏–Ω–∏–º–∞–ª–∏–∑–º', description: '–ß–∏—Å—Ç—ã–π, —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –¥–∏–∑–∞–π–Ω —Å –∞–∫—Ü–µ–Ω—Ç–æ–º –Ω–∞ –∫–æ–Ω—Ç–µ–Ω—Ç' },
  { value: 'brutalism', label: 'üèóÔ∏è –ë—Ä—É—Ç–∞–ª–∏–∑–º', description: '–°–º–µ–ª—ã–π, –Ω–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –¥–∏–∑–∞–π–Ω —Å —Å–∏–ª—å–Ω—ã–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–æ–º' },
  { value: 'glassmorphism', label: 'üåü –ì–ª–∞—Å–º–æ—Ä—Ñ–∏–∑–º', description: '–≠—Ñ—Ñ–µ–∫—Ç –º–∞—Ç–æ–≤–æ–≥–æ —Å—Ç–µ–∫–ª–∞ –∏ —Ä–∞–∑–º—ã—Ç–∏—è' },
  { value: 'neumorphism', label: 'üíé –ù–µ–æ–º–æ—Ä—Ñ–∏–∑–º', description: '–ú—è–≥–∫–∏–µ —Ç–µ–Ω–∏ –∏ –æ–±—ä–µ–º–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã' },
  { value: 'retro', label: 'üì∫ –†–µ—Ç—Ä–æ', description: '–í–∏–Ω—Ç–∞–∂–Ω–∞—è —ç—Å—Ç–µ—Ç–∏–∫–∞ –∏ –Ω–æ—Å—Ç–∞–ª—å–≥–∏—è' },
  { value: 'cyberpunk', label: 'üåÜ –ö–∏–±–µ—Ä–ø–∞–Ω–∫', description: '–§—É—Ç—É—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–π —Å—Ç–∏–ª—å —Å –Ω–µ–æ–Ω–æ–≤—ã–º–∏ –∞–∫—Ü–µ–Ω—Ç–∞–º–∏' }
];

const INDUSTRIES = [
  { value: 'tech', label: 'üíª –¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏', description: 'IT, SaaS, —Å—Ç–∞—Ä—Ç–∞–ø—ã' },
  { value: 'creative', label: 'üé® –ö—Ä–µ–∞—Ç–∏–≤', description: '–î–∏–∑–∞–π–Ω, –∏—Å–∫—É—Å—Å—Ç–≤–æ, –º–µ–¥–∏–∞' },
  { value: 'business', label: 'üíº –ë–∏–∑–Ω–µ—Å', description: '–ö–æ–Ω—Å–∞–ª—Ç–∏–Ω–≥, —Ñ–∏–Ω–∞–Ω—Å—ã, B2B' },
  { value: 'ecommerce', label: 'üõçÔ∏è E-commerce', description: '–û–Ω–ª–∞–π–Ω-–º–∞–≥–∞–∑–∏–Ω—ã, –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å—ã' },
  { value: 'education', label: 'üìö –û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ', description: '–ö—É—Ä—Å—ã, —à–∫–æ–ª—ã, —Ç—Ä–µ–Ω–∏–Ω–≥–∏' },
  { value: 'entertainment', label: 'üéÆ –†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è', description: '–ò–≥—Ä—ã, –º–µ–¥–∏–∞, –∫–æ–Ω—Ç–µ–Ω—Ç' }
];

export default function AIBuilderPage() {
  const router = useRouter();
  const [currentStep, setCurrentStep] = useState(1);
  const [isGenerating, setIsGenerating] = useState(false);
  const [generationProgress, setGenerationProgress] = useState(0);
  const [error, setError] = useState('');
  const [userLimits, setUserLimits] = useState<UserLimits | null>(null);

  const [formData, setFormData] = useState<FormData>({
    title: '',
    description: '',
    prompt: '',
    businessInfo: {
      industry: 'tech',
      target_audience: '',
      goals: [],
      competitors: []
    },
    design: {
      style: 'minimal',
      colorScheme: 'monochrome',
      typography: 'modern',
      mood: 'professional'
    },
    content: {
      mainSections: [],
      keyMessages: [],
      callToActions: []
    },
    technical: {
      features: [],
      animations: true,
      responsive: true,
      accessibility: true
    }
  });

  useEffect(() => {
    loadUserLimits();
  }, []);

  const loadUserLimits = async () => {
    try {
      const response = await aiAPI.getUserLimits();
      if (response.success) {
        setUserLimits(response.data);
      }
    } catch (error) {
      console.error('Error loading user limits:', error);
    }
  };

  const handleInputChange = (section: keyof FormData, field: string, value: any) => {
    setFormData(prev => ({
      ...prev,
      [section]: typeof prev[section] === 'object'
        ? { ...prev[section], [field]: value }
        : value
    }));
    setError('');
  };

  const validateStep = (step: number): boolean => {
    switch (step) {
      case 1:
        if (!formData.title.trim() || !formData.description.trim() || !formData.prompt.trim()) {
          setError('–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è');
          return false;
        }
        break;
      case 2:
        if (!formData.businessInfo.target_audience || formData.businessInfo.goals.length === 0) {
          setError('–£–∫–∞–∂–∏—Ç–µ —Ü–µ–ª–µ–≤—É—é –∞—É–¥–∏—Ç–æ—Ä–∏—é –∏ —Ü–µ–ª–∏');
          return false;
        }
        break;
      case 3:
        if (!formData.design.style || !formData.design.mood) {
          setError('–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∏–ª—å –∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –¥–∏–∑–∞–π–Ω–∞');
          return false;
        }
        break;
      case 4:
        if (formData.content.mainSections.length === 0) {
          setError('–î–æ–±–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –æ—Å–Ω–æ–≤–Ω–æ–π —Ä–∞–∑–¥–µ–ª');
          return false;
        }
        break;
    }
    return true;
  };

  const nextStep = () => {
    if (validateStep(currentStep)) {
      setCurrentStep(prev => Math.min(prev + 1, STEPS.length));
      setError('');
    }
  };

  const prevStep = () => {
    setCurrentStep(prev => Math.max(prev - 1, 1));
    setError('');
  };

  const handleGenerate = async () => {
    if (!validateStep(currentStep)) return;

    if (!userLimits?.can_generate) {
      setError(userLimits?.limit_message || '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏–º–∏—Ç–æ–≤ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏');
      return;
    }

    setIsGenerating(true);
    setError('');

    try {
      let progress = 0;
      const progressInterval = setInterval(() => {
        progress += 1;
        if (progress <= 100) {
          setGenerationProgress(progress);
        }
      }, 500);

      const result = await aiAPI.premiumGenerate({
        title: formData.title,
        description: formData.description,
        prompt: formData.prompt,
        business_info: formData.businessInfo,
        design_preferences: formData.design,
        content_strategy: formData.content,
        technical_requirements: formData.technical
      });

      clearInterval(progressInterval);

      if (result.success) {
        router.push(`/portfolio/preview/${result.data.id}`);
      } else {
        setError('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∞–π—Ç–∞');
      }
    } catch (error) {
      setError('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    } finally {
      setIsGenerating(false);
      setGenerationProgress(0);
    }
  };

  const renderBusinessStep = () => (
    <div className="ai-step">
      <div className="ai-step-header">
        <h2>–ë–∏–∑–Ω–µ—Å-–∞–Ω–∞–ª–∏–∑</h2>
        <p>–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ –≤–∞—à–µ–º –±–∏–∑–Ω–µ—Å–µ –∏ —Ü–µ–ª—è—Ö</p>
      </div>

      <div className="ai-form-group">
        <label>–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ <span className="required">*</span></label>
        <input
          type="text"
          value={formData.title}
          onChange={(e) => handleInputChange('title', '', e.target.value)}
          placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: Creative Studio Portfolio"
        />
      </div>

      <div className="ai-form-group">
        <label>–û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ <span className="required">*</span></label>
        <textarea
          value={formData.description}
          onChange={(e) => handleInputChange('description', '', e.target.value)}
          placeholder="–û–ø–∏—à–∏—Ç–µ –≤–∞—à –ø—Ä–æ–µ–∫—Ç, –µ–≥–æ –º–∏—Å—Å–∏—é –∏ –æ—Å–Ω–æ–≤–Ω—ã–µ —Ü–µ–ª–∏"
        />
      </div>

      <div className="ai-form-group">
        <label>AI –ü—Ä–æ–º–ø—Ç <span className="required">*</span></label>
        <textarea
          value={formData.prompt}
          onChange={(e) => handleInputChange('prompt', '', e.target.value)}
          placeholder="–û–ø–∏—à–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–æ, –∫–∞–∫–æ–π —Å–∞–π—Ç –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å. –ù–∞–ø—Ä–∏–º–µ—Ä: –°–æ–∑–¥–∞–π —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π —Å–∞–π—Ç –¥–ª—è —Ñ–∏—Ç–Ω–µ—Å-—Ü–µ–Ω—Ç—Ä–∞ —Å –∞–∫—Ü–µ–Ω—Ç–æ–º –Ω–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –∏ –≥—Ä—É–ø–ø–æ–≤—ã–µ –∑–∞–Ω—è—Ç–∏—è. –ù—É–∂–Ω—ã —è—Ä–∫–∏–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏, –∞–Ω–∏–º–∞—Ü–∏–∏ –ø—Ä–∏ —Å–∫—Ä–æ–ª–ª–µ –∏ —Ñ–æ—Ä–º–∞ –∑–∞–ø–∏—Å–∏ –Ω–∞ –ø—Ä–æ–±–Ω–æ–µ –∑–∞–Ω—è—Ç–∏–µ."
          rows={4}
        />
        <small className="ai-form-hint">–≠—Ç–æ –æ–ø–∏—Å–∞–Ω–∏–µ –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ AI –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∞—à–µ–≥–æ —Å–∞–π—Ç–∞. –ß–µ–º –ø–æ–¥—Ä–æ–±–Ω–µ–µ –≤—ã –æ–ø–∏—à–µ—Ç–µ —Å–≤–æ–∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è, —Ç–µ–º –ª—É—á—à–µ –±—É–¥–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç.</small>
      </div>

      <div className="ai-form-group">
        <label>–ò–Ω–¥—É—Å—Ç—Ä–∏—è</label>
        <div className="ai-options-grid">
          {INDUSTRIES.map(industry => (
            <div
              key={industry.value}
              className={`ai-option ${formData.businessInfo.industry === industry.value ? 'selected' : ''}`}
              onClick={() => handleInputChange('businessInfo', 'industry', industry.value)}
            >
              <div className="ai-option-header">
                <span className="ai-option-icon">{industry.label.split(' ')[0]}</span>
                <span className="ai-option-title">{industry.label.split(' ').slice(1).join(' ')}</span>
              </div>
              <p className="ai-option-description">{industry.description}</p>
            </div>
          ))}
        </div>
      </div>
    </div>
  );

  const renderArchitectureStep = () => (
    <div className="ai-step">
      <div className="ai-step-header">
        <h2>–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞</h2>
        <p>–û–ø—Ä–µ–¥–µ–ª–∏—Ç–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∏ UX —Å–∞–π—Ç–∞</p>
      </div>

      <div className="ai-form-group">
        <label>–¶–µ–ª–µ–≤–∞—è –∞—É–¥–∏—Ç–æ—Ä–∏—è <span className="required">*</span></label>
        <textarea
          value={formData.businessInfo.target_audience}
          onChange={(e) => handleInputChange('businessInfo', 'target_audience', e.target.value)}
          placeholder="–û–ø–∏—à–∏—Ç–µ –≤–∞—à—É —Ü–µ–ª–µ–≤—É—é –∞—É–¥–∏—Ç–æ—Ä–∏—é: –≤–æ–∑—Ä–∞—Å—Ç, –∏–Ω—Ç–µ—Ä–µ—Å—ã, –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏..."
        />
      </div>

      <div className="ai-form-group">
        <label>–¶–µ–ª–∏ –ø—Ä–æ–µ–∫—Ç–∞ <span className="required">*</span></label>
        <div className="ai-tags-input">
          <input
            type="text"
            placeholder="–î–æ–±–∞–≤—å—Ç–µ —Ü–µ–ª—å –∏ –Ω–∞–∂–º–∏—Ç–µ Enter"
            onKeyDown={(e) => {
              if (e.key === 'Enter') {
                e.preventDefault();
                const input = e.target as HTMLInputElement;
                const value = input.value.trim();
                if (value) {
                  handleInputChange('businessInfo', 'goals', [...formData.businessInfo.goals, value]);
                  input.value = '';
                }
              }
            }}
          />
          <div className="ai-tags">
            {formData.businessInfo.goals.map((goal, index) => (
              <span key={index} className="ai-tag">
                {goal}
                <button
                  onClick={() => {
                    const newGoals = formData.businessInfo.goals.filter((_, i) => i !== index);
                    handleInputChange('businessInfo', 'goals', newGoals);
                  }}
                >
                  √ó
                </button>
              </span>
            ))}
          </div>
        </div>
      </div>

      <div className="ai-form-group">
        <label>–ö–æ–Ω–∫—É—Ä–µ–Ω—Ç—ã</label>
        <div className="ai-tags-input">
          <input
            type="text"
            placeholder="–î–æ–±–∞–≤—å—Ç–µ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–∞ –∏ –Ω–∞–∂–º–∏—Ç–µ Enter"
            onKeyDown={(e) => {
              if (e.key === 'Enter') {
                e.preventDefault();
                const input = e.target as HTMLInputElement;
                const value = input.value.trim();
                if (value) {
                  handleInputChange('businessInfo', 'competitors', [...formData.businessInfo.competitors, value]);
                  input.value = '';
                }
              }
            }}
          />
          <div className="ai-tags">
            {formData.businessInfo.competitors.map((competitor, index) => (
              <span key={index} className="ai-tag">
                {competitor}
                <button
                  onClick={() => {
                    const newCompetitors = formData.businessInfo.competitors.filter((_, i) => i !== index);
                    handleInputChange('businessInfo', 'competitors', newCompetitors);
                  }}
                >
                  √ó
                </button>
              </span>
            ))}
          </div>
        </div>
      </div>
    </div>
  );

  const renderDesignStep = () => (
    <div className="ai-step">
      <div className="ai-step-header">
        <h2>–î–∏–∑–∞–π–Ω</h2>
        <p>–í—ã–±–µ—Ä–∏—Ç–µ –≤–∏–∑—É–∞–ª—å–Ω—ã–π —Å—Ç–∏–ª—å —Å–∞–π—Ç–∞</p>
      </div>

      <div className="ai-form-group">
        <label>–°—Ç–∏–ª—å –¥–∏–∑–∞–π–Ω–∞</label>
        <div className="ai-options-grid">
          {DESIGN_STYLES.map(style => (
            <div
              key={style.value}
              className={`ai-option ${formData.design.style === style.value ? 'selected' : ''}`}
              onClick={() => handleInputChange('design', 'style', style.value)}
            >
              <div className="ai-option-header">
                <span className="ai-option-icon">{style.label.split(' ')[0]}</span>
                <span className="ai-option-title">{style.label.split(' ').slice(1).join(' ')}</span>
              </div>
              <p className="ai-option-description">{style.description}</p>
            </div>
          ))}
        </div>
      </div>
    </div>
  );

  const renderContentStep = () => (
    <div className="ai-step">
      <div className="ai-step-header">
        <h2>–ö–æ–Ω—Ç–µ–Ω—Ç</h2>
        <p>–û–ø—Ä–µ–¥–µ–ª–∏—Ç–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —Å–∞–π—Ç–∞</p>
      </div>

      <div className="ai-form-group">
        <label>–û—Å–Ω–æ–≤–Ω—ã–µ —Ä–∞–∑–¥–µ–ª—ã <span className="required">*</span></label>
        <div className="ai-tags-input">
          <input
            type="text"
            placeholder="–î–æ–±–∞–≤—å—Ç–µ —Ä–∞–∑–¥–µ–ª –∏ –Ω–∞–∂–º–∏—Ç–µ Enter"
            onKeyDown={(e) => {
              if (e.key === 'Enter') {
                e.preventDefault();
                const input = e.target as HTMLInputElement;
                const value = input.value.trim();
                if (value) {
                  handleInputChange('content', 'mainSections', [...formData.content.mainSections, value]);
                  input.value = '';
                }
              }
            }}
          />
          <div className="ai-tags">
            {formData.content.mainSections.map((section, index) => (
              <span key={index} className="ai-tag">
                {section}
                <button
                  onClick={() => {
                    const newSections = formData.content.mainSections.filter((_, i) => i !== index);
                    handleInputChange('content', 'mainSections', newSections);
                  }}
                >
                  √ó
                </button>
              </span>
            ))}
          </div>
        </div>
      </div>

      <div className="ai-form-group">
        <label>–ö–ª—é—á–µ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è</label>
        <div className="ai-tags-input">
          <input
            type="text"
            placeholder="–î–æ–±–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –Ω–∞–∂–º–∏—Ç–µ Enter"
            onKeyDown={(e) => {
              if (e.key === 'Enter') {
                e.preventDefault();
                const input = e.target as HTMLInputElement;
                const value = input.value.trim();
                if (value) {
                  handleInputChange('content', 'keyMessages', [...formData.content.keyMessages, value]);
                  input.value = '';
                }
              }
            }}
          />
          <div className="ai-tags">
            {formData.content.keyMessages.map((message, index) => (
              <span key={index} className="ai-tag">
                {message}
                <button
                  onClick={() => {
                    const newMessages = formData.content.keyMessages.filter((_, i) => i !== index);
                    handleInputChange('content', 'keyMessages', newMessages);
                  }}
                >
                  √ó
                </button>
              </span>
            ))}
          </div>
        </div>
      </div>

      <div className="ai-form-group">
        <label>–ü—Ä–∏–∑—ã–≤—ã –∫ –¥–µ–π—Å—Ç–≤–∏—é</label>
        <div className="ai-tags-input">
          <input
            type="text"
            placeholder="–î–æ–±–∞–≤—å—Ç–µ CTA –∏ –Ω–∞–∂–º–∏—Ç–µ Enter"
            onKeyDown={(e) => {
              if (e.key === 'Enter') {
                e.preventDefault();
                const input = e.target as HTMLInputElement;
                const value = input.value.trim();
                if (value) {
                  handleInputChange('content', 'callToActions', [...formData.content.callToActions, value]);
                  input.value = '';
                }
              }
            }}
          />
          <div className="ai-tags">
            {formData.content.callToActions.map((cta, index) => (
              <span key={index} className="ai-tag">
                {cta}
                <button
                  onClick={() => {
                    const newCTAs = formData.content.callToActions.filter((_, i) => i !== index);
                    handleInputChange('content', 'callToActions', newCTAs);
                  }}
                >
                  √ó
                </button>
              </span>
            ))}
          </div>
        </div>
      </div>
    </div>
  );

  const renderMediaStep = () => (
    <div className="ai-step">
      <div className="ai-step-header">
        <h2>–ú–µ–¥–∏–∞</h2>
        <p>–ù–∞—Å—Ç—Ä–æ–π—Ç–µ –≤–∏–∑—É–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç</p>
      </div>

      <div className="ai-form-group">
        <label>–¢–∏–ø–æ–≥—Ä–∞—Ñ–∏—è</label>
        <select
          value={formData.design.typography}
          onChange={(e) => handleInputChange('design', 'typography', e.target.value)}
        >
          <option value="modern">–°–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è</option>
          <option value="classic">–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∞—è</option>
          <option value="minimal">–ú–∏–Ω–∏–º–∞–ª–∏—Å—Ç–∏—á–Ω–∞—è</option>
          <option value="creative">–ö—Ä–µ–∞—Ç–∏–≤–Ω–∞—è</option>
          <option value="tech">–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è</option>
        </select>
      </div>

      <div className="ai-form-group">
        <label>–ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ</label>
        <select
          value={formData.design.mood}
          onChange={(e) => handleInputChange('design', 'mood', e.target.value)}
        >
          <option value="professional">–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–µ</option>
          <option value="friendly">–î—Ä—É–∂–µ–ª—é–±–Ω–æ–µ</option>
          <option value="luxury">–ü—Ä–µ–º–∏–∞–ª—å–Ω–æ–µ</option>
          <option value="playful">–ò–≥—Ä–∏–≤–æ–µ</option>
          <option value="serious">–°–µ—Ä—å–µ–∑–Ω–æ–µ</option>
          <option value="innovative">–ò–Ω–Ω–æ–≤–∞—Ü–∏–æ–Ω–Ω–æ–µ</option>
        </select>
      </div>
    </div>
  );

  const renderInteractiveStep = () => (
    <div className="ai-step">
      <div className="ai-step-header">
        <h2>–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å</h2>
        <p>–ù–∞—Å—Ç—Ä–æ–π—Ç–µ –∞–Ω–∏–º–∞—Ü–∏–∏ –∏ —ç—Ñ—Ñ–µ–∫—Ç—ã</p>
      </div>

      <div className="ai-form-group">
        <label>–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è</label>
        <div className="ai-checkbox-group">
          <label className="ai-checkbox">
            <input
              type="checkbox"
              checked={formData.technical.animations}
              onChange={(e) => handleInputChange('technical', 'animations', e.target.checked)}
            />
            <span>–ê–Ω–∏–º–∞—Ü–∏–∏ –∏ —ç—Ñ—Ñ–µ–∫—Ç—ã</span>
          </label>

          <label className="ai-checkbox">
            <input
              type="checkbox"
              checked={formData.technical.responsive}
              onChange={(e) => handleInputChange('technical', 'responsive', e.target.checked)}
            />
            <span>–ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π –¥–∏–∑–∞–π–Ω</span>
          </label>

          <label className="ai-checkbox">
            <input
              type="checkbox"
              checked={formData.technical.accessibility}
              onChange={(e) => handleInputChange('technical', 'accessibility', e.target.checked)}
            />
            <span>–î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å (a11y)</span>
          </label>
        </div>
      </div>

      <div className="ai-form-group">
        <label>–û—Å–æ–±—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏</label>
        <div className="ai-tags-input">
          <input
            type="text"
            placeholder="–î–æ–±–∞–≤—å—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é –∏ –Ω–∞–∂–º–∏—Ç–µ Enter"
            onKeyDown={(e) => {
              if (e.key === 'Enter') {
                e.preventDefault();
                const input = e.target as HTMLInputElement;
                const value = input.value.trim();
                if (value) {
                  handleInputChange('technical', 'features', [...formData.technical.features, value]);
                  input.value = '';
                }
              }
            }}
          />
          <div className="ai-tags">
            {formData.technical.features.map((feature, index) => (
              <span key={index} className="ai-tag">
                {feature}
                <button
                  onClick={() => {
                    const newFeatures = formData.technical.features.filter((_, i) => i !== index);
                    handleInputChange('technical', 'features', newFeatures);
                  }}
                >
                  √ó
                </button>
              </span>
            ))}
          </div>
        </div>
      </div>
    </div>
  );

  const renderOptimizationStep = () => (
    <div className="ai-step">
      <div className="ai-step-header">
        <h2>–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è</h2>
        <p>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–µ—Ä–µ–¥ –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π</p>
      </div>

      <div className="ai-summary">
        <div className="ai-summary-section">
          <h3>–ë–∏–∑–Ω–µ—Å</h3>
          <div className="ai-summary-item">
            <span>–ù–∞–∑–≤–∞–Ω–∏–µ:</span>
            <span>{formData.title}</span>
          </div>
          <div className="ai-summary-item">
            <span>–ò–Ω–¥—É—Å—Ç—Ä–∏—è:</span>
            <span>{formData.businessInfo.industry}</span>
          </div>
          <div className="ai-summary-item">
            <span>–¶–µ–ª–∏:</span>
            <span>{formData.businessInfo.goals.length} –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ</span>
          </div>
        </div>

        <div className="ai-summary-section">
          <h3>–î–∏–∑–∞–π–Ω</h3>
          <div className="ai-summary-item">
            <span>–°—Ç–∏–ª—å:</span>
            <span>{formData.design.style}</span>
          </div>
          <div className="ai-summary-item">
            <span>–¢–∏–ø–æ–≥—Ä–∞—Ñ–∏—è:</span>
            <span>{formData.design.typography}</span>
          </div>
          <div className="ai-summary-item">
            <span>–ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ:</span>
            <span>{formData.design.mood}</span>
          </div>
        </div>

        <div className="ai-summary-section">
          <h3>–ö–æ–Ω—Ç–µ–Ω—Ç</h3>
          <div className="ai-summary-item">
            <span>–†–∞–∑–¥–µ–ª—ã:</span>
            <span>{formData.content.mainSections.length} –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ</span>
          </div>
          <div className="ai-summary-item">
            <span>–°–æ–æ–±—â–µ–Ω–∏—è:</span>
            <span>{formData.content.keyMessages.length} –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ</span>
          </div>
          <div className="ai-summary-item">
            <span>CTA:</span>
            <span>{formData.content.callToActions.length} –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ</span>
          </div>
        </div>

        <div className="ai-summary-section">
          <h3>–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ</h3>
          <div className="ai-summary-item">
            <span>–ê–Ω–∏–º–∞—Ü–∏–∏:</span>
            <span>{formData.technical.animations ? '–î–∞' : '–ù–µ—Ç'}</span>
          </div>
          <div className="ai-summary-item">
            <span>–ê–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç—å:</span>
            <span>{formData.technical.responsive ? '–î–∞' : '–ù–µ—Ç'}</span>
          </div>
          <div className="ai-summary-item">
            <span>–î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å:</span>
            <span>{formData.technical.accessibility ? '–î–∞' : '–ù–µ—Ç'}</span>
          </div>
        </div>
      </div>
    </div>
  );

  const renderCurrentStep = () => {
    switch (currentStep) {
      case 1:
        return renderBusinessStep();
      case 2:
        return renderArchitectureStep();
      case 3:
        return renderDesignStep();
      case 4:
        return renderContentStep();
      case 5:
        return renderMediaStep();
      case 6:
        return renderInteractiveStep();
      case 7:
        return renderOptimizationStep();
      default:
        return <div>Step {currentStep}</div>;
    }
  };

  if (isGenerating) {
    return (
      <div className="ai-builder-page">
        <div className="ai-builder-container">
          <div className="ai-generating">
            <div className="ai-generating-icon">‚ö°</div>
            <div className="ai-generating-text">
              {STEPS[Math.floor((generationProgress / 100) * (STEPS.length - 1))].title}
            </div>
            <div className="ai-generating-subtext">
              {STEPS[Math.floor((generationProgress / 100) * (STEPS.length - 1))].description}
            </div>
            <div className="ai-progress-bar">
              <div className="ai-progress-fill" style={{ width: `${generationProgress}%` }} />
            </div>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="ai-builder-page">
      <div className="ai-builder-container">
        <div className="ai-builder-header">
          <div className="ai-builder-title">
            <h1>AI Website Builder</h1>
            <p>–°–æ–∑–¥–∞–π—Ç–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π —Å–∞–π—Ç —Å –ø–æ–º–æ—â—å—é –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞</p>
          </div>

          {userLimits && (
            <div className={`ai-limits ${userLimits.can_generate ? 'available' : 'exhausted'}`}>
              <div className="ai-limits-text">
                <span className="ai-limits-count">{userLimits.remaining_today}</span>
                <span className="ai-limits-label">–≥–µ–Ω–µ—Ä–∞—Ü–∏–π –æ—Å—Ç–∞–ª–æ—Å—å</span>
                {userLimits.is_premium && (
                  <span className="ai-limits-premium">PREMIUM</span>
                )}
              </div>
            </div>
          )}
        </div>

        <div className="ai-progress">
          <div className="ai-progress-steps">
            {STEPS.map((step, index) => (
              <div
                key={step.id}
                className={`ai-progress-step ${currentStep >= step.id ? 'active' : ''} ${currentStep === step.id ? 'current' : ''}`}
              >
                <div className="ai-progress-step-number">{step.id}</div>
                <div className="ai-progress-step-label">{step.title}</div>
              </div>
            ))}
          </div>
        </div>

        {error && <div className="ai-error">{error}</div>}

        {renderCurrentStep()}

        <div className="ai-buttons" style={{ display: 'flex', justifyContent: 'space-between', marginTop: '2rem' }}>
          {currentStep > 1 && (
            <button className="ai-button secondary" onClick={prevStep}>
              –ù–∞–∑–∞–¥
            </button>
          )}
          {currentStep < STEPS.length ? (
            <button className="ai-button primary" onClick={nextStep}>
              –î–∞–ª–µ–µ
            </button>
          ) : (
            <button
              className="ai-button primary"
              onClick={handleGenerate}
              disabled={!userLimits?.can_generate}
            >
              –°–æ–∑–¥–∞—Ç—å —Å–∞–π—Ç
            </button>
          )}
        </div>
      </div>
    </div>
  );
} 