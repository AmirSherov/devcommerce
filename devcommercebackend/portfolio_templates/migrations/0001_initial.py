# Generated by Django 5.2.3 on 2025-07-02 08:52

import django.core.validators
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('portfolio', '0004_alter_portfolio_unique_together_alter_portfolio_slug'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='PortfolioTemplate',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(help_text='Название шаблона', max_length=200, validators=[django.core.validators.MinLengthValidator(3)])),
                ('description', models.TextField(help_text='Описание шаблона и его особенностей', validators=[django.core.validators.MinLengthValidator(10)])),
                ('category', models.CharField(choices=[('fullstack', 'Fullstack Developer'), ('frontend', 'Frontend Developer'), ('backend', 'Backend Developer'), ('mobile', 'Mobile Developer'), ('devops', 'DevOps Engineer'), ('data_scientist', 'Data Scientist'), ('ml_engineer', 'ML Engineer'), ('qa_engineer', 'QA Engineer'), ('ui_designer', 'UI/UX Designer'), ('product_manager', 'Product Manager'), ('cyber_security', 'Cybersecurity Specialist'), ('blockchain', 'Blockchain Developer'), ('game_developer', 'Game Developer'), ('ai_engineer', 'AI Engineer'), ('cloud_architect', 'Cloud Architect'), ('business_analyst', 'Business Analyst'), ('scrum_master', 'Scrum Master'), ('technical_writer', 'Technical Writer'), ('sales_engineer', 'Sales Engineer'), ('other', 'Другая специализация')], default='fullstack', help_text='IT специализация для которой предназначен шаблон', max_length=50)),
                ('difficulty', models.CharField(choices=[('beginner', 'Начинающий'), ('intermediate', 'Средний'), ('advanced', 'Продвинутый')], default='intermediate', help_text='Уровень сложности шаблона', max_length=20)),
                ('html_code', models.TextField(help_text='HTML код шаблона', validators=[django.core.validators.MinLengthValidator(50)])),
                ('css_code', models.TextField(help_text='CSS код шаблона', validators=[django.core.validators.MinLengthValidator(50)])),
                ('js_code', models.TextField(blank=True, help_text='JavaScript код шаблона (необязательно)')),
                ('thumbnail_image', models.URLField(blank=True, help_text='URL превью изображения шаблона')),
                ('demo_url', models.URLField(blank=True, help_text='Ссылка на демо шаблона (необязательно)')),
                ('tags', models.JSONField(default=list, help_text='Теги для поиска (список строк)')),
                ('likes', models.PositiveIntegerField(default=0, help_text='Количество лайков')),
                ('views', models.PositiveIntegerField(default=0, help_text='Количество просмотров')),
                ('uses', models.PositiveIntegerField(default=0, help_text='Количество использований')),
                ('is_active', models.BooleanField(default=True, help_text='Активен ли шаблон')),
                ('is_featured', models.BooleanField(default=False, help_text='Рекомендуемый шаблон')),
                ('is_premium', models.BooleanField(default=False, help_text='Премиум шаблон')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(help_text='Создатель шаблона', on_delete=django.db.models.deletion.CASCADE, related_name='created_templates', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Шаблон портфолио',
                'verbose_name_plural': 'Шаблоны портфолио',
                'ordering': ['-is_featured', '-likes', '-created_at'],
            },
        ),
        migrations.CreateModel(
            name='TemplateLike',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('liked_at', models.DateTimeField(auto_now_add=True)),
                ('template', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='template_likes', to='portfolio_templates.portfoliotemplate')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='liked_templates', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Лайк шаблона',
                'verbose_name_plural': 'Лайки шаблонов',
                'ordering': ['-liked_at'],
            },
        ),
        migrations.CreateModel(
            name='TemplateUsage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('used_at', models.DateTimeField(auto_now_add=True)),
                ('portfolio_created', models.ForeignKey(blank=True, help_text='Созданное портфолио на основе шаблона', null=True, on_delete=django.db.models.deletion.SET_NULL, to='portfolio.portfolio')),
                ('template', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='usages', to='portfolio_templates.portfoliotemplate')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='template_usages', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Использование шаблона',
                'verbose_name_plural': 'Использования шаблонов',
                'ordering': ['-used_at'],
            },
        ),
        migrations.AddIndex(
            model_name='portfoliotemplate',
            index=models.Index(fields=['category', 'is_active'], name='portfolio_t_categor_841d9d_idx'),
        ),
        migrations.AddIndex(
            model_name='portfoliotemplate',
            index=models.Index(fields=['is_featured', 'is_active'], name='portfolio_t_is_feat_72030e_idx'),
        ),
        migrations.AddIndex(
            model_name='portfoliotemplate',
            index=models.Index(fields=['-likes', '-views'], name='portfolio_t_likes_5f76a1_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='templatelike',
            unique_together={('template', 'user')},
        ),
        migrations.AlterUniqueTogether(
            name='templateusage',
            unique_together={('template', 'user', 'portfolio_created')},
        ),
    ]
