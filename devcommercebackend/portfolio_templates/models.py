from django.db import models
from django.contrib.auth import get_user_model
from django.utils import timezone
from django.core.validators import MinLengthValidator

User = get_user_model()


class PortfolioTemplate(models.Model):
    """
    üé® –ú–û–î–ï–õ–¨ –®–ê–ë–õ–û–ù–ê –ü–û–†–¢–§–û–õ–ò–û
    
    –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ
    """
    
    CATEGORY_CHOICES = [
        ('fullstack', 'Fullstack Developer'),
        ('frontend', 'Frontend Developer'),
        ('backend', 'Backend Developer'),
        ('mobile', 'Mobile Developer'),
        ('devops', 'DevOps Engineer'),
        ('data_scientist', 'Data Scientist'),
        ('ml_engineer', 'ML Engineer'),
        ('qa_engineer', 'QA Engineer'),
        ('ui_designer', 'UI/UX Designer'),
        ('product_manager', 'Product Manager'),
        ('cyber_security', 'Cybersecurity Specialist'),
        ('blockchain', 'Blockchain Developer'),
        ('game_developer', 'Game Developer'),
        ('ai_engineer', 'AI Engineer'),
        ('cloud_architect', 'Cloud Architect'),
        ('business_analyst', 'Business Analyst'),
        ('scrum_master', 'Scrum Master'),
        ('technical_writer', 'Technical Writer'),
        ('sales_engineer', 'Sales Engineer'),
        ('other', '–î—Ä—É–≥–∞—è —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è'),
    ]
    
    DIFFICULTY_CHOICES = [
        ('beginner', '–ù–∞—á–∏–Ω–∞—é—â–∏–π'),
        ('intermediate', '–°—Ä–µ–¥–Ω–∏–π'),
        ('advanced', '–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π'),
    ]
    
    # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    title = models.CharField(
        max_length=200, 
        help_text="–ù–∞–∑–≤–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞",
        validators=[MinLengthValidator(3)]
    )
    
    description = models.TextField(
        help_text="–û–ø–∏—Å–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞ –∏ –µ–≥–æ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–µ–π",
        validators=[MinLengthValidator(10)]
    )
    
    category = models.CharField(
        max_length=50,
        choices=CATEGORY_CHOICES,
        default='fullstack',
        help_text="IT —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–ª—è –∫–æ—Ç–æ—Ä–æ–π –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω —à–∞–±–ª–æ–Ω"
    )
    
    difficulty = models.CharField(
        max_length=20,
        choices=DIFFICULTY_CHOICES,
        default='intermediate',
        help_text="–£—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ —à–∞–±–ª–æ–Ω–∞"
    )
    
    # –ö–æ–¥ —à–∞–±–ª–æ–Ω–∞
    html_code = models.TextField(
        help_text="HTML –∫–æ–¥ —à–∞–±–ª–æ–Ω–∞",
        validators=[MinLengthValidator(50)]
    )
    
    css_code = models.TextField(
        help_text="CSS –∫–æ–¥ —à–∞–±–ª–æ–Ω–∞",
        validators=[MinLengthValidator(50)]
    )
    
    js_code = models.TextField(
        blank=True,
        help_text="JavaScript –∫–æ–¥ —à–∞–±–ª–æ–Ω–∞ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)"
    )
    
    # –ü—Ä–µ–≤—å—é –∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
    thumbnail_image = models.URLField(
        blank=True,
        help_text="URL –ø—Ä–µ–≤—å—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–∞"
    )
    
    demo_url = models.URLField(
        blank=True,
        help_text="–°—Å—ã–ª–∫–∞ –Ω–∞ –¥–µ–º–æ —à–∞–±–ª–æ–Ω–∞ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)"
    )
    
    tags = models.JSONField(
        default=list,
        help_text="–¢–µ–≥–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞ (—Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–æ–∫)"
    )
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    likes = models.PositiveIntegerField(
        default=0,
        help_text="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–∞–π–∫–æ–≤"
    )
    
    views = models.PositiveIntegerField(
        default=0,
        help_text="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤"
    )
    
    uses = models.PositiveIntegerField(
        default=0,
        help_text="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π"
    )
    
    # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
    is_active = models.BooleanField(
        default=True,
        help_text="–ê–∫—Ç–∏–≤–µ–Ω –ª–∏ —à–∞–±–ª–æ–Ω"
    )
    
    is_featured = models.BooleanField(
        default=False,
        help_text="–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π —à–∞–±–ª–æ–Ω"
    )
    
    is_premium = models.BooleanField(
        default=False,
        help_text="–ü—Ä–µ–º–∏—É–º —à–∞–±–ª–æ–Ω"
    )
    
    # –ê–≤—Ç–æ—Ä –∏ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏
    created_by = models.ForeignKey(
        User,
        on_delete=models.CASCADE,
        related_name='created_templates',
        help_text="–°–æ–∑–¥–∞—Ç–µ–ª—å —à–∞–±–ª–æ–Ω–∞"
    )
    
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)
    
    class Meta:
        ordering = ['-is_featured', '-likes', '-created_at']
        verbose_name = '–®–∞–±–ª–æ–Ω –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ'
        verbose_name_plural = '–®–∞–±–ª–æ–Ω—ã –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ'
        indexes = [
            models.Index(fields=['category', 'is_active']),
            models.Index(fields=['is_featured', 'is_active']),
            models.Index(fields=['-likes', '-views']),
        ]
    
    def __str__(self):
        return f"{self.title} ({self.get_category_display()})"
    
    def increment_views(self):
        """–£–≤–µ–ª–∏—á–∏—Ç—å —Å—á–µ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤"""
        self.views += 1
        self.save(update_fields=['views'])
    
    def increment_uses(self):
        """–£–≤–µ–ª–∏—á–∏—Ç—å —Å—á–µ—Ç—á–∏–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π"""
        self.uses += 1
        self.save(update_fields=['uses'])
    
    def add_like(self):
        """–î–æ–±–∞–≤–∏—Ç—å –ª–∞–π–∫"""
        self.likes += 1
        self.save(update_fields=['likes'])
    
    def remove_like(self):
        """–£–±—Ä–∞—Ç—å –ª–∞–π–∫"""
        if self.likes > 0:
            self.likes -= 1
            self.save(update_fields=['likes'])
    
    @property
    def preview_html(self):
        """–ü–æ–ª—É—á–∏—Ç—å HTML –¥–ª—è –ø—Ä–µ–≤—å—é"""
        return self.html_code[:500] + '...' if len(self.html_code) > 500 else self.html_code
    
    @property
    def is_popular(self):
        """–ü–æ–ø—É–ª—è—Ä–Ω—ã–π –ª–∏ —à–∞–±–ª–æ–Ω"""
        return self.likes >= 10 or self.uses >= 50


class TemplateUsage(models.Model):
    """
    üìä –ú–û–î–ï–õ–¨ –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Ø –®–ê–ë–õ–û–ù–ê
    
    –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∫—Ç–æ –∏ –∫–æ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª —à–∞–±–ª–æ–Ω
    """
    
    template = models.ForeignKey(
        PortfolioTemplate,
        on_delete=models.CASCADE,
        related_name='usages'
    )
    
    user = models.ForeignKey(
        User,
        on_delete=models.CASCADE,
        related_name='template_usages'
    )
    
    portfolio_created = models.ForeignKey(
        'portfolio.Portfolio',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        help_text="–°–æ–∑–¥–∞–Ω–Ω–æ–µ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ –Ω–∞ –æ—Å–Ω–æ–≤–µ —à–∞–±–ª–æ–Ω–∞"
    )
    
    used_at = models.DateTimeField(auto_now_add=True)
    
    class Meta:
        unique_together = ['template', 'user', 'portfolio_created']
        ordering = ['-used_at']
        verbose_name = '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞'
        verbose_name_plural = '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —à–∞–±–ª–æ–Ω–æ–≤'
    
    def __str__(self):
        return f"{self.user.username} –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª {self.template.title}"


class TemplateLike(models.Model):
    """
    üëç –ú–û–î–ï–õ–¨ –õ–ê–ô–ö–û–í –®–ê–ë–õ–û–ù–û–í
    """
    
    template = models.ForeignKey(
        PortfolioTemplate,
        on_delete=models.CASCADE,
        related_name='template_likes'
    )
    
    user = models.ForeignKey(
        User,
        on_delete=models.CASCADE,
        related_name='liked_templates'
    )
    
    liked_at = models.DateTimeField(auto_now_add=True)
    
    class Meta:
        unique_together = ['template', 'user']
        ordering = ['-liked_at']
        verbose_name = '–õ–∞–π–∫ —à–∞–±–ª–æ–Ω–∞'
        verbose_name_plural = '–õ–∞–π–∫–∏ —à–∞–±–ª–æ–Ω–æ–≤'
    
    def __str__(self):
        return f"{self.user.username} –ª–∞–π–∫–Ω—É–ª {self.template.title}"
