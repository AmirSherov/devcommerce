"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã Pexels API
–ó–∞–ø—É—Å—Ç–∏—Ç–µ: python pexels_test.py

–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: https://www.pexels.com/api/documentation
"""

import os
import sys
import django
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ PYTHONPATH
sys.path.append(str(Path(__file__).parent.parent))

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'devcommercebackend.settings')
django.setup()

import requests
import logging
from pprint import pprint

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

def test_pexels_api():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Pexels API"""
    
    # API –∫–ª—é—á –∏–∑ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ (–±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤ –∏ –ø–µ—Ä–µ–Ω–æ—Å–æ–≤ —Å—Ç—Ä–æ–∫)
    api_key = "6r96KapNJVJkZ9Y22Bfa6dSiYYqPuvd0bbYQIhzTpmjyNhRtOGGcB6nj".strip()
    logger.info(f"–ò—Å–ø–æ–ª—å–∑—É–µ–º API –∫–ª—é—á: {api_key[:10]}...")
    
    # –ë–∞–∑–æ–≤—ã–π URL –¥–ª—è Pexels API
    base_url = "https://api.pexels.com/v1"
    
    # –ó–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ (—Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏)
    headers = {
        "Authorization": api_key.strip(),  # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –Ω–µ—Ç –ª–∏—à–Ω–∏—Ö –ø—Ä–æ–±–µ–ª–æ–≤
    }
    
    # –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
    try:
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä–∏–º —Å—Ç–∞—Ç—É—Å API
        logger.info("\n–ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å API...")
        response = requests.get(
            "https://api.pexels.com/v1/search",
            headers=headers,
            params={"query": "test", "per_page": 1}
        )
        
        logger.info(f"–°—Ç–∞—Ç—É—Å –∫–æ–¥: {response.status_code}")
        logger.info(f"–ó–∞–≥–æ–ª–æ–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞: {dict(response.headers)}")
        logger.info(f"–¢–µ–ª–æ –æ—Ç–≤–µ—Ç–∞: {response.text}")
        
        if response.status_code == 401:
            logger.error("‚ùå –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ API –∫–ª—é—á.")
            logger.info("–¢–µ–∫—É—â–∏–π –∫–ª—é—á:")
            logger.info(f"–î–ª–∏–Ω–∞: {len(api_key)}")
            logger.info(f"–ó–Ω–∞—á–µ–Ω–∏–µ: '{api_key}'")
            logger.info(f"–ó–∞–≥–æ–ª–æ–≤–æ–∫ Authorization: '{headers['Authorization']}'")
            return
            
        # –ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å –æ–∫, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å –ø–æ–∏—Å–∫–æ–º
        if response.status_code == 200:
            logger.info("\nAPI —Ä–∞–±–æ—Ç–∞–µ—Ç! –ü—Ä–æ–±—É–µ–º –ø–æ–∏—Å–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π...")
            search_response = requests.get(
                f"{base_url}/search",
                headers=headers,
                params={"query": "modern office", "per_page": 1}
            )
            
            if search_response.status_code == 200:
                data = search_response.json()
                logger.info(f"‚úÖ –£—Å–ø–µ—Ö! –ù–∞–π–¥–µ–Ω–æ —Ñ–æ—Ç–æ: {data['total_results']}")
                if data['photos']:
                    photo = data['photos'][0]
                    logger.info(f"–ü–µ—Ä–≤–æ–µ —Ñ–æ—Ç–æ:")
                    logger.info(f"- ID: {photo['id']}")
                    logger.info(f"- URL: {photo['url']}")
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {search_response.status_code}")
                logger.error(search_response.text)
                
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ: {str(e)}")
        import traceback
        logger.error(traceback.format_exc())

if __name__ == "__main__":
    logger.info("üöÄ –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Pexels API...")
    test_pexels_api()
    logger.info("‚ú® –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!") 