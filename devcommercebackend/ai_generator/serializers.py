from rest_framework import serializers
from django.contrib.auth import get_user_model
from .models import (
    TemplateAIGeneration, 
    TemplateAIStats, 
    GlobalTemplateAIStats
)

User = get_user_model()


class TemplateAIGenerationRequestSerializer(serializers.Serializer):
    """
    ü§ñ –°–ï–†–ò–ê–õ–ò–ó–ê–¢–û–† –î–õ–Ø –ó–ê–ü–†–û–°–ê AI –ó–ê–ü–û–õ–ù–ï–ù–ò–Ø –®–ê–ë–õ–û–ù–ê
    
    –ü—Ä–∏–Ω–∏–º–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏ HTML —à–∞–±–ª–æ–Ω–∞
    """
    
    project_title = serializers.CharField(
        max_length=200,
        help_text="–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞",
        error_messages={
            'required': '–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ',
            'blank': '–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º',
            'max_length': '–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–µ–≤—ã—à–∞—Ç—å 200 —Å–∏–º–≤–æ–ª–æ–≤'
        }
    )
    
    project_description = serializers.CharField(
        max_length=1000,
        help_text="–û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞",
        error_messages={
            'required': '–û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ',
            'blank': '–û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º',
            'max_length': '–û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–µ–≤—ã—à–∞—Ç—å 1000 —Å–∏–º–≤–æ–ª–æ–≤'
        }
    )
    
    user_data = serializers.CharField(
        help_text="–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è AI –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è (—Å–≤–æ–±–æ–¥–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç: –Ω–∞–≤—ã–∫–∏, –æ–ø—ã—Ç, –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ, –∫–æ–Ω—Ç–∞–∫—Ç—ã)",
        error_messages={
            'required': '–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã',
            'blank': '–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º–∏'
        }
    )
    
    def validate_project_title(self, value):
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞"""
        cleaned_title = value.strip()
        if len(cleaned_title) < 3:
            raise serializers.ValidationError(
                "–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞"
            )
        if len(cleaned_title) > 200:
            raise serializers.ValidationError(
                "–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–µ–≤—ã—à–∞—Ç—å 200 —Å–∏–º–≤–æ–ª–æ–≤"
            )
        return cleaned_title
    
    def validate_project_description(self, value):
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –æ–ø–∏—Å–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞"""
        cleaned_description = value.strip()
        if len(cleaned_description) < 10:
            raise serializers.ValidationError(
                "–û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 10 —Å–∏–º–≤–æ–ª–æ–≤"
            )
        if len(cleaned_description) > 1000:
            raise serializers.ValidationError(
                "–û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–µ–≤—ã—à–∞—Ç—å 1000 —Å–∏–º–≤–æ–ª–æ–≤"
            )
        return cleaned_description
    
    def validate_user_data(self, value):
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö"""
        cleaned_data = value.strip()
        if len(cleaned_data) < 20:
            raise serializers.ValidationError(
                "–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–µ (–º–∏–Ω–∏–º—É–º 20 —Å–∏–º–≤–æ–ª–æ–≤)"
            )
        if len(cleaned_data) > 5000:
            raise serializers.ValidationError(
                "–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–µ (–º–∞–∫—Å–∏–º—É–º 5000 —Å–∏–º–≤–æ–ª–æ–≤)"
            )
        return cleaned_data


class TemplateAIGenerationSerializer(serializers.ModelSerializer):
    """
    üìä –°–ï–†–ò–ê–õ–ò–ó–ê–¢–û–† –î–õ–Ø –ú–û–î–ï–õ–ò AI –ì–ï–ù–ï–†–ê–¶–ò–ò –®–ê–ë–õ–û–ù–ê
    
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    
    template_title = serializers.CharField(source='template.title', read_only=True)
    template_category = serializers.CharField(source='template.category', read_only=True)
    user_username = serializers.CharField(source='user.username', read_only=True)
    portfolio_slug = serializers.CharField(source='portfolio_created.slug', read_only=True)
    portfolio_title = serializers.CharField(source='portfolio_created.title', read_only=True)
    duration = serializers.ReadOnlyField()
    status_display = serializers.CharField(source='get_status_display', read_only=True)
    
    class Meta:
        model = TemplateAIGeneration
        fields = [
            'id', 'user_username', 'template_title', 'template_category',
            'project_title', 'project_description', 'user_data',
            'status', 'status_display', 'portfolio_slug', 'portfolio_title',
            'response_time', 'tokens_used', 'error_message', 'duration',
            'created_at', 'started_at', 'completed_at'
        ]
        read_only_fields = [
            'id', 'user_username', 'template_title', 'template_category',
            'portfolio_slug', 'portfolio_title', 'duration', 'status_display',
            'created_at', 'started_at', 'completed_at'
        ]


class TemplateAIStatsSerializer(serializers.ModelSerializer):
    """
    üìà –°–ï–†–ò–ê–õ–ò–ó–ê–¢–û–† –î–õ–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ò AI –ì–ï–ù–ï–†–ê–¶–ò–ô –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø
    
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è AI –∏ –æ–±—ã—á–Ω—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤
    """
    
    user_username = serializers.CharField(source='user.username', read_only=True)
    ai_success_rate = serializers.ReadOnlyField()
    total_usage = serializers.ReadOnlyField()
    ai_success_rate_display = serializers.SerializerMethodField()
    total_ai_response_time_display = serializers.SerializerMethodField()
    
    class Meta:
        model = TemplateAIStats
        fields = [
            'id', 'user_username', 'date',
            'ai_requests_count', 'ai_successful_count', 'ai_failed_count',
            'regular_usage_count', 'total_ai_response_time', 'total_tokens_used',
            'popular_templates', 'ai_success_rate', 'ai_success_rate_display',
            'total_usage', 'total_ai_response_time_display',
            'created_at', 'updated_at'
        ]
        read_only_fields = [
            'id', 'user_username', 'ai_success_rate', 'total_usage',
            'ai_success_rate_display', 'total_ai_response_time_display',
            'created_at', 'updated_at'
        ]
    
    def get_ai_success_rate_display(self, obj):
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π success rate"""
        return f"{obj.ai_success_rate:.1f}%"
    
    def get_total_ai_response_time_display(self, obj):
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞"""
        if obj.total_ai_response_time:
            return f"{obj.total_ai_response_time:.2f}s"
        return "0.00s"


class GlobalTemplateAIStatsSerializer(serializers.ModelSerializer):
    """
    üåç –°–ï–†–ò–ê–õ–ò–ó–ê–¢–û–† –î–õ–Ø –ì–õ–û–ë–ê–õ–¨–ù–û–ô –°–¢–ê–¢–ò–°–¢–ò–ö–ò AI
    
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é AI
    """
    
    ai_vs_regular_ratio = serializers.ReadOnlyField()
    ai_success_rate = serializers.SerializerMethodField()
    average_ai_response_time_display = serializers.SerializerMethodField()
    
    class Meta:
        model = GlobalTemplateAIStats
        fields = [
            'id', 'date',
            'total_ai_requests', 'total_ai_successful', 'total_ai_failed',
            'total_regular_usage', 'active_ai_users', 'premium_users_count',
            'average_ai_response_time', 'total_tokens_consumed',
            'popular_templates_ai', 'popular_templates_regular',
            'error_distribution', 'ai_vs_regular_ratio',
            'ai_success_rate', 'average_ai_response_time_display',
            'created_at', 'updated_at'
        ]
        read_only_fields = [
            'id', 'ai_vs_regular_ratio', 'ai_success_rate',
            'average_ai_response_time_display', 'created_at', 'updated_at'
        ]
    
    def get_ai_success_rate(self, obj):
        """–í—ã—á–∏—Å–ª—è–µ–º success rate"""
        if obj.total_ai_requests > 0:
            return round((obj.total_ai_successful / obj.total_ai_requests) * 100, 1)
        return 0.0
    
    def get_average_ai_response_time_display(self, obj):
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞"""
        if obj.average_ai_response_time:
            return f"{obj.average_ai_response_time:.2f}s"
        return "0.00s"


class TemplateAILimitsSerializer(serializers.Serializer):
    """
    üîí –°–ï–†–ò–ê–õ–ò–ó–ê–¢–û–† –î–õ–Ø –õ–ò–ú–ò–¢–û–í AI –ì–ï–ù–ï–†–ê–¶–ò–ô
    
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ª–∏–º–∏—Ç–∞—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    
    is_premium = serializers.BooleanField(read_only=True)
    daily_limit = serializers.IntegerField(read_only=True)
    used_today = serializers.IntegerField(read_only=True)
    remaining_today = serializers.IntegerField(read_only=True)
    next_reset = serializers.DateTimeField(read_only=True)
    can_generate = serializers.BooleanField(read_only=True)
    limit_message = serializers.CharField(read_only=True)
    regular_usage_today = serializers.IntegerField(read_only=True)
    total_usage_today = serializers.IntegerField(read_only=True)


class RegularUsageRequestSerializer(serializers.Serializer):
    """
    üìù –°–ï–†–ò–ê–õ–ò–ó–ê–¢–û–† –î–õ–Ø –£–ß–ï–¢–ê –û–ë–´–ß–ù–û–ì–û –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Ø –®–ê–ë–õ–û–ù–û–í
    
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —à–∞–±–ª–æ–Ω–æ–≤ –±–µ–∑ AI
    """
    
    template_id = serializers.IntegerField(
        help_text="ID —à–∞–±–ª–æ–Ω–∞, –∫–æ—Ç–æ—Ä—ã–π –±—ã–ª –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω",
        error_messages={
            'required': 'ID —à–∞–±–ª–æ–Ω–∞ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω',
            'invalid': 'ID —à–∞–±–ª–æ–Ω–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º'
        }
    )
    
    def validate_template_id(self, value):
        """–í–∞–ª–∏–¥–∞—Ü–∏—è ID —à–∞–±–ª–æ–Ω–∞"""
        if value <= 0:
            raise serializers.ValidationError(
                "ID —à–∞–±–ª–æ–Ω–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º"
            )
        return value


class TemplateAIGenerationResponseSerializer(serializers.Serializer):
    """
    ‚úÖ –°–ï–†–ò–ê–õ–ò–ó–ê–¢–û–† –î–õ–Ø –û–¢–í–ï–¢–ê AI –ì–ï–ù–ï–†–ê–¶–ò–ò
    
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ AI –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ
    """
    
    success = serializers.BooleanField()
    portfolio_slug = serializers.CharField(required=False)
    portfolio_url = serializers.CharField(required=False)
    generation_id = serializers.IntegerField(required=False)
    response_time = serializers.FloatField(required=False)
    tokens_used = serializers.IntegerField(required=False)
    error = serializers.CharField(required=False)
    error_code = serializers.CharField(required=False)
    message = serializers.CharField(required=False)


class TemplateAIStatsOverviewSerializer(serializers.Serializer):
    """
    üéØ –°–ï–†–ò–ê–õ–ò–ó–ê–¢–û–† –î–õ–Ø –û–ë–©–ï–ì–û –û–ë–ó–û–†–ê –°–¢–ê–¢–ò–°–¢–ò–ö–ò –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø
    
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫—Ä–∞—Ç–∫—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è AI
    """
    
    total_ai_generations = serializers.IntegerField()
    successful_generations = serializers.IntegerField()
    failed_generations = serializers.IntegerField()
    success_rate = serializers.FloatField()
    average_response_time = serializers.FloatField()
    total_tokens_used = serializers.IntegerField()
    favorite_templates = serializers.ListField()
    today_usage = serializers.DictField()
    limits_info = serializers.DictField() 