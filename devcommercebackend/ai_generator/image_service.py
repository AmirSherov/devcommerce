import os
import uuid
import logging
import requests
import time
import random
from typing import Optional, Dict, Any, Tuple, List
from io import BytesIO
from datetime import datetime

import boto3
from botocore.exceptions import ClientError, NoCredentialsError
from PIL import Image
from django.conf import settings
from django.core.files.uploadedfile import InMemoryUploadedFile
from django.contrib.auth import get_user_model
from django.core.cache import cache

logger = logging.getLogger(__name__)
User = get_user_model()


class S3ImageService:
    """
    üñºÔ∏è –ü–†–ï–ú–ò–£–ú –°–ï–†–í–ò–° –î–õ–Ø –†–ê–ë–û–¢–´ –° –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–Ø–ú–ò
    
    –ó–∞–≥—Ä—É–∑–∫–∞, –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏ AI-–∞–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:
    - –§–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è
    - –î–∏–ø–ª–æ–º—ã/—Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã  
    - –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∏ —Å–∂–∞—Ç–∏–µ
    - –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å S3 AWS
    """
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è S3 –∫–ª–∏–µ–Ω—Ç–∞"""
        try:
            self.s3_client = boto3.client(
                's3',
                aws_access_key_id=settings.AWS_ACCESS_KEY_ID,
                aws_secret_access_key=settings.AWS_SECRET_ACCESS_KEY,
                region_name=settings.AWS_S3_REGION_NAME
            )
            self.bucket_name = settings.AWS_STORAGE_BUCKET_NAME
            self.base_url = f"https://{settings.AWS_S3_CUSTOM_DOMAIN}"
            
            logger.info("üéØ S3ImageService –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
            
        except Exception as e:
            logger.error(f"üí• –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ S3: {str(e)}")
            self.s3_client = None
    
    def upload_profile_photo(self, user: User, image_file: InMemoryUploadedFile) -> Optional[str]:
        """
        üì∏ –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
        Args:
            user: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            image_file: –ó–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            
        Returns:
            str: URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ S3 –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
        """
        if not self.s3_client:
            logger.error("üí• S3 –∫–ª–∏–µ–Ω—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return None
        
        try:
            # –í–∞–ª–∏–¥–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            if not self._validate_image(image_file, max_size_mb=5):
                logger.error("‚ùå –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –ø—Ä–æ—à–ª–æ –≤–∞–ª–∏–¥–∞—Ü–∏—é")
                return None
            
            # –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            optimized_image = self._optimize_profile_photo(image_file)
            if not optimized_image:
                logger.error("‚ùå –û—à–∏–±–∫–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
                return None
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –ø—É—Ç—å
            file_extension = self._get_file_extension(image_file.name)
            unique_filename = f"profile_{user.id}_{uuid.uuid4().hex[:8]}.{file_extension}"
            s3_key = f"users/{user.id}/profile_photos/{unique_filename}"
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤ S3
            self.s3_client.upload_fileobj(
                optimized_image,
                self.bucket_name,
                s3_key,
                ExtraArgs={
                    'ContentType': f'image/{file_extension}',
                    'CacheControl': 'max-age=86400'
                }
            )
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º URL
            image_url = f"{self.base_url}/{s3_key}"
            
            logger.info(f"‚úÖ –§–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è –∑–∞–≥—Ä—É–∂–µ–Ω–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.username}: {image_url}")
            return image_url
            
        except ClientError as e:
            logger.error(f"üí• AWS –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è: {str(e)}")
            return None
        except Exception as e:
            logger.error(f"üí• –û–±—â–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è: {str(e)}")
            return None
    
    def upload_diploma_image(self, user: User, image_file: InMemoryUploadedFile) -> Optional[str]:
        """
        üéì –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–∏–ø–ª–æ–º–∞/—Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞
        
        Args:
            user: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            image_file: –ó–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–∏–ø–ª–æ–º–∞
            
        Returns:
            str: URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ S3 –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
        """
        if not self.s3_client:
            logger.error("üí• S3 –∫–ª–∏–µ–Ω—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return None
        
        try:
            # –í–∞–ª–∏–¥–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–∏–ø–ª–æ–º–∞ (–±–æ–ª—å—à–∏–π —Ä–∞–∑–º–µ—Ä —Ä–∞–∑—Ä–µ—à–µ–Ω)
            if not self._validate_image(image_file, max_size_mb=10):
                logger.error("‚ùå –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–∏–ø–ª–æ–º–∞ –Ω–µ –ø—Ä–æ—à–ª–æ –≤–∞–ª–∏–¥–∞—Ü–∏—é")
                return None
            
            # –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–∏–ø–ª–æ–º–∞
            optimized_image = self._optimize_document_image(image_file)
            if not optimized_image:
                logger.error("‚ùå –û—à–∏–±–∫–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–∏–ø–ª–æ–º–∞")
                return None
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –ø—É—Ç—å
            file_extension = self._get_file_extension(image_file.name)
            unique_filename = f"diploma_{user.id}_{uuid.uuid4().hex[:8]}.{file_extension}"
            s3_key = f"users/{user.id}/education/{unique_filename}"
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤ S3
            self.s3_client.upload_fileobj(
                optimized_image,
                self.bucket_name,
                s3_key,
                ExtraArgs={
                    'ContentType': f'image/{file_extension}',
                    'CacheControl': 'max-age=86400'
                }
            )
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º URL
            image_url = f"{self.base_url}/{s3_key}"
            
            logger.info(f"‚úÖ –î–∏–ø–ª–æ–º –∑–∞–≥—Ä—É–∂–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.username}: {image_url}")
            return image_url
            
        except ClientError as e:
            logger.error(f"üí• AWS –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∏–ø–ª–æ–º–∞: {str(e)}")
            return None
        except Exception as e:
            logger.error(f"üí• –û–±—â–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∏–ø–ª–æ–º–∞: {str(e)}")
            return None
    
    def _validate_image(self, image_file: InMemoryUploadedFile, max_size_mb: int = 5) -> bool:
        """
        üîç –í–∞–ª–∏–¥–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        
        Args:
            image_file: –ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            max_size_mb: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –≤ –ú–ë
            
        Returns:
            bool: True –µ—Å–ª–∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ
        """
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
            max_size_bytes = max_size_mb * 1024 * 1024
            if image_file.size > max_size_bytes:
                logger.error(f"‚ùå –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π: {image_file.size} –±–∞–π—Ç (–º–∞–∫—Å: {max_size_bytes})")
                return False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞
            allowed_types = ['image/jpeg', 'image/jpg', 'image/png', 'image/webp']
            if image_file.content_type not in allowed_types:
                logger.error(f"‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞: {image_file.content_type}")
                return False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            try:
                image = Image.open(image_file)
                image.verify()  # –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å
                image_file.seek(0)  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —É–∫–∞–∑–∞—Ç–µ–ª—å –≤ –Ω–∞—á–∞–ª–æ
            except Exception as e:
                logger.error(f"‚ùå –§–∞–π–ª –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º: {str(e)}")
                return False
            
            return True
            
        except Exception as e:
            logger.error(f"üí• –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {str(e)}")
            return False
    
    def _optimize_profile_photo(self, image_file: InMemoryUploadedFile) -> Optional[BytesIO]:
        """
        üé® –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è
        
        - –ö–≤–∞–¥—Ä–∞—Ç–Ω—ã–π –∫—Ä–æ–ø
        - –†–∞–∑–º–µ—Ä 300x300
        - –°–∂–∞—Ç–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞
        """
        try:
            image = Image.open(image_file)
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ RGB –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            if image.mode in ('RGBA', 'LA', 'P'):
                background = Image.new('RGB', image.size, (255, 255, 255))
                background.paste(image, mask=image.split()[-1] if image.mode == 'RGBA' else None)
                image = background
            
            # –î–µ–ª–∞–µ–º –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã–π –∫—Ä–æ–ø (—Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π)
            width, height = image.size
            min_dimension = min(width, height)
            
            left = (width - min_dimension) // 2
            top = (height - min_dimension) // 2
            right = left + min_dimension
            bottom = top + min_dimension
            
            image = image.crop((left, top, right, bottom))
            
            # –ò–∑–º–µ–Ω—è–µ–º —Ä–∞–∑–º–µ—Ä –¥–æ 300x300
            image = image.resize((300, 300), Image.Resampling.LANCZOS)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            output = BytesIO()
            image.save(output, format='JPEG', quality=85, optimize=True)
            output.seek(0)
            
            logger.info("üé® –§–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: 300x300, –∫–∞—á–µ—Å—Ç–≤–æ 85%")
            return output
            
        except Exception as e:
            logger.error(f"üí• –û—à–∏–±–∫–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è: {str(e)}")
            return None
    
    def _optimize_document_image(self, image_file: InMemoryUploadedFile) -> Optional[BytesIO]:
        """
        üìÑ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞ (–¥–∏–ø–ª–æ–º, —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç)
        
        - –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–ø–æ—Ä—Ü–∏–∏
        - –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä 1200px –ø–æ –±–æ–ª—å—à–µ–π —Å—Ç–æ—Ä–æ–Ω–µ
        - –£–ª—É—á—à–∞–µ–º —á–∏—Ç–∞–µ–º–æ—Å—Ç—å
        """
        try:
            image = Image.open(image_file)
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ RGB –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            if image.mode in ('RGBA', 'LA', 'P'):
                background = Image.new('RGB', image.size, (255, 255, 255))
                background.paste(image, mask=image.split()[-1] if image.mode == 'RGBA' else None)
                image = background
            
            # –ò–∑–º–µ–Ω—è–µ–º —Ä–∞–∑–º–µ—Ä —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –ø—Ä–æ–ø–æ—Ä—Ü–∏–π
            max_size = 1200
            width, height = image.size
            
            if width > max_size or height > max_size:
                if width > height:
                    new_width = max_size
                    new_height = int((height * max_size) / width)
                else:
                    new_height = max_size
                    new_width = int((width * max_size) / height)
                
                image = image.resize((new_width, new_height), Image.Resampling.LANCZOS)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å —Ö–æ—Ä–æ—à–∏–º –∫–∞—á–µ—Å—Ç–≤–æ–º –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
            output = BytesIO()
            image.save(output, format='JPEG', quality=90, optimize=True)
            output.seek(0)
            
            logger.info(f"üìÑ –î–æ–∫—É–º–µ–Ω—Ç –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω: {image.size}, –∫–∞—á–µ—Å—Ç–≤–æ 90%")
            return output
            
        except Exception as e:
            logger.error(f"üí• –û—à–∏–±–∫–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {str(e)}")
            return None
    
    def _get_file_extension(self, filename: str) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è —Ñ–∞–π–ª–∞"""
        return filename.split('.')[-1].lower() if '.' in filename else 'jpg'
    
    def analyze_profile_photo_with_ai(self, image_url: str) -> Dict[str, Any]:
        """
        ü§ñ AI –∞–Ω–∞–ª–∏–∑ —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ
        
        Args:
            image_url: URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ S3
            
        Returns:
            dict: –†–µ–∑—É–ª—å—Ç–∞—Ç—ã AI –∞–Ω–∞–ª–∏–∑–∞
        """
        try:
            # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞—Ç—å CV API –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            # –ù–∞–ø—Ä–∏–º–µ—Ä: –¥–µ—Ç–µ–∫—Ü–∏—è –ª–∏—Ü–∞, –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å —Ñ–æ—Ç–æ, —Ü–≤–µ—Ç–æ–≤–∞—è —Å—Ö–µ–º–∞
            
            analysis_result = {
                'has_face': True,  # –ü—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö
                'is_professional': True,
                'dominant_colors': ['#2c3e50', '#34495e', '#ecf0f1'],
                'image_quality': 'high',
                'suggested_background': 'clean',
                'crop_suggestion': 'centered',
                'lighting_quality': 'good',
                'ai_recommendations': [
                    '–û—Ç–ª–∏—á–Ω–æ–µ —Ñ–æ—Ç–æ –¥–ª—è –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ',
                    '–•–æ—Ä–æ—à–µ–µ –æ—Å–≤–µ—â–µ–Ω–∏–µ –∏ –∫–æ–º–ø–æ–∑–∏—Ü–∏—è',
                    '–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–∞–∫ –æ—Å–Ω–æ–≤–Ω–æ–µ —Ñ–æ—Ç–æ'
                ]
            }
            
            logger.info(f"ü§ñ AI –∞–Ω–∞–ª–∏–∑ —Ñ–æ—Ç–æ –∑–∞–≤–µ—Ä—à–µ–Ω: {image_url}")
            return analysis_result
            
        except Exception as e:
            logger.error(f"üí• –û—à–∏–±–∫–∞ AI –∞–Ω–∞–ª–∏–∑–∞ —Ñ–æ—Ç–æ: {str(e)}")
            return {
                'has_face': True,
                'is_professional': True,
                'ai_recommendations': ['–§–æ—Ç–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ']
            }
    
    def delete_user_images(self, user: User) -> bool:
        """
        üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ S3
        
        Args:
            user: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            
        Returns:
            bool: True –µ—Å–ª–∏ —É–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ
        """
        if not self.s3_client:
            return False
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –æ–±—ä–µ–∫—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            prefix = f"users/{user.id}/"
            response = self.s3_client.list_objects_v2(
                Bucket=self.bucket_name,
                Prefix=prefix
            )
            
            if 'Contents' in response:
                # –£–¥–∞–ª—è–µ–º –≤—Å–µ –æ–±—ä–µ–∫—Ç—ã
                objects_to_delete = [{'Key': obj['Key']} for obj in response['Contents']]
                
                if objects_to_delete:
                    self.s3_client.delete_objects(
                        Bucket=self.bucket_name,
                        Delete={'Objects': objects_to_delete}
                    )
                    
                    logger.info(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ {len(objects_to_delete)} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.username}")
            
            return True
            
        except Exception as e:
            logger.error(f"üí• –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {str(e)}")
            return False


# –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
image_service = S3ImageService()


def upload_user_profile_photo(user: User, image_file: InMemoryUploadedFile) -> Optional[Tuple[str, Dict[str, Any]]]:
    """
    üéØ –•–µ–ª–ø–µ—Ä –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è —Å AI –∞–Ω–∞–ª–∏–∑–æ–º
    
    Returns:
        tuple: (image_url, ai_analysis) –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
    """
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        image_url = image_service.upload_profile_photo(user, image_file)
        if not image_url:
            return None
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å –ø–æ–º–æ—â—å—é AI
        ai_analysis = image_service.analyze_profile_photo_with_ai(image_url)
        
        return image_url, ai_analysis
        
    except Exception as e:
        logger.error(f"üí• –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è: {str(e)}")
        return None


def upload_user_diploma_image(user: User, image_file: InMemoryUploadedFile) -> Optional[str]:
    """
    üéì –•–µ–ª–ø–µ—Ä –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∏–ø–ª–æ–º–∞/—Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞
    
    Returns:
        str: URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
    """
    try:
        return image_service.upload_diploma_image(user, image_file)
        
    except Exception as e:
        logger.error(f"üí• –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∏–ø–ª–æ–º–∞: {str(e)}")
        return None


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º PexelsImageService –¥–ª—è backward compatibility
class PexelsImageService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Pexels API (–¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)"""
    
    def __init__(self):
        self.access_key = "6r96KapNJVJkZ9Y22Bfa6dSiYYqPuvd0bbYQIhzTpmjyNhRtOGGcB6nj"
        self.base_url = "https://api.pexels.com/v1"
        self.enabled = True
        self.rate_limit_delay = 1  
        self.last_request_time = 0
        self.fallback_images = {
            'hero': [
                'https://images.pexels.com/photos/3184360/pexels-photo-3184360.jpeg?auto=compress&cs=tinysrgb&w=800&h=600&fit=crop',
                'https://images.pexels.com/photos/3184465/pexels-photo-3184465.jpeg?auto=compress&cs=tinysrgb&w=800&h=600&fit=crop',
            ],
            'features': [
                'https://images.pexels.com/photos/3184292/pexels-photo-3184292.jpeg?auto=compress&cs=tinysrgb&w=400&h=300&fit=crop',
                'https://images.pexels.com/photos/3184398/pexels-photo-3184398.jpeg?auto=compress&cs=tinysrgb&w=400&h=300&fit=crop',
            ],
        }
    
    def search_images(self, query: str, component_type: str = 'general', count: int = 1) -> List[str]:
        """Fallback –º–µ—Ç–æ–¥ –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""
        logger.info(f"[PEXELS] –ó–∞–ø—Ä–æ—Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {query}")
        return self.fallback_images.get('hero', [])[:count]
    
    def get_images_for_component(self, component_type: str, industry: str, count: int = 1, style: str = 'modern') -> List[str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤"""
        return self.search_images(f"{industry} {component_type}", component_type, count)


# –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
pexels_service = PexelsImageService() 