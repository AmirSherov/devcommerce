import time
import logging
import json
from typing import Dict, Any, List, Tuple
from .models import AIGenerationRequest
from .services import AIGenerationService
from .image_service import pexels_service

logger = logging.getLogger(__name__)


class PremiumSmartAIGenerator:
    """
    üöÄ –†–ï–í–û–õ–Æ–¶–ò–û–ù–ù–´–ô AI –ì–ï–ù–ï–†–ê–¢–û–† –°–ê–ô–¢–û–í –ú–ò–†–û–í–û–ì–û –£–†–û–í–ù–Ø!
    
    7-—à–∞–≥–æ–≤—ã–π –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Å–∞–π—Ç–æ–≤:
    1. –ë–∏–∑–Ω–µ—Å-–∞–Ω–∞–ª–∏–∑ –∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è
    2. –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –∏ UX –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ  
    3. –î–∏–∑–∞–π–Ω-–∫–æ–Ω—Ü–µ–ø—Ü–∏—è –∏ —Å—Ç–∏–ª—å
    4. –ö–æ–Ω—Ç–µ–Ω—Ç-—Å—Ç—Ä–∞—Ç–µ–≥–∏—è –∏ –∫–æ–ø–∏—Ä–∞–π—Ç–∏–Ω–≥
    5. –ú–µ–¥–∏–∞ –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    6. –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∏ –∞–Ω–∏–º–∞—Ü–∏–∏
    7. –§–∏–Ω–∞–ª—å–Ω–∞—è —Å–±–æ—Ä–∫–∞ –∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è
    """
    
    def __init__(self):
        self.ai_service = AIGenerationService()
        self.image_service = pexels_service
        logger.info("üî• [PREMIUM AI] –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –†–ï–í–û–õ–Æ–¶–ò–û–ù–ù–û–ì–û –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ –º–∏—Ä–æ–≤–æ–≥–æ —É—Ä–æ–≤–Ω—è!")
        
        # –ú–∞—Å—Ç–µ—Ä-–ø—Ä–æ–º–ø—Ç—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —ç—Ç–∞–ø–∞
        self.step_prompts = {
            1: self._get_business_analysis_prompt,
            2: self._get_architecture_prompt,
            3: self._get_design_concept_prompt,
            4: self._get_content_strategy_prompt,
            5: self._get_media_integration_prompt,
            6: self._get_interactivity_prompt,
            7: self._get_final_assembly_prompt
        }

    def generate_website_premium(self, request_data: Dict[str, Any]) -> Dict[str, Any]:
        """
        üéØ –ü–†–ï–ú–ò–£–ú –ì–ï–ù–ï–†–ê–¶–ò–Ø –°–ê–ô–¢–ê - 7 –®–ê–ì–û–í –ö –°–û–í–ï–†–®–ï–ù–°–¢–í–£!
        
        Args:
            request_data: –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            
        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–µ–º–∏—É–º –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        """
        logger.info(f"üöÄ [PREMIUM] –ó–∞–ø—É—Å–∫ –†–ï–í–û–õ–Æ–¶–ò–û–ù–ù–û–ô –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–ª—è: {request_data.get('user', 'Unknown')}")
        
        try:
            # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–æ–µ–∫—Ç–∞
            project_context = self._analyze_project_context(request_data)
            logger.info(f"üìä [STEP 0] –ö–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–æ–µ–∫—Ç–∞ —Å–æ–∑–¥–∞–Ω: {project_context['industry']} / {project_context['style']}")
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º 7 —à–∞–≥–æ–≤ –ø—Ä–µ–º–∏—É–º –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
            generation_steps = {}
            for step in range(1, 8):
                logger.info(f"‚ö° [STEP {step}/7] –ù–∞—á–∏–Ω–∞–µ–º: {self._get_step_name(step)}")
                
                step_result = self._execute_generation_step(
                    step=step,
                    project_context=project_context,
                    previous_steps=generation_steps,
                    request_data=request_data
                )
                
                generation_steps[step] = step_result
                logger.info(f"‚úÖ [STEP {step}/7] –ó–∞–≤–µ—Ä—à—ë–Ω: {self._get_step_name(step)}")
                
                # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É —à–∞–≥–∞–º–∏ –¥–ª—è –∫–∞—á–µ—Å—Ç–≤–∞
                time.sleep(0.5)
            
            # –§–∏–Ω–∞–ª—å–Ω–∞—è —Å–±–æ—Ä–∫–∞ –≤—Å–µ—Ö —ç—Ç–∞–ø–æ–≤ –≤ –≥–æ—Ç–æ–≤—ã–π —Å–∞–π—Ç
            final_result = self._assemble_final_website(
                project_context=project_context,
                generation_steps=generation_steps,
                request_data=request_data
            )
            
            logger.info("üéâ [PREMIUM] –®–ï–î–ï–í–† –°–û–ó–î–ê–ù! –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
            return final_result
            
        except Exception as e:
            logger.error(f"üí• [PREMIUM ERROR] –û—à–∏–±–∫–∞ –≤ –ø—Ä–µ–º–∏—É–º –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {str(e)}")
            # Fallback –Ω–∞ –æ–±—ã—á–Ω—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é
            return self._fallback_generation(request_data)

    def _analyze_project_context(self, request_data: Dict[str, Any]) -> Dict[str, Any]:
        """üîç –ê–Ω–∞–ª–∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –ø—Ä–æ–µ–∫—Ç–∞"""
        
        user_prompt = request_data.get('prompt', '')
        title = request_data.get('title', '')
        industry = request_data.get('industry', 'general')
        style = request_data.get('style', 'modern')
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –±–∏–∑–Ω–µ—Å–∞ –∏–∑ –ø—Ä–æ–º–ø—Ç–∞
        business_type = self._detect_business_type(user_prompt, title)
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        image_keywords = self._extract_image_keywords(user_prompt, business_type)
        
        return {
            'user_prompt': user_prompt,
            'title': title,
            'industry': industry,
            'style': style,
            'business_type': business_type,
            'image_keywords': image_keywords,
            'target_audience': self._detect_target_audience(user_prompt),
            'primary_goals': self._detect_primary_goals(user_prompt),
            'unique_selling_points': self._extract_usp(user_prompt)
        }

    def _execute_generation_step(self, step: int, project_context: Dict, previous_steps: Dict, request_data: Dict) -> Dict[str, Any]:
        """‚ö° –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —à–∞–≥–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏"""
        
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —à–∞–≥–∞
        prompt_generator = self.step_prompts[step]
        step_prompt = prompt_generator(project_context, previous_steps)
        
        # –õ–æ–≥–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ (–ø–µ—Ä–≤—ã–µ 200 —Å–∏–º–≤–æ–ª–æ–≤)
        logger.info(f"üéØ [STEP {step}] –ü—Ä–æ–º–ø—Ç: {step_prompt[:200]}...")
        
        try:
            # –í—ã–∑—ã–≤–∞–µ–º AI –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —à–∞–≥–∞
            ai_response = self.ai_service.call_deepseek_api(step_prompt)
            
            logger.info(f"üîç [STEP {step}] AI Response type: {type(ai_response)}")
            logger.info(f"üîç [STEP {step}] AI Response keys: {list(ai_response.keys()) if isinstance(ai_response, dict) else 'not a dict'}")
            
            if not ai_response:
                raise ValueError(f"–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç AI –Ω–∞ —à–∞–≥–µ {step}")
            
            # –ü–∞—Ä—Å–∏–º –æ—Ç–≤–µ—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —à–∞–≥–∞
            parsed_result = self._parse_step_response(step, ai_response, project_context)
            
            logger.info(f"üîç [STEP {step}] Parsed result type: {type(parsed_result)}")
            logger.info(f"üîç [STEP {step}] Parsed result keys: {list(parsed_result.keys()) if isinstance(parsed_result, dict) else 'not a dict'}")
            
            # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è —à–∞–≥–∞ 7 (—Ñ–∏–Ω–∞–ª—å–Ω—ã–π –∫–æ–¥)
            if step == 7:
                logger.info(f"üîç [STEP 7] Final code check:")
                logger.info(f"  - Has 'html': {'html' in parsed_result}")
                logger.info(f"  - Has 'css': {'css' in parsed_result}")
                logger.info(f"  - Has 'js': {'js' in parsed_result}")
                if 'html' in parsed_result:
                    logger.info(f"  - HTML length: {len(parsed_result.get('html', ''))}")
                if 'css' in parsed_result:
                    logger.info(f"  - CSS length: {len(parsed_result.get('css', ''))}")
            
            return {
                'success': True,
                'step': step,
                'step_name': self._get_step_name(step),
                'result': parsed_result,
                'execution_time': time.time()
            }
            
        except Exception as e:
            logger.error(f"‚ùå [STEP {step}] –û—à–∏–±–∫–∞: {str(e)}")
            return {
                'success': False,
                'step': step,
                'error': str(e)
            }

    def _get_business_analysis_prompt(self, context: Dict, previous: Dict) -> str:
        """üìä –ü—Ä–æ–º–ø—Ç –¥–ª—è –±–∏–∑–Ω–µ—Å-–∞–Ω–∞–ª–∏–∑–∞ (–®–∞–≥ 1)"""
        return f"""
–¢—ã - —Ç–æ–ø –±–∏–∑–Ω–µ—Å-–∞–Ω–∞–ª–∏—Ç–∏–∫ –∏ —Å—Ç—Ä–∞—Ç–µ–≥ digital –∞–≥–µ–Ω—Ç—Å—Ç–≤–∞. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ - –ø—Ä–æ–≤–µ—Å—Ç–∏ –≥–ª—É–±–æ–∫–∏–π –∞–Ω–∞–ª–∏–∑ –±–∏–∑–Ω–µ—Å–∞ –∫–ª–∏–µ–Ω—Ç–∞.

–ü–†–û–ï–ö–¢: {context['title']}
–û–ü–ò–°–ê–ù–ò–ï: {context['user_prompt']}
–ò–ù–î–£–°–¢–†–ò–Ø: {context['industry']}

–ü—Ä–æ–≤–µ–¥–∏ –ü–†–û–§–ï–°–°–ò–û–ù–ê–õ–¨–ù–´–ô –∞–Ω–∞–ª–∏–∑ –∏ –≤–µ—Ä–Ω–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ:

{{
  "business_analysis": {{
    "industry_insights": "–≥–ª—É–±–æ–∫–∏–π –∞–Ω–∞–ª–∏–∑ –∏–Ω–¥—É—Å—Ç—Ä–∏–∏ –∏ —Ç—Ä–µ–Ω–¥–æ–≤",
    "target_audience": "–¥–µ—Ç–∞–ª—å–Ω—ã–π –ø–æ—Ä—Ç—Ä–µ—Ç —Ü–µ–ª–µ–≤–æ–π –∞—É–¥–∏—Ç–æ—Ä–∏–∏",
    "competitive_advantages": "—É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –±–∏–∑–Ω–µ—Å–∞",
    "key_challenges": "–æ—Å–Ω–æ–≤–Ω—ã–µ –≤—ã–∑–æ–≤—ã –∏–Ω–¥—É—Å—Ç—Ä–∏–∏",
    "market_positioning": "–ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ —Ä—ã–Ω–∫–µ",
    "conversion_goals": ["–æ—Å–Ω–æ–≤–Ω–∞—è —Ü–µ–ª—å 1", "—Ü–µ–ª—å 2", "—Ü–µ–ª—å 3"],
    "success_metrics": "–º–µ—Ç—Ä–∏–∫–∏ —É—Å–ø–µ—Ö–∞ –ø—Ä–æ–µ–∫—Ç–∞"
  }}
}}

–¢–†–ï–ë–û–í–ê–ù–ò–Ø:
- –ê–Ω–∞–ª–∏–∑ —É—Ä–æ–≤–Ω—è McKinsey & Company
- –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –∏–Ω—Å–∞–π—Ç—ã, –Ω–µ –æ–±—â–∏–µ —Ñ—Ä–∞–∑—ã
- –§–æ–∫—É—Å –Ω–∞ —Ü–∏—Ñ—Ä–æ–≤–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
- –£—á–µ—Ç —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ç—Ä–µ–Ω–¥–æ–≤ 2024
"""

    def _get_architecture_prompt(self, context: Dict, previous: Dict) -> str:
        """üèóÔ∏è –ü—Ä–æ–º–ø—Ç –¥–ª—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã (–®–∞–≥ 2)"""
        business_data = previous.get(1, {}).get('result', {})
        
        return f"""
–¢—ã - Lead UX Architect –≤ —Ç–æ–ø-–∞–≥–µ–Ω—Ç—Å—Ç–≤–µ. –°–æ–∑–¥–∞–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—É—é –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É —Å–∞–π—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –±–∏–∑–Ω–µ—Å-–∞–Ω–∞–ª–∏–∑–∞.

–ë–ò–ó–ù–ï–°-–ê–ù–ê–õ–ò–ó: {json.dumps(business_data, ensure_ascii=False)}
–ü–†–û–ï–ö–¢: {context['title']} - {context['user_prompt']}

–°–æ–∑–¥–∞–π –ê–†–•–ò–¢–ï–ö–¢–£–†–£ –ú–ò–†–û–í–û–ì–û –£–†–û–í–ù–Ø –≤ JSON:

{{
  "site_architecture": {{
    "page_structure": {{
      "header": ["—ç–ª–µ–º–µ–Ω—Ç 1", "—ç–ª–µ–º–µ–Ω—Ç 2"],
      "main_sections": [
        {{"name": "Hero", "purpose": "—Ü–µ–ª—å —Å–µ–∫—Ü–∏–∏", "priority": 1}},
        {{"name": "About", "purpose": "—Ü–µ–ª—å", "priority": 2}}
      ],
      "footer": ["—ç–ª–µ–º–µ–Ω—Ç 1", "—ç–ª–µ–º–µ–Ω—Ç 2"]
    }},
    "user_journey": {{
      "primary_path": "–ø–æ—à–∞–≥–æ–≤—ã–π –ø—É—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
      "secondary_paths": ["–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø—É—Ç—å 1", "–ø—É—Ç—å 2"],
      "conversion_points": ["—Ç–æ—á–∫–∞ –∫–æ–Ω–≤–µ—Ä—Å–∏–∏ 1", "—Ç–æ—á–∫–∞ 2"]
    }},
    "navigation_strategy": "—Å—Ç—Ä–∞—Ç–µ–≥–∏—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏",
    "content_hierarchy": "–∏–µ—Ä–∞—Ä—Ö–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞"
  }}
}}

–ü–†–ò–ù–¶–ò–ü–´:
- –§–æ–∫—É—Å –Ω–∞ –∫–æ–Ω–≤–µ—Ä—Å–∏—é
- –ò–Ω—Ç—É–∏—Ç–∏–≤–Ω–∞—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è
- –ú–æ–±–∏–ª—å–Ω–æ—Å—Ç—å –≤ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–µ
- –ú–∏–Ω–∏–º—É–º –∫–ª–∏–∫–æ–≤ –¥–æ —Ü–µ–ª–∏
"""

    def _get_design_concept_prompt(self, context: Dict, previous: Dict) -> str:
        """üé® –ü—Ä–æ–º–ø—Ç –¥–ª—è –¥–∏–∑–∞–π–Ω-–∫–æ–Ω—Ü–µ–ø—Ü–∏–∏ (–®–∞–≥ 3)"""
        business_data = previous.get(1, {}).get('result', {})
        architecture_data = previous.get(2, {}).get('result', {})
        
        return f"""
–¢—ã - Creative Director —É—Ä–æ–≤–Ω—è Pentagram. –°–æ–∑–¥–∞–π —É–Ω–∏–∫–∞–ª—å–Ω—É—é –¥–∏–∑–∞–π–Ω-–∫–æ–Ω—Ü–µ–ø—Ü–∏—é –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞.

–ö–û–ù–¢–ï–ö–°–¢:
- –ë–∏–∑–Ω–µ—Å: {json.dumps(business_data, ensure_ascii=False)[:500]}
- –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞: {json.dumps(architecture_data, ensure_ascii=False)[:500]}
- –°—Ç–∏–ª—å: {context['style']}
- –ò–Ω–¥—É—Å—Ç—Ä–∏—è: {context['industry']}

–°–æ–∑–¥–∞–π –î–ò–ó–ê–ô–ù-–ö–û–ù–¶–ï–ü–¶–ò–Æ AWWWARDS –£–†–û–í–ù–Ø –≤ JSON:

{{
  "design_concept": {{
    "visual_identity": {{
      "mood": "–Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –¥–∏–∑–∞–π–Ω–∞ (3-4 —Å–ª–æ–≤–∞)",
      "personality": "—Ö–∞—Ä–∞–∫—Ç–µ—Ä –±—Ä–µ–Ω–¥–∞",
      "visual_metaphor": "–≤–∏–∑—É–∞–ª—å–Ω–∞—è –º–µ—Ç–∞—Ñ–æ—Ä–∞"
    }},
    "color_palette": {{
      "primary": "#hex",
      "secondary": "#hex", 
      "accent": "#hex",
      "background": "#hex",
      "text": "#hex"
    }},
    "typography": {{
      "headings": "–Ω–∞–∑–≤–∞–Ω–∏–µ —à—Ä–∏—Ñ—Ç–∞ –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤",
      "body": "—à—Ä–∏—Ñ—Ç –¥–ª—è —Ç–µ–∫—Å—Ç–∞",
      "accent": "–∞–∫—Ü–µ–Ω—Ç–Ω—ã–π —à—Ä–∏—Ñ—Ç"
    }},
    "layout_principles": {{
      "grid_system": "–æ–ø–∏—Å–∞–Ω–∏–µ —Å–µ—Ç–∫–∏",
      "spacing_rhythm": "—Ä–∏—Ç–º –æ—Ç—Å—Ç—É–ø–æ–≤",
      "visual_hierarchy": "–ø—Ä–∏–Ω—Ü–∏–ø—ã –∏–µ—Ä–∞—Ä—Ö–∏–∏"
    }},
    "unique_features": ["—É–Ω–∏–∫–∞–ª—å–Ω–∞—è —Ñ–∏—á–∞ 1", "—Ñ–∏—á–∞ 2", "—Ñ–∏—á–∞ 3"]
  }}
}}

–¢–†–ï–ë–û–í–ê–ù–ò–Ø:
- –ù–ï –∏—Å–ø–æ–ª—å–∑—É–π –∫–ª–∏—à–µ –∏ —à–∞–±–ª–æ–Ω—ã
- –°–æ–∑–¥–∞–π –£–ù–ò–ö–ê–õ–¨–ù–£–Æ –∫–æ–Ω—Ü–µ–ø—Ü–∏—é
- –£—á—Ç–∏ –ø—Å–∏—Ö–æ–ª–æ–≥–∏—é —Ü–≤–µ—Ç–∞
- –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ç—Ä–µ–Ω–¥—ã 2024
"""

    def _get_content_strategy_prompt(self, context: Dict, previous: Dict) -> str:
        """‚úçÔ∏è –ü—Ä–æ–º–ø—Ç –¥–ª—è –∫–æ–Ω—Ç–µ–Ω—Ç-—Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ (–®–∞–≥ 4)"""
        design_data = previous.get(3, {}).get('result', {})
        
        return f"""
–¢—ã - —Ç–æ–ø –∫–æ–ø–∏—Ä–∞–π—Ç–µ—Ä –∞–≥–µ–Ω—Ç—Å—Ç–≤–∞ David Ogilvy. –°–æ–∑–¥–∞–π —É–±–µ–¥–∏—Ç–µ–ª—å–Ω—É—é –∫–æ–Ω—Ç–µ–Ω—Ç-—Å—Ç—Ä–∞—Ç–µ–≥–∏—é.

–î–ò–ó–ê–ô–ù-–ö–û–ù–¶–ï–ü–¶–ò–Ø: {json.dumps(design_data, ensure_ascii=False)[:500]}
–ü–†–û–ï–ö–¢: {context['title']} - {context['user_prompt']}
–ê–£–î–ò–¢–û–†–ò–Ø: {context.get('target_audience', '—à–∏—Ä–æ–∫–∞—è')}

–°–æ–∑–¥–∞–π –ö–û–ù–¢–ï–ù–¢ –ú–ò–†–û–í–û–ì–û –£–†–û–í–ù–Ø –≤ JSON:

{{
  "content_strategy": {{
    "brand_voice": {{
      "tone": "—Ç–æ–Ω –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏",
      "personality": "—Ö–∞—Ä–∞–∫—Ç–µ—Ä –±—Ä–µ–Ω–¥–∞",
      "key_messages": ["–∫–ª—é—á–µ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ 1", "—Å–æ–æ–±—â–µ–Ω–∏–µ 2", "—Å–æ–æ–±—â–µ–Ω–∏–µ 3"]
    }},
    "hero_section": {{
      "headline": "—É–±–µ–¥–∏—Ç–µ–ª—å–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫",
      "subheadline": "–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∏–π –ø–æ–¥–∑–∞–≥–æ–ª–æ–≤–æ–∫", 
      "cta_text": "–ø—Ä–∏–∑—ã–≤ –∫ –¥–µ–π—Å—Ç–≤–∏—é",
      "value_proposition": "—É–Ω–∏–∫–∞–ª—å–Ω–æ–µ —Ü–µ–Ω–Ω–æ—Å—Ç–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ"
    }},
    "content_sections": [
      {{
        "section_name": "–Ω–∞–∑–≤–∞–Ω–∏–µ —Å–µ–∫—Ü–∏–∏",
        "headline": "–∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å–µ–∫—Ü–∏–∏",
        "content": "–æ—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç",
        "cta": "–ø—Ä–∏–∑—ã–≤ –∫ –¥–µ–π—Å—Ç–≤–∏—é"
      }}
    ],
    "seo_keywords": ["–∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ 1", "—Å–ª–æ–≤–æ 2", "—Å–ª–æ–≤–æ 3"],
    "micro_copy": {{
      "buttons": ["—Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ 1", "–∫–Ω–æ–ø–∫–∏ 2"],
      "form_labels": ["label 1", "label 2"],
      "error_messages": ["—Å–æ–æ–±—â–µ–Ω–∏–µ 1", "—Å–æ–æ–±—â–µ–Ω–∏–µ 2"]
    }}
  }}
}}

–ü–†–ò–ù–¶–ò–ü–´:
- –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ –≤–æ–∑–¥–µ–π—Å—Ç–≤–∏–µ
- –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –≤—ã–≥–æ–¥—ã –∫–ª–∏–µ–Ω—Ç–∞  
- –°–æ—Ü–∏–∞–ª—å–Ω–æ–µ –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–æ
- –°—Ä–æ—á–Ω–æ—Å—Ç—å –∏ —Ä–µ–¥–∫–æ—Å—Ç—å
"""

    def _get_media_integration_prompt(self, context: Dict, previous: Dict) -> str:
        """üñºÔ∏è –ü—Ä–æ–º–ø—Ç –¥–ª—è –º–µ–¥–∏–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ (–®–∞–≥ 5)"""
        return f"""
–¢—ã - Art Director —Ç–æ–ø-–∞–≥–µ–Ω—Ç—Å—Ç–≤–∞. –û–ø—Ä–µ–¥–µ–ª–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏ –º–µ–¥–∏–∞.

–ö–û–ù–¢–ï–ö–°–¢: {context['title']} - {context['business_type']}
–°–¢–ò–õ–¨: {context['style']}
–ö–õ–Æ–ß–ï–í–´–ï –°–õ–û–í–ê: {context['image_keywords']}

–°–æ–∑–¥–∞–π –ú–ï–î–ò–ê-–°–¢–†–ê–¢–ï–ì–ò–Æ –≤ JSON:

{{
  "media_strategy": {{
    "hero_image": {{
      "type": "—Ç–∏–ø –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è",
      "mood": "–Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ",
      "search_query": "–ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è Pexels",
      "style_notes": "—Å—Ç–∏–ª–µ–≤—ã–µ –∑–∞–º–µ—Ç–∫–∏"
    }},
    "section_images": [
      {{
        "section": "–Ω–∞–∑–≤–∞–Ω–∏–µ —Å–µ–∫—Ü–∏–∏",
        "image_type": "—Ç–∏–ø –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è",
        "search_query": "–∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–∏—Å–∫–∞",
        "placement": "—Ä–∞–∑–º–µ—â–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"
      }}
    ],
    "image_treatment": {{
      "filters": "—Ñ–∏–ª—å—Ç—Ä—ã –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞",
      "overlay": "–Ω–∞–ª–æ–∂–µ–Ω–∏—è –∏ —ç—Ñ—Ñ–µ–∫—Ç—ã",
      "aspect_ratios": "–ø—Ä–æ–ø–æ—Ä—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"
    }},
    "visual_hierarchy": "–∏–µ—Ä–∞—Ä—Ö–∏—è –≤–∏–∑—É–∞–ª—å–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤"
  }}
}}

–¢–†–ï–ë–û–í–ê–ù–ò–Ø:
- –í—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
- –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –±—Ä–µ–Ω–¥—É
- –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ –≤–æ–∑–¥–µ–π—Å—Ç–≤–∏–µ
- –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∫–æ–Ω–≤–µ—Ä—Å–∏–∏
"""

    def _get_interactivity_prompt(self, context: Dict, previous: Dict) -> str:
        """‚ö° –ü—Ä–æ–º–ø—Ç –¥–ª—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ (–®–∞–≥ 6)"""
        return f"""
–¢—ã - Lead Frontend Developer —Ç–æ–ø-–∞–≥–µ–Ω—Ç—Å—Ç–≤–∞. –î–æ–±–∞–≤—å —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—É—é –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å.

–ü–†–û–ï–ö–¢: {context['title']} - {context['style']}

–°–æ–∑–¥–∞–π –ò–ù–¢–ï–†–ê–ö–¢–ò–í–ù–û–°–¢–¨ –ü–†–ï–ú–ò–£–ú –£–†–û–í–ù–Ø –≤ JSON:

{{
  "interactivity": {{
    "animations": {{
      "entrance_effects": ["—ç—Ñ—Ñ–µ–∫—Ç –≤—Ö–æ–¥–∞ 1", "—ç—Ñ—Ñ–µ–∫—Ç 2"],
      "scroll_triggers": ["—Ç—Ä–∏–≥–≥–µ—Ä 1", "—Ç—Ä–∏–≥–≥–µ—Ä 2"],
      "hover_effects": ["hover —ç—Ñ—Ñ–µ–∫—Ç 1", "—ç—Ñ—Ñ–µ–∫—Ç 2"],
      "loading_animations": "–∞–Ω–∏–º–∞—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏"
    }},
    "micro_interactions": [
      {{
        "element": "—ç–ª–µ–º–µ–Ω—Ç",
        "trigger": "—Ç—Ä–∏–≥–≥–µ—Ä",
        "effect": "—ç—Ñ—Ñ–µ–∫—Ç",
        "duration": "–¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å"
      }}
    ],
    "form_enhancements": {{
      "validation": "–≤–∞–ª–∏–¥–∞—Ü–∏—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏",
      "feedback": "–æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é",
      "success_states": "—Å–æ—Å—Ç–æ—è–Ω–∏—è —É—Å–ø–µ—Ö–∞"
    }},
    "navigation_effects": "—ç—Ñ—Ñ–µ–∫—Ç—ã –Ω–∞–≤–∏–≥–∞—Ü–∏–∏",
    "scroll_behavior": "–ø–æ–≤–µ–¥–µ–Ω–∏–µ –ø—Ä–∏ —Å–∫—Ä–æ–ª–ª–µ"
  }}
}}

–ü–†–ò–ù–¶–ò–ü–´:
- –ü–ª–∞–≤–Ω–æ—Å—Ç—å –∏ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å
- –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
- –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
- –î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å
"""

    def _get_final_assembly_prompt(self, context: Dict, previous: Dict) -> str:
        """üéØ –ü—Ä–æ–º–ø—Ç –¥–ª—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–π —Å–±–æ—Ä–∫–∏ (–®–∞–≥ 7)"""
        all_data = {
            'business': previous.get(1, {}).get('result', {}),
            'architecture': previous.get(2, {}).get('result', {}),
            'design': previous.get(3, {}).get('result', {}),
            'content': previous.get(4, {}).get('result', {}),
            'media': previous.get(5, {}).get('result', {}),
            'interactivity': previous.get(6, {}).get('result', {})
        }
        
        return f"""
–¢—ã - Senior Full-Stack Developer –∞–≥–µ–Ω—Ç—Å—Ç–≤–∞ —É—Ä–æ–≤–Ω—è IDEO. –°–æ–±–µ—Ä–∏ –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –≤ –≥–æ—Ç–æ–≤—ã–π —Å–∞–π—Ç.

–í–°–ï –≠–¢–ê–ü–´ –ü–†–û–ï–ö–¢–ê:
{json.dumps(all_data, ensure_ascii=False, indent=2)[:3000]}

–ù–ê–ó–í–ê–ù–ò–ï: {context['title']}
–°–¢–ò–õ–¨: {context['style']}

–°–æ–∑–¥–∞–π –ì–û–¢–û–í–´–ô –°–ê–ô–¢ –ú–ò–†–û–í–û–ì–û –£–†–û–í–ù–Ø —Å HTML, CSS –∏ JavaScript:

–¢–†–ï–ë–û–í–ê–ù–ò–Ø –ö –ö–û–î–£:
- –°–µ–º–∞–Ω—Ç–∏—á–Ω–∞—è HTML —Ä–∞–∑–º–µ—Ç–∫–∞
- –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π CSS (Grid, Flexbox, Custom Properties)
- –ü–ª–∞–≤–Ω—ã–µ –∞–Ω–∏–º–∞—Ü–∏–∏ –∏ –ø–µ—Ä–µ—Ö–æ–¥—ã
- –ü–æ–ª–Ω–∞—è –∞–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç—å (mobile-first)
- –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
- –ß–∏—Å—Ç—ã–π, —á–∏—Ç–∞–µ–º—ã–π –∫–æ–¥

–í–ê–ñ–ù–û –î–õ–Ø –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ô:
- –ò—Å–ø–æ–ª—å–∑—É–π img —Ç–µ–≥–∏ —Ç–∞–º, –≥–¥–µ –Ω—É–∂–Ω—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
- –í src="" –ø–∏—à–∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä –≤ —Ñ–æ—Ä–º–∞—Ç–µ: "imageplace-KEYWORDS"
- –ì–¥–µ KEYWORDS - —ç—Ç–æ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é
- –ü—Ä–∏–º–µ—Ä—ã –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ "{context['business_type']}":
  * <img src="imageplace-{context['business_type']},professional,modern" alt="–ì–ª–∞–≤–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ">
  * <img src="imageplace-{context['business_type']},service,quality" alt="–£—Å–ª—É–≥–∏">
  * <img src="imageplace-team,people,professional" alt="–ö–æ–º–∞–Ω–¥–∞">
  * <img src="imageplace-{context['business_type']},work,process" alt="–ü—Ä–æ—Ü–µ—Å—Å —Ä–∞–±–æ—Ç—ã">
- –ù–ï –∏—Å–ø–æ–ª—å–∑—É–π background-image –≤ CSS –¥–ª—è –æ—Å–Ω–æ–≤–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç–∞
- –ü–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä—ã –±—É–¥—É—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–º–µ–Ω–µ–Ω—ã –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è

–í–ï–†–ù–ò –°–¢–†–û–ì–û –í –§–û–†–ú–ê–¢–ï JSON:
{{
  "html": "–ø–æ–ª–Ω—ã–π HTML –∫–æ–¥",
  "css": "–ø–æ–ª–Ω—ã–π CSS –∫–æ–¥", 
  "js": "–ø–æ–ª–Ω—ã–π JavaScript –∫–æ–¥"
}}

–°–û–ó–î–ê–ô –®–ï–î–ï–í–† –£–†–û–í–ù–Ø AWWWARDS! –ù–ï –ò–°–ü–û–õ–¨–ó–£–ô –®–ê–ë–õ–û–ù–´!
"""

    def _assemble_final_website(self, project_context: Dict, generation_steps: Dict, request_data: Dict) -> Dict[str, Any]:
        """üéØ –§–∏–Ω–∞–ª—å–Ω–∞—è —Å–±–æ—Ä–∫–∞ —Å–∞–π—Ç–∞ —Å–æ –≤—Å–µ–º–∏ —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏"""
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –∫–æ–¥ –æ—Ç 7-–≥–æ —à–∞–≥–∞
            final_step = generation_steps.get(7, {})
            logger.info(f"üîç [ASSEMBLY] Final step data: {final_step}")
            
            if not final_step.get('success'):
                logger.warning("‚ö†Ô∏è [ASSEMBLY] 7-–π —à–∞–≥ –Ω–µ —É—Å–ø–µ—à–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback")
                raise ValueError("–û—à–∏–±–∫–∞ –Ω–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–º —à–∞–≥–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏")
            
            # –ü–∞—Ä—Å–∏–º –∫–æ–¥ –∏–∑ AI –æ—Ç–≤–µ—Ç–∞
            code_data = final_step.get('result', {})
            logger.info(f"üîç [ASSEMBLY] Code data keys: {code_data.keys() if code_data else 'EMPTY'}")
            
            if code_data.get('error'):
                logger.warning("‚ö†Ô∏è [ASSEMBLY] –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –æ—à–∏–±–∫—É, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback")
                raise ValueError("AI –æ—Ç–≤–µ—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –æ—à–∏–±–∫—É")
            
            if code_data:
                logger.info(f"üîç [ASSEMBLY] HTML length: {len(code_data.get('html', ''))}")
                logger.info(f"üîç [ASSEMBLY] CSS length: {len(code_data.get('css', ''))}")
                logger.info(f"üîç [ASSEMBLY] JS length: {len(code_data.get('js', ''))}")
            
            if not code_data:
                logger.warning("‚ö†Ô∏è [ASSEMBLY] –ü—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback")
                raise ValueError("–ü—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —à–∞–≥–∞")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–æ–¥–∞
            if not code_data.get('html') and not code_data.get('css'):
                logger.warning("‚ö†Ô∏è [ASSEMBLY] –ü—É—Å—Ç–æ–π HTML –∏ CSS, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback")
                logger.error(f"‚ùå [ASSEMBLY] Raw result: {str(final_step.get('result'))[:500]}")
                raise ValueError("AI –Ω–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–ª HTML/CSS –∫–æ–¥")
            
            # –ò–Ω—Ç–µ–≥—Ä–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –∫–æ–¥
            enhanced_code = self._integrate_images_into_code(code_data, generation_steps, project_context)
            
            logger.info(f"üîç [ASSEMBLY] Enhanced HTML length: {len(enhanced_code.get('html', ''))}")
            logger.info(f"üîç [ASSEMBLY] Enhanced CSS length: {len(enhanced_code.get('css', ''))}")
            
            # –°–æ–∑–¥–∞–µ–º –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –∫–æ–¥–æ–º
            portfolio = self.ai_service.create_portfolio_from_ai(enhanced_code, request_data)
            
            return {
                'success': True,
                'portfolio': portfolio,
                'generation_steps': len(generation_steps),
                'project_context': project_context,
                'enhanced_features': self._get_enhancement_summary(generation_steps)
            }
            
        except Exception as e:
            logger.error(f"üí• [ASSEMBLY ERROR] –û—à–∏–±–∫–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–π —Å–±–æ—Ä–∫–∏: {str(e)}")
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º fallback –≥–µ–Ω–µ—Ä–∞—Ü–∏—é
            try:
                logger.info("üîÑ [ASSEMBLY FALLBACK] –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –æ–±—ã—á–Ω—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é")
                fallback_result = self.ai_service.generate_portfolio(request_data)
                
                if fallback_result.get('success'):
                    return {
                        'success': True,
                        'portfolio': fallback_result['portfolio'],
                        'generation_steps': 1,  # –û–±—ã—á–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è = 1 —à–∞–≥
                        'project_context': project_context,
                        'enhanced_features': ['‚úÖ Fallback –≥–µ–Ω–µ—Ä–∞—Ü–∏—è', 'üñºÔ∏è –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è'],
                        'fallback_used': True
                    }
                else:
                    raise Exception(f"Fallback –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–æ–∂–µ –Ω–µ —É–¥–∞–ª–∞—Å—å: {fallback_result.get('error')}")
                    
            except Exception as fallback_error:
                logger.error(f"üí• [FALLBACK ERROR] {str(fallback_error)}")
                raise Exception(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}. Fallback: {str(fallback_error)}")

    def _integrate_images_into_code(self, code_data: Dict, generation_steps: Dict, context: Dict) -> Dict[str, str]:
        """üñºÔ∏è –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ –∫–æ–¥"""
        
        try:
            # –¢–µ–ø–µ—Ä—å –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —á–µ—Ä–µ–∑ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä—ã –≤ AIGenerationService
            # –ó–¥–µ—Å—å –º—ã –ø—Ä–æ—Å—Ç–æ –¥–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ background –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ CSS
            
            html_code = code_data.get('html', '')
            css_code = code_data.get('css', '')
            
            # –ü–æ–ª—É—á–∞–µ–º –º–µ–¥–∏–∞-—Å—Ç—Ä–∞—Ç–µ–≥–∏—é –∏–∑ 5-–≥–æ —à–∞–≥–∞ –¥–ª—è background –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
            media_step = generation_steps.get(5, {}).get('result', {})
            media_strategy = media_step.get('media_strategy', {})
            
            # –î–æ–±–∞–≤–ª—è–µ–º hero background –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            hero_image = self._get_hero_image(media_strategy, context)
            if hero_image:
                css_code = self._inject_hero_image_css(css_code, hero_image)
                logger.info(f"üñºÔ∏è [BACKGROUND] Hero background –¥–æ–±–∞–≤–ª–µ–Ω: {hero_image[:50]}...")
            
            # –î–æ–±–∞–≤–ª—è–µ–º section background –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            section_images = self._get_section_images(media_strategy, context)
            if section_images:
                css_code = self._inject_section_images_css(css_code, section_images)
                logger.info(f"üñºÔ∏è [BACKGROUND] –î–æ–±–∞–≤–ª–µ–Ω–æ {len(section_images)} background –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
            
            return {
                'html': html_code,
                'css': css_code,
                'js': code_data.get('js', '')
            }
            
        except Exception as e:
            logger.error(f"‚ùå [IMAGES] –û—à–∏–±–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {str(e)}")
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–¥ –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
            return code_data

    def _get_hero_image(self, media_strategy: Dict, context: Dict) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        try:
            hero_info = media_strategy.get('hero_image', {})
            search_query = hero_info.get('search_query', '') or f"{context['business_type']} professional modern"
            
            images = self.image_service.search_images(
                query=search_query,
                component_type='hero',
                count=1
            )
            
            return images[0] if images else None
            
        except Exception as e:
            logger.error(f"‚ùå Hero image error: {str(e)}")
            return None

    def _get_section_images(self, media_strategy: Dict, context: Dict) -> List[str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è —Å–µ–∫—Ü–∏–π"""
        try:
            section_images = []
            sections = media_strategy.get('section_images', [])
            
            for section_info in sections[:3]:  # –ú–∞–∫—Å–∏–º—É–º 3 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                search_query = section_info.get('search_query', '') or f"{context['business_type']} service"
                
                images = self.image_service.search_images(
                    query=search_query,
                    component_type='features',
                    count=1
                )
                
                if images:
                    section_images.extend(images)
            
            return section_images
            
        except Exception as e:
            logger.error(f"‚ùå Section images error: {str(e)}")
            return []

    def _inject_hero_image_css(self, css_code: str, image_url: str) -> str:
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ hero –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ CSS"""
        hero_css = f"""
/* AI Generated Hero Background */
.hero, .hero-section, section:first-of-type, .banner, .intro {{
    background-image: linear-gradient(rgba(0,0,0,0.4), rgba(0,0,0,0.4)), url('{image_url}');
    background-size: cover;
    background-position: center;
    background-attachment: fixed;
}}
"""
        return css_code + hero_css

    def _inject_section_images_css(self, css_code: str, images: List[str]) -> str:
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å–µ–∫—Ü–∏–π –≤ CSS"""
        section_css = ""
        
        for i, image_url in enumerate(images):
            section_css += f"""
/* AI Generated Section Image {i+1} */
.section-{i+1}, .feature-{i+1}, .service-{i+1} {{
    background-image: url('{image_url}');
    background-size: cover;
    background-position: center;
}}
"""
        
        return css_code + section_css

    # –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
    def _detect_business_type(self, prompt: str, title: str) -> str:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –±–∏–∑–Ω–µ—Å–∞ –∏–∑ –ø—Ä–æ–º–ø—Ç–∞"""
        text = (prompt + " " + title).lower()
        
        if any(word in text for word in ['—Ä–µ—Å—Ç–æ—Ä–∞–Ω', '–∫–∞—Ñ–µ', '–ø–∏—Ü—Ü–µ—Ä', '—Å—É—à–∏', '–±–∞—Ä', 'food']):
            return 'restaurant'
        elif any(word in text for word in ['it', 'tech', 'software', 'app', 'digital']):
            return 'technology'
        elif any(word in text for word in ['–≤—Ä–∞—á', '–º–µ–¥–∏—Ü–∏–Ω', '–∫–ª–∏–Ω–∏–∫–∞', 'health']):
            return 'healthcare'
        elif any(word in text for word in ['—Ñ–∏—Ç–Ω–µ—Å', '—Å–ø–æ—Ä—Ç', 'gym', 'fitness']):
            return 'fitness'
        else:
            return 'business'

    def _extract_image_keywords(self, prompt: str, business_type: str) -> List[str]:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""
        base_keywords = {
            'restaurant': ['food', 'dining', 'restaurant interior', 'chef cooking'],
            'technology': ['technology', 'modern office', 'computer', 'innovation'],
            'healthcare': ['medical', 'healthcare', 'doctor', 'clinic'],
            'fitness': ['fitness', 'gym', 'workout', 'health'],
            'business': ['business', 'office', 'professional', 'corporate']
        }
        
        return base_keywords.get(business_type, ['professional', 'modern', 'quality'])

    def _get_step_name(self, step: int) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è —à–∞–≥–∞"""
        step_names = {
            1: "–ë–∏–∑–Ω–µ—Å-–∞–Ω–∞–ª–∏–∑ –∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è",
            2: "–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –∏ UX –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ", 
            3: "–î–∏–∑–∞–π–Ω-–∫–æ–Ω—Ü–µ–ø—Ü–∏—è –∏ —Å—Ç–∏–ª—å",
            4: "–ö–æ–Ω—Ç–µ–Ω—Ç-—Å—Ç—Ä–∞—Ç–µ–≥–∏—è –∏ –∫–æ–ø–∏—Ä–∞–π—Ç–∏–Ω–≥",
            5: "–ú–µ–¥–∏–∞ –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è",
            6: "–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∏ –∞–Ω–∏–º–∞—Ü–∏–∏",
            7: "–§–∏–Ω–∞–ª—å–Ω–∞—è —Å–±–æ—Ä–∫–∞ –∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è"
        }
        return step_names.get(step, f"–®–∞–≥ {step}")

    def _parse_step_response(self, step: int, ai_response: Dict, context: Dict) -> Dict:
        """–ü–∞—Ä—Å–∏–Ω–≥ –æ—Ç–≤–µ—Ç–∞ AI –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —à–∞–≥–∞"""
        try:
            # –õ–æ–≥–∏—Ä—É–µ–º –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            logger.info(f"üîç [PARSE STEP {step}] Response type: {type(ai_response)}")
            
            # –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç —É–∂–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ Dict, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
            if isinstance(ai_response, dict):
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–∞ DeepSeek
                if 'choices' in ai_response and ai_response['choices']:
                    content = ai_response['choices'][0].get('message', {}).get('content', '')
                    logger.info(f"üîç [PARSE STEP {step}] Found content in choices, length: {len(content)}")
                    text = content
                else:
                    logger.info(f"üîç [PARSE STEP {step}] Using dict as is")
                    return ai_response
            else:
                text = str(ai_response)
                
            # –ò—â–µ–º –Ω–∞—á–∞–ª–æ –∏ –∫–æ–Ω–µ—Ü JSON
            start_idx = text.find('{')
            end_idx = text.rfind('}') + 1
            
            logger.info(f"üîç [PARSE STEP {step}] JSON boundaries: start={start_idx}, end={end_idx}")
            
            if start_idx == -1 or end_idx == 0:
                logger.error(f"‚ùå [PARSE STEP {step}] JSON not found. First 500 chars: {text[:500]}")
                raise ValueError(f"JSON –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ—Ç–≤–µ—Ç–µ AI –Ω–∞ —à–∞–≥–µ {step}")
                
            json_str = text[start_idx:end_idx]
            logger.info(f"üîç [PARSE STEP {step}] Extracted JSON length: {len(json_str)}")
            
            # –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON
            try:
                result = json.loads(json_str)
                logger.info(f"‚úÖ [PARSE STEP {step}] Successfully parsed JSON with keys: {list(result.keys()) if isinstance(result, dict) else 'not a dict'}")
                return result
            except json.JSONDecodeError as e:
                logger.error(f"‚ùå Parse error step {step}: {str(e)}")
                logger.error(f"‚ùå [PARSE STEP {step}] JSON string first 200 chars: {json_str[:200]}")
                logger.error(f"‚ùå [PARSE STEP {step}] JSON string last 200 chars: {json_str[-200:]}")
                
                # –ü—ã—Ç–∞–µ–º—Å—è –∏—Å–ø—Ä–∞–≤–∏—Ç—å JSON
                try:
                    # –£–±–∏—Ä–∞–µ–º —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
                    fixed_json = json_str.replace('\\"', '"')  # –£–±–∏—Ä–∞–µ–º —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–∞–≤—ã—á–∫–∏
                    fixed_json = fixed_json.replace('\\n', '\n')  # –£–±–∏—Ä–∞–µ–º —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫
                    fixed_json = fixed_json.replace('\\\\', '\\')  # –£–±–∏—Ä–∞–µ–º –¥–≤–æ–π–Ω—ã–µ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
                    
                    # –ü—Ä–æ–±—É–µ–º —Å–Ω–æ–≤–∞
                    result = json.loads(fixed_json)
                    logger.info(f"‚úÖ [PARSE STEP {step}] Fixed and parsed JSON successfully")
                    return result
                    
                except json.JSONDecodeError as e2:
                    logger.error(f"‚ùå [PARSE STEP {step}] Failed to fix JSON: {str(e2)}")
                    
                    # –ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞ - –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –¥–ª—è —à–∞–≥–∞ 7
                    if step == 7:
                        logger.warning(f"üîÑ [PARSE STEP 7] –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –æ–±—ã—á–Ω—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é")
                        return self._fallback_code_generation(context)
                    
                    # –î–ª—è –¥—Ä—É–≥–∏—Ö —à–∞–≥–æ–≤ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É
                    raise e
                
        except Exception as e:
            logger.error(f"‚ùå Parse error step {step}: –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞ AI: {str(e)}")
            
            # –î–ª—è —à–∞–≥–∞ 7 –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback
            if step == 7:
                logger.warning(f"üîÑ [PARSE STEP 7] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback –≥–µ–Ω–µ—Ä–∞—Ü–∏—é")
                return self._fallback_code_generation(context)
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–º –≤–∏–¥–µ
            return {
                "error": True,
                "step": step,
                "message": f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—Ç–≤–µ—Ç–∞: {str(e)}",
                "raw_response": str(ai_response)[:1000]  # –ü–µ—Ä–≤—ã–µ 1000 —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            }

    def _fallback_code_generation(self, context: Dict) -> Dict:
        """Fallback –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–¥–∞ —á–µ—Ä–µ–∑ –æ–±—ã—á–Ω—ã–π —Å–µ—Ä–≤–∏—Å"""
        try:
            logger.info("üîÑ [FALLBACK] –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∫–æ–¥–∞")
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±—ã—á–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
            request_data = {
                'prompt': context.get('user_prompt', '–°–æ–∑–¥–∞–π —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π —Å–∞–π—Ç'),
                'style': context.get('style', 'modern')
            }
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—ã–π –ø—Ä–æ–º–ø—Ç
            full_prompt = self.ai_service.build_ai_prompt(
                request_data['prompt'], 
                request_data['style']
            )
            
            # –í—ã–∑—ã–≤–∞–µ–º AI
            api_response = self.ai_service.call_deepseek_api(full_prompt)
            
            # –ü–∞—Ä—Å–∏–º –æ—Ç–≤–µ—Ç —á–µ—Ä–µ–∑ –æ–±—ã—á–Ω—ã–π —Å–µ—Ä–≤–∏—Å
            code_data = self.ai_service.parse_ai_response(api_response)
            
            return code_data
            
        except Exception as e:
            logger.error(f"‚ùå [FALLBACK] –û—à–∏–±–∫–∞ fallback –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {str(e)}")
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π HTML
            return {
                "html": "<!DOCTYPE html><html><head><title>–°–∞–π—Ç</title></head><body><h1>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!</h1></body></html>",
                "css": "body { font-family: Arial, sans-serif; margin: 0; padding: 20px; }",
                "js": "console.log('–°–∞–π—Ç –∑–∞–≥—Ä—É–∂–µ–Ω');"
            }

    def _fallback_generation(self, request_data: Dict) -> Dict[str, Any]:
        """–†–µ–∑–µ—Ä–≤–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–∏ –æ—à–∏–±–∫–µ –ø—Ä–µ–º–∏—É–º –ø—Ä–æ—Ü–µ—Å—Å–∞"""
        logger.info("üîÑ [FALLBACK] –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é")
        return self.ai_service.generate_portfolio(request_data)

    def _get_enhancement_summary(self, steps: Dict) -> List[str]:
        """–°–≤–æ–¥–∫–∞ —É–ª—É—á—à–µ–Ω–∏–π –ø—Ä–µ–º–∏—É–º –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏"""
        enhancements = []
        
        if steps.get(1, {}).get('success'):
            enhancements.append("‚úÖ –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –±–∏–∑–Ω–µ—Å-–∞–Ω–∞–ª–∏–∑")
        if steps.get(3, {}).get('success'):
            enhancements.append("üé® –£–Ω–∏–∫–∞–ª—å–Ω–∞—è –¥–∏–∑–∞–π–Ω-–∫–æ–Ω—Ü–µ–ø—Ü–∏—è")
        if steps.get(4, {}).get('success'):
            enhancements.append("‚úçÔ∏è –ü—Ä–æ–¥–∞—é—â–∏–π –∫–æ–ø–∏—Ä–∞–π—Ç–∏–Ω–≥")
        if steps.get(5, {}).get('success'):
            enhancements.append("üñºÔ∏è –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
        if steps.get(6, {}).get('success'):
            enhancements.append("‚ö° –°–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å")
            
        return enhancements

    def _detect_target_audience(self, prompt: str) -> str:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ü–µ–ª–µ–≤–æ–π –∞—É–¥–∏—Ç–æ—Ä–∏–∏ –∏–∑ –ø—Ä–æ–º–ø—Ç–∞"""
        text = prompt.lower()
        
        if any(word in text for word in ['b2b', '–±–∏–∑–Ω–µ—Å', '–∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω', '–∫–æ–º–ø–∞–Ω–∏']):
            return 'B2B –∫–ª–∏–µ–Ω—Ç—ã –∏ –ø–∞—Ä—Ç–Ω–µ—Ä—ã'
        elif any(word in text for word in ['–º–æ–ª–æ–¥', '—Å—Ç—É–¥–µ–Ω—Ç', '—à–∫–æ–ª—å–Ω–∏–∫']):
            return '–ú–æ–ª–æ–¥–µ–∂—å 18-25 –ª–µ—Ç'
        elif any(word in text for word in ['—Å–µ–º—å', '—Ä–æ–¥–∏—Ç–µ–ª', '–¥–µ—Ç–∏']):
            return '–°–µ–º—å–∏ —Å –¥–µ—Ç—å–º–∏'
        elif any(word in text for word in ['–ø—Ä–µ–º–∏—É–º', '—ç–ª–∏—Ç–Ω', 'vip', '–ª—é–∫—Å']):
            return '–ü—Ä–µ–º–∏—É–º —Å–µ–≥–º–µ–Ω—Ç'
        else:
            return '–®–∏—Ä–æ–∫–∞—è –∞—É–¥–∏—Ç–æ—Ä–∏—è'

    def _detect_primary_goals(self, prompt: str) -> List[str]:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ü–µ–ª–µ–π –∏–∑ –ø—Ä–æ–º–ø—Ç–∞"""
        text = prompt.lower()
        goals = []
        
        if any(word in text for word in ['–ø—Ä–æ–¥–∞–∂', '–∑–∞–∫–∞–∑', '–∫—É–ø–∏—Ç—å', '–ø–æ–∫—É–ø–∫']):
            goals.append('–£–≤–µ–ª–∏—á–µ–Ω–∏–µ –ø—Ä–æ–¥–∞–∂')
        if any(word in text for word in ['–∑–∞—è–≤–∫', '–æ–±—Ä–∞—â–µ–Ω–∏', '–∑–≤–æ–Ω–æ–∫', '–∫–æ–Ω—Ç–∞–∫—Ç']):
            goals.append('–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ª–∏–¥–æ–≤')
        if any(word in text for word in ['–±—Ä–µ–Ω', '—É–∑–Ω–∞–≤–∞–µ–º', '–∏–º–∏–¥–∂']):
            goals.append('–ü–æ–≤—ã—à–µ–Ω–∏–µ —É–∑–Ω–∞–≤–∞–µ–º–æ—Å—Ç–∏ –±—Ä–µ–Ω–¥–∞')
        if any(word in text for word in ['–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏', '—É—Å–ª—É–≥', '–æ –Ω–∞—Å']):
            goals.append('–ò–Ω—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ —É—Å–ª—É–≥–∞—Ö')
        if any(word in text for word in ['–¥–æ–≤–µ—Ä–∏–µ', '—Ä–µ–ø—É—Ç–∞—Ü–∏', '–æ—Ç–∑—ã–≤']):
            goals.append('–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –¥–æ–≤–µ—Ä–∏—è')
            
        return goals if goals else ['–ü—Ä–∏–≤–ª–µ—á–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–æ–≤']

    def _extract_usp(self, prompt: str) -> List[str]:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤"""
        text = prompt.lower()
        usp = []
        
        if any(word in text for word in ['–±—ã—Å—Ç—Ä', '—Å–∫–æ—Ä–æ—Å—Ç', '–æ–ø–µ—Ä–∞—Ç–∏–≤–Ω']):
            usp.append('–í—ã—Å–æ–∫–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è')
        if any(word in text for word in ['–∫–∞—á–µ—Å—Ç–≤', '–ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª', '—ç–∫—Å–ø–µ—Ä']):
            usp.append('–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ')
        if any(word in text for word in ['–∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω', '–ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω', '–ø–æ–¥ –∑–∞–∫–∞–∑']):
            usp.append('–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –ø–æ–¥—Ö–æ–¥')
        if any(word in text for word in ['–æ–ø—ã—Ç', '–ª–µ—Ç', '–≥–æ–¥–∞']):
            usp.append('–ú–Ω–æ–≥–æ–ª–µ—Ç–Ω–∏–π –æ–ø—ã—Ç')
        if any(word in text for word in ['–≥–∞—Ä–∞–Ω—Ç–∏', '–Ω–∞–¥–µ–∂–Ω']):
            usp.append('–ì–∞—Ä–∞–Ω—Ç–∏—è –∫–∞—á–µ—Å—Ç–≤–∞')
            
        return usp if usp else ['–í—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ —É—Å–ª—É–≥']

    # –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å–æ —Å—Ç–∞—Ä—ã–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º
    def generate_website(self, request_data: Dict[str, Any]) -> Dict[str, Any]:
        """–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –ø—Ä–µ–º–∏—É–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é"""
        return self.generate_website_premium(request_data)


# –û–±–Ω–æ–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
SmartAIGenerator = PremiumSmartAIGenerator 