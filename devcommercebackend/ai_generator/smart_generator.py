import time
import logging
from typing import Dict, Any, List
from .services import AIGenerationService
from .image_service import pexels_service

logger = logging.getLogger(__name__)


class PremiumSmartAIGenerator:
    """
    üöÄ –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–´–ô AI –ì–ï–ù–ï–†–ê–¢–û–† –ü–û–†–¢–§–û–õ–ò–û
    
    –°–æ–∑–¥–∞–µ—Ç –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ –æ–¥–Ω–∏–º –º–æ—â–Ω—ã–º –∑–∞–ø—Ä–æ—Å–æ–º –∫ AI
    —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    
    def __init__(self):
        self.ai_service = AIGenerationService()
        self.image_service = pexels_service
        logger.info("üéØ [OPTIMIZED AI] –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞")

    def generate_portfolio_optimized(self, request_data: Dict[str, Any]) -> Dict[str, Any]:
        """
        üöÄ –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–ê–Ø –ì–ï–ù–ï–†–ê–¶–ò–Ø –ü–û–†–¢–§–û–õ–ò–û - –û–î–ò–ù –ó–ê–ü–†–û–° –ö AI!
        
        –°–æ–∑–¥–∞–µ—Ç –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–µ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ –æ–¥–Ω–∏–º –º–æ—â–Ω—ã–º –∑–∞–ø—Ä–æ—Å–æ–º —Å–æ –≤—Å–µ–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        """
        logger.info(f"üéØ [OPTIMIZED AI] –ó–∞–ø—É—Å–∫ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–ª—è: {request_data.get('title', 'Unknown')}")
        
        try:
            start_time = time.time()
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            context = self._analyze_project_context(request_data)
            logger.info(f"üìä [OPTIMIZED] –ö–æ–Ω—Ç–µ–∫—Å—Ç: {context['profession']} / {context['design_style']}")
            
            # –°–æ–∑–¥–∞–µ–º –º–µ–≥–∞-–ø—Ä–æ–º–ø—Ç —Å–æ –≤—Å–µ–º–∏ –¥–∞–Ω–Ω—ã–º–∏
            mega_prompt = self._build_optimized_prompt(context, request_data)
            logger.info(f"üìù [OPTIMIZED] –ü—Ä–æ–º–ø—Ç —Å–æ–∑–¥–∞–Ω, –¥–ª–∏–Ω–∞: {len(mega_prompt)} —Å–∏–º–≤–æ–ª–æ–≤")
            
            # –î–µ–ª–∞–µ–º –û–î–ò–ù –∑–∞–ø—Ä–æ—Å –∫ AI
            try:
                ai_response = self.ai_service.call_openai_api(mega_prompt)
                logger.info("‚úÖ [OPTIMIZED] AI –æ—Ç–≤–µ—Ç–∏–ª —É—Å–ø–µ—à–Ω–æ")
            except Exception as e:
                logger.error(f"‚ùå [OPTIMIZED] –û—à–∏–±–∫–∞ AI –∑–∞–ø—Ä–æ—Å–∞: {str(e)}")
                raise Exception(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞—â–µ–Ω–∏—è –∫ AI: {str(e)}")
            
            # –ü–∞—Ä—Å–∏–º –æ—Ç–≤–µ—Ç
            try:
                code_data = self.ai_service.parse_ai_response(ai_response)
                logger.info("‚úÖ [OPTIMIZED] –ö–æ–¥ —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            except Exception as e:
                logger.error(f"‚ùå [OPTIMIZED] –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: {str(e)}")
                raise Exception(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞ AI: {str(e)}")
            
            # –ò–Ω—Ç–µ–≥—Ä–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            try:
                enhanced_code = self._integrate_images_into_code(code_data, context)
                logger.info("üñºÔ∏è [OPTIMIZED] –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω—ã")
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è [OPTIMIZED] –û—à–∏–±–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {str(e)}")
                enhanced_code = code_data  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–¥ –±–µ–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
            
            # –°–æ–∑–¥–∞–µ–º –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ
            try:
                portfolio = self.ai_service.create_portfolio_from_ai(enhanced_code, request_data)
                logger.info(f"üéâ [OPTIMIZED] –ü–æ—Ä—Ç—Ñ–æ–ª–∏–æ —Å–æ–∑–¥–∞–Ω–æ: {portfolio.slug}")
            except Exception as e:
                logger.error(f"‚ùå [OPTIMIZED] –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ: {str(e)}")
                raise Exception(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ: {str(e)}")
            
            end_time = time.time()
            response_time = round(end_time - start_time, 2)
            
            logger.info(f"üöÄ [OPTIMIZED] ‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∑–∞ {response_time}—Å")
            
            return {
                'success': True,
                'portfolio': portfolio,
                'response_time': response_time,
                'generation_type': 'optimized_single_request',
                'enhanced_features': [
                    'üéØ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑',
                    'üñºÔ∏è –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è', 
                    'üé® –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –¥–∏–∑–∞–π–Ω',
                    'üì± –ê–¥–∞–ø—Ç–∏–≤–Ω–∞—è –≤–µ—Ä—Å—Ç–∫–∞',
                    '‚ö° –ë—ã—Å—Ç—Ä–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è'
                ]
            }
            
        except Exception as e:
            logger.error(f"üí• [OPTIMIZED] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
            return {
                'success': False,
                'error': str(e),
                'error_code': 'OPTIMIZED_ERROR'
            }

    def _analyze_project_context(self, request_data: Dict[str, Any]) -> Dict[str, Any]:
        """üîç –ê–Ω–∞–ª–∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ"""
        
        personal_info = request_data.get('personal_info', {})
        education = request_data.get('education', {})
        experience = request_data.get('experience', [])
        skills = request_data.get('skills', {})
        projects = request_data.get('projects', [])
        contacts = request_data.get('contacts', {})
        design_prefs = request_data.get('design_preferences', {})
        
        # üñºÔ∏è –ü–û–õ–£–ß–ê–ï–ú –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–Ø –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø
        profile_photo_data = request_data.get('profile_photo_data')
        diploma_image_url = request_data.get('diploma_image_url')
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º URL –∏–∑ profile_photo_data
        user_profile_photo = None
        if profile_photo_data and isinstance(profile_photo_data, dict):
            user_profile_photo = profile_photo_data.get('url')
        
        logger.info(f"üñºÔ∏è [CONTEXT] Profile photo URL: {user_profile_photo}")
        logger.info(f"üñºÔ∏è [CONTEXT] Diploma image URL: {diploma_image_url}")
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å
        full_name = f"{personal_info.get('firstName', '')} {personal_info.get('lastName', '')}"
        profession = personal_info.get('profession', 'Specialist')
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–Ω–¥—É—Å—Ç—Ä–∏—é –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏
        industry_map = {
            'frontend': 'technology',
            'backend': 'technology', 
            'fullstack': 'technology',
            'mobile': 'technology',
            'designer': 'creative',
            'devops': 'technology',
            'qa': 'technology',
            'pm': 'business',
            'analyst': 'business'
        }
        industry = industry_map.get(profession.lower(), 'technology')
        
        # –°–æ–∑–¥–∞–µ–º –æ–ø–∏—Å–∞—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ–º–ø—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        bio_text = personal_info.get('bio', f"–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π {profession}")
        tech_skills_text = ', '.join(skills.get('technical', ['–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ'])[:5])
        
        generated_prompt = f"–°–æ–∑–¥–∞—Ç—å –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ –¥–ª—è {profession} {full_name}. {bio_text}. –û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞–≤—ã–∫–∏: {tech_skills_text}."
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–ª—é—á–µ–≤—ã–µ –Ω–∞–≤—ã–∫–∏ –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        tech_skills = skills.get('technical', [])
        image_keywords = self._extract_portfolio_image_keywords(profession, tech_skills)
        
        return {
            'portfolio_type': 'personal',
            'industry': industry,
            'style': design_prefs.get('style', 'modern'),
            'prompt': generated_prompt,
            'full_name': full_name,
            'profession': profession,
            'bio': personal_info.get('bio', ''),
            'location': personal_info.get('location', ''),
            'education': education,
            'experience': experience,
            'skills': skills,
            'projects': projects,
            'contacts': contacts,
            'design_style': design_prefs.get('style', 'modern'),
            'color_scheme': design_prefs.get('colorScheme', 'professional'),
            'theme': design_prefs.get('theme', 'clean'),
            'image_keywords': image_keywords,
            'primary_focus': self._detect_career_focus(profession, experience),
            'unique_strengths': self._extract_unique_strengths(experience, skills, projects),
            # üñºÔ∏è –î–û–ë–ê–í–õ–Ø–ï–ú –°–°–´–õ–ö–ò –ù–ê –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–Ø –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø
            'user_profile_photo': user_profile_photo,
            'user_diploma_image': diploma_image_url,
            'profile_photo_data': profile_photo_data  # –ü–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤–∫–ª—é—á–∞—è AI –∞–Ω–∞–ª–∏–∑
        }

    def _build_optimized_prompt(self, context: Dict, request_data: Dict) -> str:
        """
        üìù –°–æ–∑–¥–∞–Ω–∏–µ –º–µ–≥–∞-–ø—Ä–æ–º–ø—Ç–∞ —Å–æ –≤—Å–µ–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        """
        personal_info = request_data.get('personal_info', {})
        education = request_data.get('education', {})
        experience = request_data.get('experience', [])
        skills = request_data.get('skills', {})
        projects = request_data.get('projects', [])
        contacts = request_data.get('contacts', {})
        design_prefs = request_data.get('design_preferences', {})
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –æ–ø—ã—Ç–∞
        experience_text = ""
        for exp in experience[:3]:  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 3 –º–µ—Å—Ç–∞ —Ä–∞–±–æ—Ç—ã
            experience_text += f"‚Ä¢ {exp.get('position', '–ü–æ–∑–∏—Ü–∏—è')} –≤ {exp.get('company', '–ö–æ–º–ø–∞–Ω–∏—è')} - {exp.get('description', '–æ–ø–∏—Å–∞–Ω–∏–µ —Ä–∞–±–æ—Ç—ã')}\n"
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–æ–≤
        projects_text = ""
        for proj in projects[:4]:  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 4 –ø—Ä–æ–µ–∫—Ç–∞
            technologies = ', '.join(proj.get('technologies', []))
            projects_text += f"‚Ä¢ {proj.get('name', '–ü—Ä–æ–µ–∫—Ç')}: {proj.get('description', '–æ–ø–∏—Å–∞–Ω–∏–µ')} (–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏: {technologies})\n"
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –Ω–∞–≤—ã–∫–∏
        tech_skills = ', '.join(skills.get('technical', []))
        soft_skills = ', '.join(skills.get('soft', []))
        
        return f"""–¢—ã - SENIOR FRONTEND —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑ Apple/Google —Å 10+ –ª–µ—Ç –æ–ø—ã—Ç–∞. –°–æ–∑–¥–∞–π –®–ï–î–ï–í–† –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ —É—Ä–æ–≤–Ω—è Dribbble/Awwwards!

üéØ –ü–ï–†–°–û–ù–ê–õ–¨–ù–´–ï –î–ê–ù–ù–´–ï:
–ò–º—è: {personal_info.get('firstName', '')} {personal_info.get('lastName', '')}
–ü—Ä–æ—Ñ–µ—Å—Å–∏—è: {personal_info.get('profession', '–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç')}
–õ–æ–∫–∞—Ü–∏—è: {personal_info.get('location', '')}
–û —Å–µ–±–µ: {personal_info.get('bio', '')}
Email: {contacts.get('email', '')}
–¢–µ–ª–µ—Ñ–æ–Ω: {contacts.get('phone', '')}
LinkedIn: {contacts.get('linkedin', '')}
GitHub: {contacts.get('github', '')}

üéì –û–ë–†–ê–ó–û–í–ê–ù–ò–ï:
–£—á–µ–±–Ω–æ–µ –∑–∞–≤–µ–¥–µ–Ω–∏–µ: {education.get('university', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}
–°—Ç–µ–ø–µ–Ω—å: {education.get('degree', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}
–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å: {education.get('field', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}
–ì–æ–¥ –æ–∫–æ–Ω—á–∞–Ω–∏—è: {education.get('graduationYear', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}

üíº –û–ü–´–¢ –†–ê–ë–û–¢–´:
{experience_text}

üõ†Ô∏è –ù–ê–í–´–ö–ò:
–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ: {tech_skills}
–õ–∏—á–Ω—ã–µ –∫–∞—á–µ—Å—Ç–≤–∞: {soft_skills}

üöÄ –ü–†–û–ï–ö–¢–´:
{projects_text}

üé® –î–ò–ó–ê–ô–ù –ü–†–ï–î–ü–û–ß–¢–ï–ù–ò–Ø:
–°—Ç–∏–ª—å: {design_prefs.get('style', 'modern')}
–¶–≤–µ—Ç–æ–≤–∞—è —Å—Ö–µ–º–∞: {design_prefs.get('colorScheme', 'professional')}
–¢–µ–º–∞: {design_prefs.get('theme', 'clean')}

üî• –¢–†–ï–ë–û–í–ê–ù–ò–Ø –ö –î–ò–ó–ê–ô–ù–£ 2024 (–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û!):

1. **HERO SECTION** - —Å–æ–∑–¥–∞–π WOW —ç—Ñ—Ñ–µ–∫—Ç:
   - –ü–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω–∞—è –≤—ã—Å–æ—Ç–∞ (100vh)
   - Animated gradient background
   - Typing animation –¥–ª—è –∏–º–µ–Ω–∏
   - Floating particles background (CSS/JS)
   - Scroll indicator —Å—Ç—Ä–µ–ª–∫–∞
   - –°–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è —Ç–∏–ø–æ–≥—Ä–∞—Ñ–∏–∫–∞ (font-size: clamp())

2. **–¶–í–ï–¢–û–í–ê–Ø –°–•–ï–ú–ê** - —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è –ø–∞–ª–∏—Ç—Ä–∞:
   :root {{
     --primary: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
     --accent: #00d4aa;
     --dark: #0f0f23;
     --text: #e2e8f0;
     --muted: #64748b;
     --glass: rgba(255, 255, 255, 0.1);
   }}

3. **–°–û–í–†–ï–ú–ï–ù–ù–´–ï –≠–§–§–ï–ö–¢–´**:
   - Glassmorphism –∫–∞—Ä—Ç–æ—á–∫–∏ (backdrop-filter: blur(10px))
   - Smooth parallax scrolling
   - Hover —ç—Ñ—Ñ–µ–∫—Ç—ã —Å transform: scale(1.05)
   - Box-shadow —Å —Ü–≤–µ—Ç–Ω—ã–º–∏ —Ç–µ–Ω—è–º–∏
   - CSS animations (fadeInUp, slideIn)

4. **–ù–ê–í–´–ö–ò** - –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è:
   - Animated progress bars
   - Skill cards —Å hover 3D —ç—Ñ—Ñ–µ–∫—Ç–∞–º–∏
   - Icon –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –Ω–∞–≤—ã–∫–∞
   - Percentage indicators


5. **–¢–ò–ü–û–ì–†–ê–§–ò–ö–ê**:
   - Google Fonts: 'Inter' –¥–ª—è —Ç–µ–∫—Å—Ç–∞, 'Space Grotesk' –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
   - Font weights: 300, 400, 500, 700
   - Line-height: 1.6 –¥–ª—è —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏

6. **–ê–ù–ò–ú–ê–¶–ò–ò (CSS + JS)**:
   ```css
   @keyframes fadeInUp {{
     from {{ opacity: 0; transform: translateY(30px); }}
     to {{ opacity: 1; transform: translateY(0); }}
   }}
   
   @keyframes typing {{
     from {{ width: 0; }}
     to {{ width: 100%; }}
   }}
   ```

8. **RESPONSIVE DESIGN**:
   - Mobile-first –ø–æ–¥—Ö–æ–¥
   - Flexible containers
   - Adaptive font sizes (clamp())

9. **–ò–ù–¢–ï–†–ê–ö–¢–ò–í–ù–û–°–¢–¨**:
   - Smooth scroll behavior
   - Active section highlighting
   - Contact form —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π
   - Loader animation

üé® –¶–í–ï–¢–û–í–ê–Ø –ü–ê–õ–ò–¢–†–ê (–ò–°–ü–û–õ–¨–ó–£–ô –¢–û–ß–ù–û):
- Background: linear-gradient(135deg, #0f0f23 0%, #1a1a2e 50%, #16213e 100%)
- Primary: linear-gradient(135deg, #667eea 0%, #764ba2 100%)
- Accent: #00d4aa
- Text: #e2e8f0
- Muted: #64748b

üèóÔ∏è –°–¢–†–£–ö–¢–£–†–ê (–î–ï–¢–ê–õ–¨–ù–û):

1. **HERO** (100vh):
   - Animated background particles
   - Centered content —Å typing animation
   - CTA –∫–Ω–æ–ø–∫–∏ —Å hover —ç—Ñ—Ñ–µ–∫—Ç–∞–º–∏
   - Scroll indicator

2. **ABOUT** (padding: 100px 0):
   - Two-column layout
   - Profile image —Å border-radius –∏ shadow
   - Animated text appearance on scroll

3. **SKILLS** (dark section):
   - Grid layout –Ω–∞–≤—ã–∫–æ–≤
   - Progress bars —Å animation
   - Icon + –Ω–∞–∑–≤–∞–Ω–∏–µ + –ø—Ä–æ—Ü–µ–Ω—Ç

4. **EXPERIENCE** (–µ—Å–ª–∏ –µ—Å—Ç—å):
   - Timeline design
   - Cards —Å company info
   - Hover —ç—Ñ—Ñ–µ–∫—Ç—ã
4. **CONTACT** (gradient background):
   - Centered form
   - Input —Å—Ç–∏–ª–∏–∑–∞—Ü–∏—è
   - Social links —Å icons

üñºÔ∏è –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–Ø:
- <img src="imageplace-userlogo" alt="Profile Photo" style="border-radius: 50%; width: 200px; height: 200px; object-fit: cover;">
- <img src="imageplace-project,portfolio,{personal_info.get('profession', 'developer')}" alt="Project">

üì± MOBILE RESPONSIVE:
```css
@media (max-width: 768px) {{
  .hero h1 {{ font-size: 2rem; }}
  .grid {{ grid-template-columns: 1fr; }}
  .container {{ padding: 0 20px; }}
}}
```

‚ö° JAVASCRIPT –§–ò–ß–ò:
- Smooth scrolling
- Typing animation
- Progress bars animation on scroll
- Parallax —ç—Ñ—Ñ–µ–∫—Ç—ã
- Form validation

üö® –í–ê–ñ–ù–û! –ù–ï –°–û–ó–î–ê–í–ê–ô –ü–†–û–°–¢–´–ï –ë–õ–û–ö–ò –¶–í–ï–¢–û–í! 
–°–æ–∑–¥–∞–π –ü–†–û–§–ï–°–°–ò–û–ù–ê–õ–¨–ù–´–ô –¥–∏–∑–∞–π–Ω —Å —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –≥—Ä–∞–¥–∏–µ–Ω—Ç–∞–º–∏, –∞–Ω–∏–º–∞—Ü–∏—è–º–∏ –∏ —ç—Ñ—Ñ–µ–∫—Ç–∞–º–∏!

üî• –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–´–ï –°–ï–ö–¶–ò–ò:

1. **HERO** - –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω—ã–π —Å –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–º —Ñ–æ–Ω–æ–º –∏ typing —ç—Ñ—Ñ–µ–∫—Ç–æ–º –∏–º–µ–Ω–∏
2. **ABOUT** - –¥–≤–µ –∫–æ–ª–æ–Ω–∫–∏ —Å —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è –∏ –æ–ø–∏—Å–∞–Ω–∏–µ–º  
3. **SKILLS** - –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–æ–≥—Ä–µ—Å—Å –±–∞—Ä—ã —Å –ø—Ä–æ—Ü–µ–Ω—Ç–∞–º–∏
4. **CONTACT** - —Å—Ç–∏–ª—å–Ω–∞—è —Ñ–æ—Ä–º–∞ —Å –≥—Ä–∞–¥–∏–µ–Ω—Ç–Ω—ã–º —Ñ–æ–Ω–æ–º

üé® –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –î–û–ë–ê–í–¨ –û–¢ –°–ï–ë–Ø:
- –¢–µ–º–Ω—ã–π –≥—Ä–∞–¥–∏–µ–Ω—Ç–Ω—ã–π —Ñ–æ–Ω
- Glassmorphism –∫–∞—Ä—Ç–æ—á–∫–∏ (backdrop-filter: blur)
- –ü–ª–∞–≤–∞—é—â–∏–µ —á–∞—Å—Ç–∏—Ü—ã –Ω–∞ —Ñ–æ–Ω–µ
- Typing animation –¥–ª—è –∏–º–µ–Ω–∏
- Smooth scroll –º–µ–∂–¥—É —Å–µ–∫—Ü–∏—è–º–∏
- –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ hover —ç—Ñ—Ñ–µ–∫—Ç—ã
- –ü—Ä–æ–≥—Ä–µ—Å—Å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
- Parallax —ç—Ñ—Ñ–µ–∫—Ç—ã
- –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –≥—Ä–∞–¥–∏–µ–Ω—Ç—ã –∏ –∞–Ω–∏–º–∞—Ü–∏–∏

‚ö° JAVASCRIPT –§–ò–ß–ò:
- –ê–Ω–∏–º–∞—Ü–∏—è –Ω–∞–≤—ã–∫–æ–≤ –ø—Ä–∏ —Å–∫—Ä–æ–ª–ª–µ
- Typing —ç—Ñ—Ñ–µ–∫—Ç
- Smooth scroll navigation
- Progress bar –¥–ª—è —Å–∫—Ä–æ–ª–ª–∞

üö® –ù–ï –°–û–ó–î–ê–í–ê–ô –ü–†–û–°–¢–´–ï –°–¢–ò–õ–ò! –ò–°–ü–û–õ–¨–ó–£–ô –í–°–ï –°–û–í–†–ï–ú–ï–ù–ù–´–ï CSS –§–ò–®–ö–ò 2024!

–û–¢–í–ï–ß–ê–ô –°–¢–†–û–ì–û JSON:
{{"html": "–ü–û–õ–ù–´–ô –°–û–í–†–ï–ú–ï–ù–ù–´–ô HTML", "css": "–ü–û–õ–ù–´–ô CSS –° –ê–ù–ò–ú–ê–¶–ò–Ø–ú–ò", "js": "–ü–û–õ–ù–´–ô JS –° –ò–ù–¢–ï–†–ê–ö–¢–ò–í–ù–û–°–¢–¨–Æ"}}

–°–û–ó–î–ê–ô –ü–û–†–¢–§–û–õ–ò–û –£–†–û–í–ù–Ø APPLE/GOOGLE! –ë–ï–ó –ö–û–ú–ü–†–û–ú–ò–°–°–û–í! üöÄ‚ú®"""

    def _integrate_images_into_code(self, code_data: Dict, context: Dict) -> Dict[str, str]:
        """üñºÔ∏è –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ –∫–æ–¥"""
        
        try:
            html_code = code_data.get('html', '')
            css_code = code_data.get('css', '')
            
            # 1. –ó–ê–ú–ï–ù–Ø–ï–ú –ü–õ–ï–ô–°–•–û–õ–î–ï–†–´ –ù–ê –†–ï–ê–õ–¨–ù–´–ï –°–°–´–õ–ö–ò –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø
            html_code = self._replace_user_image_placeholders(html_code, context)
            
            # 2. –î–æ–±–∞–≤–ª—è–µ–º hero background –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            hero_image = self._get_hero_image(context)
            if hero_image:
                css_code = self._inject_hero_image_css(css_code, hero_image)
                logger.info(f"üñºÔ∏è [BACKGROUND] Hero background –¥–æ–±–∞–≤–ª–µ–Ω: {hero_image[:50]}...")
            
            # 3. –î–æ–±–∞–≤–ª—è–µ–º section background –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            section_images = self._get_section_images(context)
            if section_images:
                css_code = self._inject_section_images_css(css_code, section_images)
                logger.info(f"üñºÔ∏è [BACKGROUND] –î–æ–±–∞–≤–ª–µ–Ω–æ {len(section_images)} background –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
            
            return {
                'html': html_code,
                'css': css_code,
                'js': code_data.get('js', '')
            }
            
        except Exception as e:
            logger.error(f"‚ùå [IMAGES] –û—à–∏–±–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {str(e)}")
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–¥ –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
            return code_data

    def _replace_user_image_placeholders(self, html_code: str, context: Dict) -> str:
        """üîÑ –ó–∞–º–µ–Ω–∞ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä–æ–≤ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ —Å—Å—ã–ª–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_profile_photo = context.get('user_profile_photo')  # –°—Å—ã–ª–∫–∞ –Ω–∞ —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è
            user_diploma_image = context.get('user_diploma_image')  # –°—Å—ã–ª–∫–∞ –Ω–∞ –¥–∏–ø–ª–æ–º
            
            logger.info(f"üîÑ [PLACEHOLDERS] Profile photo: {user_profile_photo}")
            logger.info(f"üîÑ [PLACEHOLDERS] Diploma image: {user_diploma_image}")
            
            # –ó–∞–º–µ–Ω—è–µ–º –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è
            if user_profile_photo:
                html_code = html_code.replace('src="imageplace-userlogo"', f'src="{user_profile_photo}"')
                html_code = html_code.replace("src='imageplace-userlogo'", f"src='{user_profile_photo}'")
                logger.info("‚úÖ [PLACEHOLDERS] –ó–∞–º–µ–Ω–µ–Ω –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä imageplace-userlogo")
            else:
                # –ï—Å–ª–∏ –Ω–µ—Ç —Ñ–æ—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –∞–≤–∞—Ç–∞—Ä
                default_avatar = f"https://ui-avatars.com/api/?name={context.get('full_name', 'User')}&size=300&background=667eea&color=ffffff&bold=true"
                html_code = html_code.replace('src="imageplace-userlogo"', f'src="{default_avatar}"')
                html_code = html_code.replace("src='imageplace-userlogo'", f"src='{default_avatar}'")
                logger.info("‚ö†Ô∏è [PLACEHOLDERS] –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π –∞–≤–∞—Ç–∞—Ä")
            
            # –ó–∞–º–µ–Ω—è–µ–º –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä –¥–∏–ø–ª–æ–º–∞
            if user_diploma_image:
                html_code = html_code.replace('src="imageplace-diploma"', f'src="{user_diploma_image}"')
                html_code = html_code.replace("src='imageplace-diploma'", f"src='{user_diploma_image}'")
                logger.info("‚úÖ [PLACEHOLDERS] –ó–∞–º–µ–Ω–µ–Ω –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä imageplace-diploma")
            else:
                # –ï—Å–ª–∏ –Ω–µ—Ç –¥–∏–ø–ª–æ–º–∞, —É–¥–∞–ª—è–µ–º img —Ç–µ–≥–∏ –¥–ª—è –¥–∏–ø–ª–æ–º–∞
                import re
                html_code = re.sub(r'<img[^>]*src="imageplace-diploma"[^>]*>', '', html_code)
                html_code = re.sub(r"<img[^>]*src='imageplace-diploma'[^>]*>", '', html_code)
                logger.info("‚ö†Ô∏è [PLACEHOLDERS] –£–¥–∞–ª–µ–Ω—ã img —Ç–µ–≥–∏ –¥–ª—è –¥–∏–ø–ª–æ–º–∞ (–Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω)")
            
            return html_code
            
        except Exception as e:
            logger.error(f"‚ùå [PLACEHOLDERS] –û—à–∏–±–∫–∞ –∑–∞–º–µ–Ω—ã –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä–æ–≤: {str(e)}")
            return html_code

    def _get_hero_image(self, context: Dict) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        try:
            profession = context.get('profession', 'professional')
            search_query = f"{profession} professional modern workspace"
            
            images = self.image_service.search_images(
                query=search_query,
                component_type='hero',
                count=1
            )
            
            return images[0] if images else None
            
        except Exception as e:
            logger.error(f"‚ùå Hero image error: {str(e)}")
            return None

    def _get_section_images(self, context: Dict) -> List[str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è —Å–µ–∫—Ü–∏–π"""
        try:
            section_images = []
            profession = context.get('profession', 'professional')
            
            # –ü–æ–ª—É—á–∞–µ–º 3 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è —Å–µ–∫—Ü–∏–π
            for section_type in ['skills', 'projects', 'contact']:
                search_query = f"{profession} {section_type} technology workspace"
                
                images = self.image_service.search_images(
                    query=search_query,
                    component_type='features',
                    count=1
                )
                
                if images:
                    section_images.extend(images)
            
            return section_images
            
        except Exception as e:
            logger.error(f"‚ùå Section images error: {str(e)}")
            return []

    def _inject_hero_image_css(self, css_code: str, image_url: str) -> str:
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ hero –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ CSS"""
        hero_css = f"""
/* AI Generated Hero Background */
.hero, .hero-section, section:first-of-type, .banner, .intro {{
    background-image: linear-gradient(rgba(0,0,0,0.4), rgba(0,0,0,0.4)), url('{image_url}');
    background-size: cover;
    background-position: center;
    background-attachment: fixed;
}}
"""
        return css_code + hero_css

    def _inject_section_images_css(self, css_code: str, images: List[str]) -> str:
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å–µ–∫—Ü–∏–π –≤ CSS"""
        section_css = ""
        
        for i, image_url in enumerate(images):
            section_css += f"""
/* AI Generated Section Image {i+1} */
.section-{i+1}, .feature-{i+1}, .service-{i+1} {{
    background-image: url('{image_url}');
    background-size: cover;
    background-position: center;
}}
"""
        
        return css_code + section_css

    def _extract_portfolio_image_keywords(self, profession: str, tech_skills: List[str]) -> List[str]:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ"""
        profession_keywords = {
            'frontend': ['frontend', 'web development', 'ui design', 'javascript', 'react'],
            'backend': ['backend', 'server', 'database', 'api', 'programming'],
            'fullstack': ['fullstack', 'web development', 'programming', 'technology', 'coding'],
            'mobile': ['mobile', 'app development', 'smartphone', 'android', 'ios'],
            'designer': ['ui design', 'ux design', 'design', 'creative', 'interface'],
            'devops': ['devops', 'cloud', 'infrastructure', 'deployment', 'automation'],
            'qa': ['testing', 'quality assurance', 'bug testing', 'software testing'],
            'pm': ['project management', 'team', 'planning', 'agile', 'leadership'],
            'analyst': ['data analysis', 'analytics', 'charts', 'business intelligence']
        }
        
        base_keywords = profession_keywords.get(profession.lower(), ['programming', 'technology', 'professional'])
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –Ω–∞–≤—ã–∫–∏ –∫–∞–∫ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
        tech_keywords = [skill.lower() for skill in tech_skills[:3]]  # –ü–µ—Ä–≤—ã–µ 3 –Ω–∞–≤—ã–∫–∞
        
        return base_keywords + tech_keywords + ['professional', 'modern', 'workspace']
    
    def _detect_career_focus(self, profession: str, experience: List[Dict]) -> str:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–∞—Ä—å–µ—Ä–Ω–æ–≥–æ —Ñ–æ–∫—É—Å–∞"""
        if not experience:
            return f"–ù–∞—á–∏–Ω–∞—é—â–∏–π {profession}"
            
        companies = [exp.get('company', '') for exp in experience]
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–∏–ø—ã –∫–æ–º–ø–∞–Ω–∏–π
        startup_indicators = ['startup', '—Å—Ç–∞—Ä—Ç–∞–ø', '–Ω–æ–≤–∞—è –∫–æ–º–ø–∞–Ω–∏—è']
        corporate_indicators = ['corporation', '–∫–æ—Ä–ø–æ—Ä–∞—Ü–∏—è', '–±–æ–ª—å—à–∞—è –∫–æ–º–ø–∞–Ω–∏—è', 'enterprise']
        
        startup_count = sum(1 for company in companies if any(ind in company.lower() for ind in startup_indicators))
        corporate_count = sum(1 for company in companies if any(ind in company.lower() for ind in corporate_indicators))
        
        if startup_count > corporate_count:
            return f"{profession} —Å –æ–ø—ã—Ç–æ–º –≤ —Å—Ç–∞—Ä—Ç–∞–ø–∞—Ö"
        elif corporate_count > startup_count:
            return f"{profession} —Å –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–º –æ–ø—ã—Ç–æ–º"
        else:
            return f"–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π {profession}"
    
    def _extract_unique_strengths(self, experience: List[Dict], skills: Dict, projects: List[Dict]) -> List[str]:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Å–∏–ª—å–Ω—ã—Ö —Å—Ç–æ—Ä–æ–Ω"""
        strengths = []
        
        # –ê–Ω–∞–ª–∏–∑ –æ–ø—ã—Ç–∞
        if len(experience) >= 3:
            strengths.append("–ë–æ–≥–∞—Ç—ã–π –æ–ø—ã—Ç –≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∫–æ–º–ø–∞–Ω–∏—è—Ö")
        
        # –ê–Ω–∞–ª–∏–∑ –Ω–∞–≤—ã–∫–æ–≤
        technical_skills = skills.get('technical', [])
        if len(technical_skills) >= 5:
            strengths.append("–®–∏—Ä–æ–∫–∏–π —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π —Å—Ç–µ–∫")
        
        # –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–µ–∫—Ç–æ–≤
        if len(projects) >= 3:
            strengths.append("–ü–æ—Ä—Ç—Ñ–æ–ª–∏–æ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤")
        
        # –ê–Ω–∞–ª–∏–∑ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π –≤ –ø—Ä–æ–µ–∫—Ç–∞—Ö
        all_technologies = []
        for project in projects:
            all_technologies.extend(project.get('technologies', []))
        
        unique_technologies = list(set(all_technologies))
        if len(unique_technologies) >= 8:
            strengths.append("–û–ø—ã—Ç —Å –º–Ω–æ–∂–µ—Å—Ç–≤–æ–º —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π")
            
        return strengths if strengths else ["–ú–æ—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç", "–ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ –Ω–æ–≤—ã–º –≤—ã–∑–æ–≤–∞–º"]

    # –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å–æ —Å—Ç–∞—Ä—ã–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º
    def generate_website(self, request_data: Dict[str, Any]) -> Dict[str, Any]:
        """–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ - —Ç–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é"""
        return self.generate_portfolio_optimized(request_data)


# –û–±–Ω–æ–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
SmartAIGenerator = PremiumSmartAIGenerator 