import time
import logging
from datetime import datetime, timedelta
from typing import Dict, Any

from django.db.models import Count, Q, Avg, Sum
from django.utils import timezone
from django.utils.decorators import method_decorator
from django.views.decorators.csrf import csrf_exempt
from django.contrib.auth import get_user_model
from django.contrib.auth.models import User

from rest_framework.views import APIView
from rest_framework.decorators import api_view, permission_classes
from rest_framework.response import Response
from rest_framework import status, permissions
from rest_framework.exceptions import PermissionDenied, ValidationError

from .models import (
    AIGenerationRequest, AIGenerationStats, 
    AIPromptTemplate, GlobalAIStats
)
from .serializers import (
    AIGenerateRequestSerializer, AIGenerateResponseSerializer,
    AIGenerationRequestListSerializer, AIGenerationStatsSerializer,
    AIPromptTemplateSerializer, AIUserStatsSerializer,
    AILimitsSerializer, AIStyleStatsSerializer,
    AIGenerationRequestSerializer
)
from .services import sync_generate_portfolio
from .smart_generator import SmartAIGenerator

logger = logging.getLogger(__name__)
User = get_user_model()


@api_view(['POST'])
@permission_classes([permissions.IsAuthenticated])
def ai_generate_portfolio(request):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ —á–µ—Ä–µ–∑ AI"""
    try:
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        serializer = AIGenerateRequestSerializer(data=request.data)
        if not serializer.is_valid():
            return Response({
                'success': False,
                'error': '–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö',
                'errors': serializer.errors
            }, status=status.HTTP_400_BAD_REQUEST)
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        validated_data = serializer.validated_data
        request_data = {
            'user': request.user,
            'title': validated_data['title'],
            'description': validated_data.get('description', ''),
            'prompt': validated_data['prompt'],
            'style': validated_data.get('style', 'modern'),
            'tags': validated_data.get('tags', [])
        }
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ç–µ–≥–∏
        auto_tags = ['ai-generated', request_data['style']]
        request_data['tags'].extend(auto_tags)
        request_data['tags'] = list(set(request_data['tags']))  # –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é
        result = sync_generate_portfolio(request_data)
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        response_serializer = AIGenerateResponseSerializer(result)
        
        if result['success']:
            return Response(response_serializer.data, status=status.HTTP_201_CREATED)
        else:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º HTTP —Å—Ç–∞—Ç—É—Å –ø–æ –∫–æ–¥—É –æ—à–∏–±–∫–∏
            error_code = result.get('error_code', 'UNKNOWN')
            if error_code == 'LIMIT_EXCEEDED':
                http_status = status.HTTP_429_TOO_MANY_REQUESTS
            elif error_code == 'TIMEOUT':
                http_status = status.HTTP_408_REQUEST_TIMEOUT
            else:
                http_status = status.HTTP_500_INTERNAL_SERVER_ERROR
            
            return Response(response_serializer.data, status=http_status)
        
    except Exception as e:
        logger.error(f"Unexpected error in ai_generate_portfolio: {str(e)}")
        return Response({
            'success': False,
            'error': '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
            'error_code': 'INTERNAL_ERROR'
        }, status=status.HTTP_500_INTERNAL_SERVER_ERROR)


class SmartAIGenerationView(APIView):
    """
    üöÄ –†–ï–í–û–õ–Æ–¶–ò–û–ù–ù–´–ô AI –ì–ï–ù–ï–†–ê–¢–û–† –°–ê–ô–¢–û–í –ú–ò–†–û–í–û–ì–û –£–†–û–í–ù–Ø!
    
    –¢–µ–ø–µ—Ä—å —Å 7-—à–∞–≥–æ–≤—ã–º –ø—Ä–æ—Ü–µ—Å—Å–æ–º –ø—Ä–µ–º–∏—É–º –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏!
    """
    permission_classes = [permissions.IsAuthenticated]
    
    def post(self, request):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∞–π—Ç–∞ —á–µ—Ä–µ–∑ –ü–†–ï–ú–ò–£–ú AI –ø—Ä–æ—Ü–µ—Å—Å"""
        
        try:
            serializer = AIGenerationRequestSerializer(data=request.data)
            if not serializer.is_valid():
                return Response({
                    'success': False,
                    'error': '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ',
                    'details': serializer.errors
                }, status=status.HTTP_400_BAD_REQUEST)
            
            request_data = {
                'user': request.user,
                'prompt': serializer.validated_data['prompt'],
                'title': serializer.validated_data['title'],
                'description': serializer.validated_data.get('description', ''),
                'style': serializer.validated_data.get('style', 'modern'),
                'tags': serializer.validated_data.get('tags', []),
                'industry': serializer.validated_data.get('industry', 'general')
            }
            
            logger.info(f"üöÄ [PREMIUM AI] –ó–∞–ø—Ä–æ—Å –†–ï–í–û–õ–Æ–¶–ò–û–ù–ù–û–ô –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç {request.user.username}")
            
            # –°–æ–∑–¥–∞–µ–º –ü–†–ï–ú–ò–£–ú –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∏ –∑–∞–ø—É—Å–∫–∞–µ–º 7-—à–∞–≥–æ–≤—ã–π –ø—Ä–æ—Ü–µ—Å—Å
            generator = SmartAIGenerator()
            result = generator.generate_website_premium(request_data)
            
            if result['success']:
                logger.info(f"üéâ [PREMIUM AI] ‚úÖ –®–ï–î–ï–í–† —Å–æ–∑–¥–∞–Ω –¥–ª—è {request.user.username}!")
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø—Ä–µ–º–∏—É–º –ø—Ä–æ—Ü–µ—Å—Å–µ
                response_data = {
                    'success': True,
                    'portfolio': {
                        'id': str(result['portfolio'].id),
                        'title': result['portfolio'].title,
                        'slug': result['portfolio'].slug,
                        'public_url': result['portfolio'].public_url,
                        'is_public': result['portfolio'].is_public,
                        'created_at': result['portfolio'].created_at.isoformat(),
                        'tags': result['portfolio'].tags
                    },
                    'generation_info': {
                        'request_id': result.get('request_id'),
                        'response_time': round(result.get('response_time', 0), 2),
                        'generation_steps': result.get('generation_steps', 7),
                        'enhanced_features': result.get('enhanced_features', []),
                        'process_type': 'premium_7_step'
                    },
                    'premium_features': {
                        'business_analysis': True,
                        'unique_design': True,
                        'professional_copy': True,
                        'auto_images': True,
                        'modern_interactions': True
                    }
                }
                
                return Response(response_data, status=status.HTTP_201_CREATED)
            
            else:
                logger.error(f"üí• [PREMIUM AI] ‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {result.get('error', 'Unknown error')}")
                
                return Response({
                    'success': False,
                    'error': result.get('error', '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —à–µ–¥–µ–≤—Ä–∞'),
                    'error_code': result.get('error_code', 'PREMIUM_ERROR')
                }, status=status.HTTP_500_INTERNAL_SERVER_ERROR)
        
        except Exception as e:
            logger.error(f"üí• [PREMIUM AI] ‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
            
            return Response({
                'success': False,
                'error': '–û—à–∏–±–∫–∞ –ø—Ä–µ–º–∏—É–º –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏. –ù–∞—à–∏ –∏–Ω–∂–µ–Ω–µ—Ä—ã —É–∂–µ —Ä–∞–±–æ—Ç–∞—é—Ç –Ω–∞–¥ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º!',
                'error_code': 'PREMIUM_CRITICAL_ERROR'
            }, status=status.HTTP_500_INTERNAL_SERVER_ERROR)


class PremiumAIGenerationWithProgressView(APIView):
    """
    üéØ –ü–†–ï–ú–ò–£–ú –ì–ï–ù–ï–†–ê–¶–ò–Ø –° –ü–û–ö–ê–ó–û–ú –ü–†–û–ì–†–ï–°–°–ê
    
    WebSocket-like API –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ 7-—à–∞–≥–æ–≤–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞
    """
    permission_classes = [permissions.IsAuthenticated]
    
    def post(self, request):
        """–ó–∞–ø—É—Å–∫ –ø—Ä–µ–º–∏—É–º –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º"""
        
        try:
            # –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
            serializer = AIGenerationRequestSerializer(data=request.data)
            if not serializer.is_valid():
                return Response({
                    'success': False,
                    'error': '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ',
                    'details': serializer.errors
                }, status=status.HTTP_400_BAD_REQUEST)
            
            # –°–æ–∑–¥–∞–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å callback'–∞–º–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
            generator = ProgressTrackingGenerator(user=request.user)
            
            request_data = {
                'user': request.user,
                'prompt': serializer.validated_data['prompt'],
                'title': serializer.validated_data['title'],
                'description': serializer.validated_data.get('description', ''),
                'style': serializer.validated_data.get('style', 'modern'),
                'tags': serializer.validated_data.get('tags', []),
                'industry': serializer.validated_data.get('industry', 'general')
            }
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Å —Ç—Ä–µ–∫–∏–Ω–≥–æ–º –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
            result = generator.generate_with_progress(request_data)
            
            return Response(result)
            
        except Exception as e:
            logger.error(f"üí• [PROGRESS AI] ‚ùå –û—à–∏–±–∫–∞: {str(e)}")
            return Response({
                'success': False,
                'error': '–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º'
            }, status=status.HTTP_500_INTERNAL_SERVER_ERROR)


class ProgressTrackingGenerator:
    """–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –¥–ª—è frontend'–∞"""
    
    def __init__(self, user):
        self.user = user
        self.generator = SmartAIGenerator()
        self.progress_steps = [
            {"step": 1, "name": "üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤–∞—à –±–∏–∑–Ω–µ—Å", "description": "–ò–∑—É—á–∞–µ–º –∏–Ω–¥—É—Å—Ç—Ä–∏—é –∏ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤"},
            {"step": 2, "name": "üèóÔ∏è –ü—Ä–æ–µ–∫—Ç–∏—Ä—É–µ–º –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É", "description": "–°–æ–∑–¥–∞—ë–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∏ –Ω–∞–≤–∏–≥–∞—Ü–∏—é"},
            {"step": 3, "name": "üé® –†–∞–∑—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∏–∑–∞–π–Ω", "description": "–°–æ–∑–¥–∞—ë–º —É–Ω–∏–∫–∞–ª—å–Ω—É—é –∫–æ–Ω—Ü–µ–ø—Ü–∏—é"},
            {"step": 4, "name": "‚úçÔ∏è –ü–∏—à–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç", "description": "–°–æ–∑–¥–∞—ë–º –ø—Ä–æ–¥–∞—é—â–∏–µ —Ç–µ–∫—Å—Ç—ã"},
            {"step": 5, "name": "üñºÔ∏è –ü–æ–¥–±–∏—Ä–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è", "description": "–ò–Ω—Ç–µ–≥—Ä–∏—Ä—É–µ–º –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ñ–æ—Ç–æ"},
            {"step": 6, "name": "‚ö° –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤", "description": "–°–æ–∑–¥–∞—ë–º –∞–Ω–∏–º–∞—Ü–∏–∏ –∏ —ç—Ñ—Ñ–µ–∫—Ç—ã"},
            {"step": 7, "name": "üéØ –°–æ–±–∏—Ä–∞–µ–º —à–µ–¥–µ–≤—Ä", "description": "–§–∏–Ω–∞–ª—å–Ω–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∏ —Å–±–æ—Ä–∫–∞"}
        ]
    
    def generate_with_progress(self, request_data):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º"""
        
        try:
            start_time = time.time()
            
            # –ò–º–∏—Ç–∏—Ä—É–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
            progress_data = {
                'success': True,
                'status': 'completed',
                'total_steps': 7,
                'completed_steps': 7,
                'current_step': {
                    'step': 7,
                    'name': 'üéâ –ì–æ—Ç–æ–≤–æ!',
                    'description': '–í–∞—à —Å–∞–π—Ç —Å–æ–∑–¥–∞–Ω'
                },
                'steps_detail': self.progress_steps,
                'estimated_time': '45-60 —Å–µ–∫—É–Ω–¥',
                'actual_time': 0
            }
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Ä–µ–∞–ª—å–Ω—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é
            result = self.generator.generate_website_premium(request_data)
            
            actual_time = round(time.time() - start_time, 2)
            progress_data['actual_time'] = actual_time
            
            if result['success']:
                progress_data.update({
                    'portfolio': {
                        'id': str(result['portfolio'].id),
                        'title': result['portfolio'].title,
                        'slug': result['portfolio'].slug,
                        'public_url': result['portfolio'].public_url,
                        'is_public': result['portfolio'].is_public,
                        'created_at': result['portfolio'].created_at.isoformat(),
                        'tags': result['portfolio'].tags
                    },
                    'generation_summary': {
                        'enhanced_features': result.get('enhanced_features', []),
                        'business_insights': f"–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –±–∏–∑–Ω–µ—Å —Ç–∏–ø–∞ '{request_data.get('industry', 'general')}'",
                        'design_uniqueness': "–°–æ–∑–¥–∞–Ω–∞ —É–Ω–∏–∫–∞–ª—å–Ω–∞—è –¥–∏–∑–∞–π–Ω-–∫–æ–Ω—Ü–µ–ø—Ü–∏—è",
                        'images_integrated': "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥–æ–±—Ä–∞–Ω—ã –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è",
                        'code_quality': "–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–π –∫–æ–¥"
                    }
                })
            else:
                progress_data.update({
                    'success': False,
                    'error': result.get('error', '–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏'),
                    'status': 'failed'
                })
            
            return progress_data
            
        except Exception as e:
            logger.error(f"üí• [PROGRESS] –û—à–∏–±–∫–∞: {str(e)}")
            return {
                'success': False,
                'error': f'–û—à–∏–±–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {str(e)}',
                'status': 'failed'
            }


class GetUserLimitsView(APIView):
    """API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ª–∏–º–∏—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    permission_classes = [permissions.IsAuthenticated]
    
    def get(self, request):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ª–∏–º–∏—Ç–∞—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            user = request.user
            today = timezone.now().date()
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ —Å–µ–≥–æ–¥–Ω—è
            stats, created = AIGenerationStats.objects.get_or_create(
                user=user,
                date=today,
                defaults={
                    'requests_count': 0,
                    'successful_count': 0,
                    'failed_count': 0
                }
            )
            
            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–∏–º–∏—Ç—ã
            daily_limit = 5 if user.is_premium else 0
            used_today = stats.requests_count
            remaining_today = max(0, daily_limit - used_today)
            can_generate = user.is_premium and remaining_today > 0
            
            # –í—Ä–µ–º—è —Å–±—Ä–æ—Å–∞ –ª–∏–º–∏—Ç–∞
            tomorrow = today + timedelta(days=1)
            next_reset = timezone.make_aware(datetime.combine(tomorrow, datetime.min.time()))
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            if not user.is_premium:
                limit_message = "AI –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ Premium –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"
            elif remaining_today == 0:
                limit_message = f"–ò—Å—á–µ—Ä–ø–∞–Ω –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç ({daily_limit}/–¥–µ–Ω—å). –°–±—Ä–æ—Å–∏—Ç—Å—è –∑–∞–≤—Ç—Ä–∞."
            else:
                limit_message = f"–û—Å—Ç–∞–ª–æ—Å—å {remaining_today} –∏–∑ {daily_limit} –≥–µ–Ω–µ—Ä–∞—Ü–∏–π –Ω–∞ —Å–µ–≥–æ–¥–Ω—è"
            
            return Response({
                'success': True,
                'data': {
                    'is_premium': user.is_premium,
                    'daily_limit': daily_limit,
                    'used_today': used_today,
                    'remaining_today': remaining_today,
                    'next_reset': next_reset.isoformat(),
                    'can_generate': can_generate,
                    'limit_message': limit_message
                }
            })
            
        except Exception as e:
            logger.error(f"[LIMITS] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–∏–º–∏—Ç–æ–≤: {str(e)}")
            return Response({
                'success': False,
                'error': '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–∏–º–∏—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'
            }, status=status.HTTP_500_INTERNAL_SERVER_ERROR)


class AIStatsView(APIView):
    """API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ AI"""
    permission_classes = [permissions.IsAuthenticated]
    
    def get(self, request):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ AI"""
        try:
            user = request.user
            
            # –û–±—â–∏–µ –º–µ—Ç—Ä–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            total_requests = AIGenerationRequest.objects.filter(user=user).count()
            total_successful = AIGenerationRequest.objects.filter(user=user, status='success').count()
            total_failed = total_requests - total_successful
            
            success_rate = (total_successful / total_requests * 100) if total_requests > 0 else 0
            
            # –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞
            avg_response_time = AIGenerationRequest.objects.filter(
                user=user, 
                status='success', 
                response_time__isnull=False
            ).aggregate(avg_time=Avg('response_time'))['avg_time'] or 0
            
            # –õ—é–±–∏–º—ã–π —Å—Ç–∏–ª—å
            favorite_style = AIGenerationRequest.objects.filter(user=user).values('style').annotate(
                count=Count('style')
            ).order_by('-count').first()
            
            return Response({
                'success': True,
                'data': {
                    'total_requests': total_requests,
                    'total_successful': total_successful,
                    'total_failed': total_failed,
                    'success_rate': round(success_rate, 1),
                    'average_response_time': round(avg_response_time, 2),
                    'favorite_style': favorite_style['style'] if favorite_style else 'modern'
                }
            })
            
        except Exception as e:
            logger.error(f"[STATS] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}")
            return Response({
                'success': False,
                'error': '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏'
            }, status=status.HTTP_500_INTERNAL_SERVER_ERROR)


class AIGenerationHistoryView(APIView):
    """API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ AI –≥–µ–Ω–µ—Ä–∞—Ü–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    permission_classes = [permissions.IsAuthenticated]
    
    def get(self, request):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–π"""
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 20 –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            requests = AIGenerationRequest.objects.filter(
                user=request.user
            ).select_related('portfolio_created').order_by('-created_at')[:20]
            
            history_data = []
            for req in requests:
                request_data = {
                    'id': req.id,
                    'title': req.title,
                    'prompt': req.prompt[:100] + '...' if len(req.prompt) > 100 else req.prompt,
                    'style': req.style,
                    'status': req.status,
                    'response_time': req.response_time,
                    'created_at': req.created_at.isoformat(),
                    'portfolio': None
                }
                
                if req.portfolio_created:
                    request_data['portfolio'] = {
                        'id': str(req.portfolio_created.id),
                        'slug': req.portfolio_created.slug,
                        'public_url': req.portfolio_created.public_url,
                        'is_public': req.portfolio_created.is_public
                    }
                
                history_data.append(request_data)
            
            return Response({
                'history': history_data,
                'total_requests': AIGenerationRequest.objects.filter(user=request.user).count()
            })
        
        except Exception as e:
            logger.error(f"[HISTORY] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏: {str(e)}")
            
            return Response({
                'error': '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏'
            }, status=status.HTTP_500_INTERNAL_SERVER_ERROR)


class PromptTemplatesView(APIView):
    """API –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —à–∞–±–ª–æ–Ω–∞–º–∏ –ø—Ä–æ–º–ø—Ç–æ–≤"""
    permission_classes = [permissions.IsAuthenticated]
    
    def get(self, request):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–æ–≤ –ø—Ä–æ–º–ø—Ç–æ–≤"""
        try:
            user = request.user
            
            # –ü–æ–ª—É—á–∞–µ–º –ø—É–±–ª–∏—á–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã –∏ —à–∞–±–ª–æ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            templates = AIPromptTemplate.objects.filter(
                Q(is_public=True) | Q(user=user)
            ).order_by('-is_featured', '-usage_count', '-created_at')
            
            # –§–∏–ª—å—Ç—Ä—ã
            category = request.GET.get('category')
            if category:
                templates = templates.filter(category=category)
            
            style = request.GET.get('style')
            if style:
                templates = templates.filter(style=style)
            
            serializer = AIPromptTemplateSerializer(templates, many=True)
            return Response({
                'success': True,
                'data': serializer.data
            })
            
        except Exception as e:
            logger.error(f"[TEMPLATES] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–æ–≤: {str(e)}")
            return Response({
                'success': False,
                'error': '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–æ–≤ –ø—Ä–æ–º–ø—Ç–æ–≤'
            }, status=status.HTTP_500_INTERNAL_SERVER_ERROR)
    
    def post(self, request):
        """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —à–∞–±–ª–æ–Ω–∞ –ø—Ä–æ–º–ø—Ç–∞"""
        try:
            user = request.user
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç —à–∞–±–ª–æ–Ω–æ–≤
            user_templates_count = AIPromptTemplate.objects.filter(user=user).count()
            if user_templates_count >= 20:
                return Response({
                    'success': False,
                    'error': '–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç —à–∞–±–ª–æ–Ω–æ–≤ (–º–∞–∫—Å–∏–º—É–º 20)'
                }, status=status.HTTP_400_BAD_REQUEST)
            
            serializer = AIPromptTemplateSerializer(data=request.data)
            if serializer.is_valid():
                template = serializer.save(user=user)
                
                return Response({
                    'success': True,
                    'data': AIPromptTemplateSerializer(template).data,
                    'message': '–®–∞–±–ª–æ–Ω —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω'
                }, status=status.HTTP_201_CREATED)
            
            return Response({
                'success': False,
                'error': '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ',
                'details': serializer.errors
            }, status=status.HTTP_400_BAD_REQUEST)
            
        except Exception as e:
            logger.error(f"[TEMPLATES] –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —à–∞–±–ª–æ–Ω–∞: {str(e)}")
            return Response({
                'success': False,
                'error': '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —à–∞–±–ª–æ–Ω–∞'
            }, status=status.HTTP_500_INTERNAL_SERVER_ERROR) 