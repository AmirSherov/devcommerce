import time
import logging
from datetime import datetime, timedelta
from typing import Dict, Any

from django.db.models import Count, Q, Avg, Sum
from django.utils import timezone
from django.utils.decorators import method_decorator
from django.views.decorators.csrf import csrf_exempt
from django.contrib.auth import get_user_model
from django.contrib.auth.models import User

from rest_framework.views import APIView
from rest_framework.decorators import api_view, permission_classes
from rest_framework.response import Response
from rest_framework import status, permissions
from rest_framework.exceptions import PermissionDenied, ValidationError

from .models import (
    AIGenerationRequest, AIGenerationStats, 
    AIPromptTemplate, GlobalAIStats
)
from .serializers import (
    AIGenerationRequestListSerializer, AIGenerationStatsSerializer,
    AIPromptTemplateSerializer, AIUserStatsSerializer,
    AILimitsSerializer, AIStyleStatsSerializer,
    AIGenerationRequestSerializer
)
from .smart_generator import SmartAIGenerator
from .image_service import upload_user_profile_photo, upload_user_diploma_image

logger = logging.getLogger(__name__)
User = get_user_model()


# –°—Ç–∞—Ä—ã–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä —É–¥–∞–ª–µ–Ω - –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ smart-generate


class SmartAIGenerationView(APIView):
    """
    üöÄ –†–ï–í–û–õ–Æ–¶–ò–û–ù–ù–´–ô AI –ì–ï–ù–ï–†–ê–¢–û–† –ü–û–†–¢–§–û–õ–ò–û –ú–ò–†–û–í–û–ì–û –£–†–û–í–ù–Ø!
    
    –¢–µ–ø–µ—Ä—å —Å 7-—à–∞–≥–æ–≤—ã–º –ø—Ä–æ—Ü–µ—Å—Å–æ–º –ø—Ä–µ–º–∏—É–º –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏, –∑–∞–≥—Ä—É–∑–∫–æ–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏ S3 –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π!
    """
    permission_classes = [permissions.IsAuthenticated]
    
    def post(self, request):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ —á–µ—Ä–µ–∑ –ü–†–ï–ú–ò–£–ú AI –ø—Ä–æ—Ü–µ—Å—Å"""
        
        try:
            # üîß –ò–°–ü–†–ê–í–õ–Ø–ï–ú –û–ë–†–ê–ë–û–¢–ö–£ FORMDATA –° –§–ê–ô–õ–ê–ú–ò
            
            # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏—Ö–æ–¥—è—Ç –∫–∞–∫ FormData (—Å —Ñ–∞–π–ª–∞–º–∏), –ø–∞—Ä—Å–∏–º JSON —Å—Ç—Ä–æ–∫–∏
            if request.content_type and 'multipart/form-data' in request.content_type:
                logger.info("üì¶ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º FormData —Å —Ñ–∞–π–ª–∞–º–∏")
                
                # –ü–∞—Ä—Å–∏–º JSON –¥–∞–Ω–Ω—ã–µ –∏–∑ FormData
                try:
                    import json
                    
                    # –õ–æ–≥–∏—Ä—É–µ–º —á—Ç–æ –ø—Ä–∏—Ö–æ–¥–∏—Ç –≤ FormData
                    logger.info(f"üìã FormData –∫–ª—é—á–∏: {list(request.data.keys())}")
                    logger.info(f"üìÅ FILES –∫–ª—é—á–∏: {list(request.FILES.keys())}")
                    
                    personal_info = json.loads(request.data.get('personal_info', '{}'))
                    education_data = json.loads(request.data.get('education', '{}'))
                    experience = json.loads(request.data.get('experience', '[]'))
                    skills = json.loads(request.data.get('skills', '{}'))
                    projects = json.loads(request.data.get('projects', '[]'))
                    contacts = json.loads(request.data.get('contacts', '{}'))
                    design_preferences = json.loads(request.data.get('design_preferences', '{}'))
                    
                    profile_photo = request.FILES.get('profile_photo')
                    diploma_image = request.FILES.get('diplomaImage')
                    
                    logger.info(f"üì∏ profile_photo: {profile_photo.name if profile_photo else 'None'}")
                    logger.info(f"üéì diploma_image: {diploma_image.name if diploma_image else 'None'}")
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –¥–∏–ø–ª–æ–º–∞ –∫ education
                    education = education_data.copy()
                    if diploma_image:
                        education['diplomaImage'] = diploma_image
                    
                    logger.info(f"‚úÖ –î–∞–Ω–Ω—ã–µ —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω—ã: personal_info={bool(personal_info)}, education={bool(education)}")
                    
                    # üîç –ë–∞–∑–æ–≤–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ FormData. –£–ø—Ä–æ—â–µ–Ω–∞.
                    validation_errors = {}
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è personal_info
                    if not personal_info.get('firstName') or not personal_info.get('lastName') or not personal_info.get('profession'):
                        validation_errors.setdefault('personal_info', []).append('–ò–º—è, —Ñ–∞–º–∏–ª–∏—è –∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã')
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º skills
                    if not skills.get('technical'):
                        validation_errors.setdefault('skills', []).append('–î–æ–±–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –Ω–∞–≤—ã–∫')
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º contacts
                    if not contacts.get('email'):
                        validation_errors.setdefault('contacts', []).append('Email –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω')
                    
                    if validation_errors:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ FormData: {validation_errors}")
                        return Response({
                            'success': False,
                            'error': '–î–∞–Ω–Ω—ã–µ –Ω–µ –ø—Ä–æ—à–ª–∏ –≤–∞–ª–∏–¥–∞—Ü–∏—é',
                            'details': validation_errors
                        }, status=status.HTTP_400_BAD_REQUEST)
                    
                    logger.info("‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è FormData –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ")
                    
                except (json.JSONDecodeError, KeyError) as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ FormData: {str(e)}")
                    return Response({
                        'success': False,
                        'error': '–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö —Å —Ñ–∞–π–ª–∞–º–∏',
                        'details': str(e)
                    }, status=status.HTTP_400_BAD_REQUEST)
            
            else:
                # –û–±—ã—á–Ω–∞—è JSON –æ–±—Ä–∞–±–æ—Ç–∫–∞
                logger.info("üìù –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–±—ã—á–Ω—ã–π JSON")
                serializer = AIGenerationRequestSerializer(data=request.data)
                if not serializer.is_valid():
                    return Response({
                        'success': False,
                        'error': '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ',
                        'details': serializer.errors
                    }, status=status.HTTP_400_BAD_REQUEST)
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ç–æ—Ä–∞
                personal_info = serializer.validated_data['personal_info']
                # –ü–æ–ª—è education, experience, projects –±–æ–ª—å—à–µ –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã
                education = serializer.validated_data.get('education', {})
                experience = serializer.validated_data.get('experience', [])
                skills = serializer.validated_data['skills']
                projects = serializer.validated_data.get('projects', [])
                contacts = serializer.validated_data['contacts']
                design_preferences = serializer.validated_data['design_preferences']
                profile_photo = serializer.validated_data.get('profile_photo')
            
            # üñºÔ∏è –û–ë–†–ê–ë–û–¢–ö–ê –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ô
            profile_photo_data = None
            diploma_image_url = None
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è –µ—Å–ª–∏ –µ—Å—Ç—å
            if profile_photo:
                logger.info(f"üì∏ –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è –¥–ª—è {request.user.username}")
                photo_result = upload_user_profile_photo(request.user, profile_photo)
                if photo_result:
                    profile_photo_url, ai_analysis = photo_result
                    profile_photo_data = {
                        'url': profile_photo_url,
                        'ai_analysis': ai_analysis
                    }
                    logger.info(f"‚úÖ –§–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è –∑–∞–≥—Ä—É–∂–µ–Ω–æ: {profile_photo_url}")
                else:
                    logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è")
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∏–ø–ª–æ–º –µ—Å–ª–∏ –µ—Å—Ç—å
            diploma_image = education.get('diplomaImage') if isinstance(education, dict) else getattr(education, 'diplomaImage', None)
            if diploma_image:
                logger.info(f"üéì –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∏–ø–ª–æ–º –¥–ª—è {request.user.username}")
                diploma_image_url = upload_user_diploma_image(request.user, diploma_image)
                if diploma_image_url:
                    logger.info(f"‚úÖ –î–∏–ø–ª–æ–º –∑–∞–≥—Ä—É–∂–µ–Ω: {diploma_image_url}")
                else:
                    logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∏–ø–ª–æ–º")
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ
            full_name = f"{personal_info['firstName']} {personal_info['lastName']}"
            portfolio_title = f"–ü–æ—Ä—Ç—Ñ–æ–ª–∏–æ {full_name} - {personal_info['profession']}"
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è AI –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
            request_data = {
                'user': request.user,
                'title': portfolio_title,
                'personal_info': personal_info,
                'education': education,
                'experience': experience,
                'skills': skills,
                'projects': projects,
                'contacts': contacts,
                'design_preferences': design_preferences,
                'profile_photo_data': profile_photo_data,  # –í–∫–ª—é—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ñ–æ—Ç–æ
                'diploma_image_url': diploma_image_url,    # –í–∫–ª—é—á–∞–µ–º URL –¥–∏–ø–ª–æ–º–∞
                'portfolio_type': 'personal'
            }
            
            logger.info(f"üöÄ [PREMIUM AI] –ó–∞–ø—Ä–æ—Å –°–£–ü–ï–† –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç {request.user.username}")
            if profile_photo_data:
                logger.info("üé® + –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–µ —Ñ–æ—Ç–æ –¥–ª—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –¥–∏–∑–∞–π–Ω–∞")
            if diploma_image_url:
                logger.info("üéì + –î–∏–ø–ª–æ–º –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è")
            
            # –°–æ–∑–¥–∞–µ–º AI –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å –æ–¥–Ω–∏–º –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –∑–∞–ø—Ä–æ—Å–æ–º
            generator = SmartAIGenerator()
            result = generator.generate_portfolio_optimized(request_data)
            
            if result['success']:
                logger.info(f"üéâ [PREMIUM AI] ‚úÖ –®–ï–î–ï–í–† —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏ —Å–æ–∑–¥–∞–Ω –¥–ª—è {request.user.username}!")
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø—Ä–µ–º–∏—É–º –ø—Ä–æ—Ü–µ—Å—Å–µ
                response_data = {
                    'success': True,
                    'portfolio': {
                        'id': str(result['portfolio'].id),
                        'title': result['portfolio'].title,
                        'slug': result['portfolio'].slug,
                        'public_url': result['portfolio'].public_url,
                        'is_public': result['portfolio'].is_public,
                        'created_at': result['portfolio'].created_at.isoformat(),
                        'tags': result['portfolio'].tags
                    },
                    'generation_info': {
                        'request_id': result.get('request_id'),
                        'response_time': round(result.get('response_time', 0), 2),
                        'generation_steps': result.get('generation_steps', 7),
                        'enhanced_features': result.get('enhanced_features', []),
                        'process_type': 'premium_7_step_with_images'
                    },
                    'premium_features': {
                        'personal_analysis': True,
                        'career_optimization': True,
                        'skills_highlighting': True,
                        'projects_showcase': True,
                        'unique_design': True,
                        'professional_styling': True,
                        'responsive_layout': True,
                        'profile_photo_integration': profile_photo_data is not None,
                        'diploma_verification': diploma_image_url is not None,
                        'ai_photo_analysis': profile_photo_data is not None
                    },
                    'images_data': {
                        'profile_photo': profile_photo_data,
                        'diploma_image': diploma_image_url,
                        'ai_recommendations': profile_photo_data.get('ai_analysis', {}).get('ai_recommendations', []) if profile_photo_data else []
                    }
                }
                
                return Response(response_data, status=status.HTTP_201_CREATED)
            
            else:
                logger.error(f"üí• [PREMIUM AI] ‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {result.get('error', 'Unknown error')}")
                
                return Response({
                    'success': False,
                    'error': result.get('error', '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —à–µ–¥–µ–≤—Ä–∞'),
                    'error_code': result.get('error_code', 'PREMIUM_ERROR')
                }, status=status.HTTP_500_INTERNAL_SERVER_ERROR)
        
        except Exception as e:
            logger.error(f"üí• [PREMIUM AI] ‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
            
            return Response({
                'success': False,
                'error': '–û—à–∏–±–∫–∞ –ø—Ä–µ–º–∏—É–º –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏. –ù–∞—à–∏ –∏–Ω–∂–µ–Ω–µ—Ä—ã —É–∂–µ —Ä–∞–±–æ—Ç–∞—é—Ç –Ω–∞–¥ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º!',
                'error_code': 'PREMIUM_CRITICAL_ERROR'
            }, status=status.HTTP_500_INTERNAL_SERVER_ERROR)


# –ü—Ä–µ–º–∏—É–º –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º —É–¥–∞–ª–µ–Ω - –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ smart-generate


class GetUserLimitsView(APIView):
    """API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ª–∏–º–∏—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    permission_classes = [permissions.IsAuthenticated]
    
    def get(self, request):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ª–∏–º–∏—Ç–∞—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            user = request.user
            today = timezone.now().date()
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ —Å–µ–≥–æ–¥–Ω—è
            stats, created = AIGenerationStats.objects.get_or_create(
                user=user,
                date=today,
                defaults={
                    'requests_count': 0,
                    'successful_count': 0,
                    'failed_count': 0
                }
            )
            
            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–∏–º–∏—Ç—ã
            daily_limit = 5 if user.is_premium else 0
            used_today = stats.requests_count
            remaining_today = max(0, daily_limit - used_today)
            can_generate = user.is_premium and remaining_today > 0
            
            # –í—Ä–µ–º—è —Å–±—Ä–æ—Å–∞ –ª–∏–º–∏—Ç–∞
            tomorrow = today + timedelta(days=1)
            next_reset = timezone.make_aware(datetime.combine(tomorrow, datetime.min.time()))
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            if not user.is_premium:
                limit_message = "AI –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ Premium –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"
            elif remaining_today == 0:
                limit_message = f"–ò—Å—á–µ—Ä–ø–∞–Ω –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç ({daily_limit}/–¥–µ–Ω—å). –°–±—Ä–æ—Å–∏—Ç—Å—è –∑–∞–≤—Ç—Ä–∞."
            else:
                limit_message = f"–û—Å—Ç–∞–ª–æ—Å—å {remaining_today} –∏–∑ {daily_limit} –≥–µ–Ω–µ—Ä–∞—Ü–∏–π –Ω–∞ —Å–µ–≥–æ–¥–Ω—è"
            
            return Response({
                'success': True,
                'data': {
                    'is_premium': user.is_premium,
                    'daily_limit': daily_limit,
                    'used_today': used_today,
                    'remaining_today': remaining_today,
                    'next_reset': next_reset.isoformat(),
                    'can_generate': can_generate,
                    'limit_message': limit_message
                }
            })
            
        except Exception as e:
            logger.error(f"[LIMITS] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–∏–º–∏—Ç–æ–≤: {str(e)}")
            return Response({
                'success': False,
                'error': '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–∏–º–∏—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'
            }, status=status.HTTP_500_INTERNAL_SERVER_ERROR)


class AIStatsView(APIView):
    """API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ AI"""
    permission_classes = [permissions.IsAuthenticated]
    
    def get(self, request):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ AI"""
        try:
            user = request.user
            
            # –û–±—â–∏–µ –º–µ—Ç—Ä–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            total_requests = AIGenerationRequest.objects.filter(user=user).count()
            total_successful = AIGenerationRequest.objects.filter(user=user, status='success').count()
            total_failed = total_requests - total_successful
            
            success_rate = (total_successful / total_requests * 100) if total_requests > 0 else 0
            
            # –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞
            avg_response_time = AIGenerationRequest.objects.filter(
                user=user, 
                status='success', 
                response_time__isnull=False
            ).aggregate(avg_time=Avg('response_time'))['avg_time'] or 0
            
            # –õ—é–±–∏–º—ã–π —Å—Ç–∏–ª—å
            favorite_style = AIGenerationRequest.objects.filter(user=user).values('style').annotate(
                count=Count('style')
            ).order_by('-count').first()
            
            return Response({
                'success': True,
                'data': {
                    'total_requests': total_requests,
                    'total_successful': total_successful,
                    'total_failed': total_failed,
                    'success_rate': round(success_rate, 1),
                    'average_response_time': round(avg_response_time, 2),
                    'favorite_style': favorite_style['style'] if favorite_style else 'modern'
                }
            })
            
        except Exception as e:
            logger.error(f"[STATS] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}")
            return Response({
                'success': False,
                'error': '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏'
            }, status=status.HTTP_500_INTERNAL_SERVER_ERROR)


class AIGenerationHistoryView(APIView):
    """API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ AI –≥–µ–Ω–µ—Ä–∞—Ü–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    permission_classes = [permissions.IsAuthenticated]
    
    def get(self, request):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–π"""
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 20 –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            requests = AIGenerationRequest.objects.filter(
                user=request.user
            ).select_related('portfolio_created').order_by('-created_at')[:20]
            
            history_data = []
            for req in requests:
                request_data = {
                    'id': req.id,
                    'title': req.title,
                    'prompt': req.prompt[:100] + '...' if len(req.prompt) > 100 else req.prompt,
                    'style': req.style,
                    'status': req.status,
                    'response_time': req.response_time,
                    'created_at': req.created_at.isoformat(),
                    'portfolio': None
                }
                
                if req.portfolio_created:
                    request_data['portfolio'] = {
                        'id': str(req.portfolio_created.id),
                        'slug': req.portfolio_created.slug,
                        'public_url': req.portfolio_created.public_url,
                        'is_public': req.portfolio_created.is_public
                    }
                
                history_data.append(request_data)
            
            return Response({
                'history': history_data,
                'total_requests': AIGenerationRequest.objects.filter(user=request.user).count()
            })
        
        except Exception as e:
            logger.error(f"[HISTORY] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏: {str(e)}")
            
            return Response({
                'error': '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏'
            }, status=status.HTTP_500_INTERNAL_SERVER_ERROR)


class PromptTemplatesView(APIView):
    """API –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —à–∞–±–ª–æ–Ω–∞–º–∏ –ø—Ä–æ–º–ø—Ç–æ–≤"""
    permission_classes = [permissions.IsAuthenticated]
    
    def get(self, request):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–æ–≤ –ø—Ä–æ–º–ø—Ç–æ–≤"""
        try:
            user = request.user
            
            # –ü–æ–ª—É—á–∞–µ–º –ø—É–±–ª–∏—á–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã –∏ —à–∞–±–ª–æ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            templates = AIPromptTemplate.objects.filter(
                Q(is_public=True) | Q(user=user)
            ).order_by('-is_featured', '-usage_count', '-created_at')
            
            # –§–∏–ª—å—Ç—Ä—ã
            category = request.GET.get('category')
            if category:
                templates = templates.filter(category=category)
            
            style = request.GET.get('style')
            if style:
                templates = templates.filter(style=style)
            
            serializer = AIPromptTemplateSerializer(templates, many=True)
            return Response({
                'success': True,
                'data': serializer.data
            })
            
        except Exception as e:
            logger.error(f"[TEMPLATES] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–æ–≤: {str(e)}")
            return Response({
                'success': False,
                'error': '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–æ–≤ –ø—Ä–æ–º–ø—Ç–æ–≤'
            }, status=status.HTTP_500_INTERNAL_SERVER_ERROR)
    
    def post(self, request):
        """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —à–∞–±–ª–æ–Ω–∞ –ø—Ä–æ–º–ø—Ç–∞"""
        try:
            user = request.user
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç —à–∞–±–ª–æ–Ω–æ–≤
            user_templates_count = AIPromptTemplate.objects.filter(user=user).count()
            if user_templates_count >= 20:
                return Response({
                    'success': False,
                    'error': '–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç —à–∞–±–ª–æ–Ω–æ–≤ (–º–∞–∫—Å–∏–º—É–º 20)'
                }, status=status.HTTP_400_BAD_REQUEST)
            
            serializer = AIPromptTemplateSerializer(data=request.data)
            if serializer.is_valid():
                template = serializer.save(user=user)
                
                return Response({
                    'success': True,
                    'data': AIPromptTemplateSerializer(template).data,
                    'message': '–®–∞–±–ª–æ–Ω —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω'
                }, status=status.HTTP_201_CREATED)
            
            return Response({
                'success': False,
                'error': '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ',
                'details': serializer.errors
            }, status=status.HTTP_400_BAD_REQUEST)
            
        except Exception as e:
            logger.error(f"[TEMPLATES] –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —à–∞–±–ª–æ–Ω–∞: {str(e)}")
            return Response({
                'success': False,
                'error': '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —à–∞–±–ª–æ–Ω–∞'
            }, status=status.HTTP_500_INTERNAL_SERVER_ERROR) 