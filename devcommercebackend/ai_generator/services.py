import time
import logging
import re
from typing import Dict, Any
from django.conf import settings
from django.utils import timezone
from django.contrib.auth import get_user_model
from openai import OpenAI
from portfolio.models import Portfolio
from portfolio_templates.models import PortfolioTemplate
from .models import TemplateAIGeneration, TemplateAIStats

logger = logging.getLogger(__name__)
User = get_user_model()


class TemplateAIService:
    """
    ü§ñ –°–ï–†–í–ò–° –î–õ–Ø AI –ó–ê–ü–û–õ–ù–ï–ù–ò–Ø –®–ê–ë–õ–û–ù–û–í
    
    –ü—Ä–∏–Ω–∏–º–∞–µ—Ç HTML —à–∞–±–ª–æ–Ω –∏ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, 
    –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤ OpenAI –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏
    """
    
    def __init__(self):
        self.api_key = settings.OPENAI_API_KEY
        self.model = settings.OPENAI_MODEL
        
        if self.api_key and self.api_key != 'your-openai-api-key-here':
            try:
                self.client = OpenAI(api_key=self.api_key)
                logger.info(f"ü§ñ [AI SERVICE] OpenAI –∫–ª–∏–µ–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            except Exception as e:
                logger.error(f"‚ùå [AI SERVICE] –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ OpenAI: {str(e)}")
                self.client = None
        else:
            self.client = None
            logger.warning(f"‚ö†Ô∏è [AI SERVICE] OpenAI API –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
    
    def generate_personalized_template(
        self, 
        template: PortfolioTemplate, 
        user_data: str,
        project_title: str,
        project_description: str,
        user: User,
        ai_generation: TemplateAIGeneration
    ) -> Dict[str, Any]:
        """
        üéØ –û–°–ù–û–í–ù–û–ô –ú–ï–¢–û–î AI –ó–ê–ü–û–õ–ù–ï–ù–ò–Ø –®–ê–ë–õ–û–ù–ê
        """
        
        if not self.client:
            return {
                'success': False,
                'error': 'AI —Å–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω',
                'error_code': 'AI_SERVICE_UNAVAILABLE'
            }
        
        try:
            start_time = time.time()
            
            # –û—Ç–º–µ—á–∞–µ–º –Ω–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏
            ai_generation.mark_started()
            
            logger.info(f"ü§ñ [AI FILL] –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞ '{template.title}' –¥–ª—è {user.username}")
            
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è AI
            ai_prompt = self._build_template_filling_prompt(
                template_html=template.html_code,
                user_data=user_data,
                project_title=project_title,
                project_description=project_description,
                template_title=template.title
            )
            
            logger.info(f"üìù [AI FILL] –ü—Ä–æ–º–ø—Ç —Å–æ–∑–¥–∞–Ω, –¥–ª–∏–Ω–∞: {len(ai_prompt)} —Å–∏–º–≤–æ–ª–æ–≤")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ OpenAI
            try:
                ai_response = self._call_openai_api(ai_prompt)
                logger.info("‚úÖ [AI FILL] –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç OpenAI")
            except Exception as e:
                error_msg = f"–û—à–∏–±–∫–∞ –≤—ã–∑–æ–≤–∞ OpenAI API: {str(e)}"
                logger.error(f"‚ùå [AI FILL] {error_msg}")
                ai_generation.mark_completed('ai_error', error_message=error_msg)
                return {
                    'success': False,
                    'error': error_msg,
                    'error_code': 'OPENAI_API_ERROR'
                }
            
            # –ü–∞—Ä—Å–∏–º –∏ –≤–∞–ª–∏–¥–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
            try:
                filled_html = self._parse_ai_response(ai_response)
                logger.info("‚úÖ [AI FILL] HTML —É—Å–ø–µ—à–Ω–æ –∏–∑–≤–ª–µ—á–µ–Ω –∏–∑ –æ—Ç–≤–µ—Ç–∞ AI")
            except Exception as e:
                error_msg = f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—Ç–≤–µ—Ç–∞ AI: {str(e)}"
                logger.error(f"‚ùå [AI FILL] {error_msg}")
                ai_generation.mark_completed('invalid_html', error_message=error_msg)
                return {
                    'success': False,
                    'error': error_msg,
                    'error_code': 'AI_RESPONSE_PARSE_ERROR'
                }
            
            # –í–∞–ª–∏–¥–∏—Ä—É–µ–º HTML
            if not self._validate_html(filled_html):
                error_msg = "AI –≤–µ—Ä–Ω—É–ª –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π HTML"
                logger.error(f"‚ùå [AI FILL] {error_msg}")
                ai_generation.mark_completed('invalid_html', error_message=error_msg)
                return {
                    'success': False,
                    'error': error_msg,
                    'error_code': 'INVALID_HTML'
                }
            
            # –°–æ–∑–¥–∞–µ–º –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ–≥–æ —à–∞–±–ª–æ–Ω–∞
            try:
                portfolio = self._create_portfolio_from_filled_template(
                    filled_html=filled_html,
                    original_template=template,
                    project_title=project_title,
                    project_description=project_description,
                    user=user
                )
                logger.info(f"‚úÖ [AI FILL] –ü–æ—Ä—Ç—Ñ–æ–ª–∏–æ —Å–æ–∑–¥–∞–Ω–æ: {portfolio.slug}")
            except Exception as e:
                error_msg = f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ: {str(e)}"
                logger.error(f"‚ùå [AI FILL] {error_msg}")
                ai_generation.mark_completed('failed', error_message=error_msg)
                return {
                    'success': False,
                    'error': error_msg,
                    'error_code': 'PORTFOLIO_CREATION_ERROR'
                }
            
            # –ó–∞–≤–µ—Ä—à–∞–µ–º —É—Å–ø–µ—à–Ω–æ
            end_time = time.time()
            response_time = round(end_time - start_time, 2)
            
            ai_generation.mark_completed(
                status='success',
                portfolio=portfolio,
                generated_html=filled_html
            )
            
            logger.info(f"üéâ [AI FILL] ‚úÖ –£—Å–ø–µ—à–Ω–æ–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞ {response_time}—Å")
            
            return {
                'success': True,
                'portfolio': portfolio,
                'response_time': response_time,
                'ai_generation_id': ai_generation.id
            }
            
        except Exception as e:
            error_msg = f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ AI –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è: {str(e)}"
            logger.error(f"üí• [AI FILL] {error_msg}")
            
            ai_generation.mark_completed('failed', error_message=error_msg)
            
            return {
                'success': False,
                'error': error_msg,
                'error_code': 'CRITICAL_ERROR'
            }
    
    def _build_template_filling_prompt(
        self, 
        template_html: str, 
        user_data: str,
        project_title: str,
        project_description: str,
        template_title: str
    ) -> str:
        """
        üìù –°–û–ó–î–ê–ù–ò–ï –ü–†–û–ú–ü–¢–ê –î–õ–Ø AI –ó–ê–ü–û–õ–ù–ï–ù–ò–Ø –®–ê–ë–õ–û–ù–ê
        """
        
        return f"""–¢—ã - –≠–ö–°–ü–ï–†–¢ –ø–æ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏ HTML —à–∞–±–ª–æ–Ω–æ–≤ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ.

üéØ –ó–ê–î–ê–ß–ê: –ó–∞–ø–æ–ª–Ω–∏ HTML —à–∞–±–ª–æ–Ω —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

üî• HTML –®–ê–ë–õ–û–ù "{template_title}":
{template_html}

üë§ –î–ê–ù–ù–´–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø:
{user_data}

üìã –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –ü–†–û–ï–ö–¢–ï:
–ù–∞–∑–≤–∞–Ω–∏–µ: {project_title}
–û–ø–∏—Å–∞–Ω–∏–µ: {project_description}

üìù –ò–ù–°–¢–†–£–ö–¶–ò–ò:
1. –ù–∞–π–¥–∏ –≤ HTML —Ç–µ–∫—Å—Ç—ã-–ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä—ã (–ò–º—è, –ü—Ä–æ—Ñ–µ—Å—Å–∏—è, –û —Å–µ–±–µ, –ù–∞–≤—ã–∫–∏, –ü—Ä–æ–µ–∫—Ç—ã, –ö–æ–Ω—Ç–∞–∫—Ç—ã –∏ —Ç.–¥.)
2. –ó–∞–º–µ–Ω–∏ –∏—Ö –Ω–∞ –†–ï–ê–õ–¨–ù–´–ï –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
3. –ï—Å–ª–∏ –∫–∞–∫–∏—Ö-—Ç–æ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç - –æ—Å—Ç–∞–≤—å —Ä–∞–∑—É–º–Ω—ã–µ –∑–∞–≥–ª—É—à–∫–∏ –∏–ª–∏ —É–¥–∞–ª–∏ —Å–µ–∫—Ü–∏–∏
4. –ù–ï –º–µ–Ω—è–π —Å—Ç—Ä—É–∫—Ç—É—Ä—É HTML, CSS –∫–ª–∞—Å—Å—ã –∏–ª–∏ JavaScript
5. –°–æ—Ö—Ä–∞–Ω–∏ –≤—Å–µ —Ç–µ–≥–∏, –∞—Ç—Ä–∏–±—É—Ç—ã –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ

üö® –í–ê–ñ–ù–û:
- –û—Ç–≤–µ—Ç—å –¢–û–õ–¨–ö–û HTML –∫–æ–¥–æ–º
- –ù–ï –¥–æ–±–∞–≤–ª—è–π markdown –±–ª–æ–∫–∏ ```html
- –ù–ï –¥–æ–±–∞–≤–ª—è–π –æ–±—ä—è—Å–Ω–µ–Ω–∏—è –∏–ª–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
- –í–µ—Ä–Ω–∏ –í–ï–°–¨ HTML –∫–æ–¥ —Å –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
- HTML –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤–∞–ª–∏–¥–Ω—ã–º –∏ –≥–æ—Ç–æ–≤—ã–º –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é

–ù–ê–ß–ò–ù–ê–ô –° <!DOCTYPE html> –ò –ó–ê–ö–ê–ù–ß–ò–í–ê–ô </html>"""
    
    def _call_openai_api(self, prompt: str) -> Dict[str, Any]:
        """
        üîó –í–´–ó–û–í OPENAI API
        """
        try:
            response = self.client.chat.completions.create(
                model=self.model,
                messages=[
                    {
                        "role": "system",
                        "content": """–¢—ã - –≠–ö–°–ü–ï–†–¢ –ø–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—é HTML —à–∞–±–ª–æ–Ω–æ–≤ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ. 

üéØ –¢–í–û–Ø –ó–ê–î–ê–ß–ê:
- –ü–æ–ª—É—á–∏—Ç—å HTML —à–∞–±–ª–æ–Ω –∏ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
- –ù–∞–π—Ç–∏ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä—ã –≤ HTML (–∏–º–µ–Ω–∞, –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏, –Ω–∞–≤—ã–∫–∏ –∏ —Ç.–¥.)
- –ó–∞–º–µ–Ω–∏—Ç—å –∏—Ö –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
- –í–µ—Ä–Ω—É—Ç—å –¢–û–õ–¨–ö–û –≥–æ—Ç–æ–≤—ã–π HTML –±–µ–∑ –¥–æ–±–∞–≤–ª–µ–Ω–∏–π

‚ö° –ü–†–ê–í–ò–õ–ê:
- –ù–ï –º–µ–Ω—è–π —Å—Ç—Ä—É–∫—Ç—É—Ä—É HTML
- –ù–ï —É–¥–∞–ª—è–π CSS –∫–ª–∞—Å—Å—ã
- –ù–ï –¥–æ–±–∞–≤–ª—è–π markdown –±–ª–æ–∫–∏
- –û—Ç–≤–µ—á–∞–π –¢–û–õ–¨–ö–û HTML –∫–æ–¥–æ–º
- HTML –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤–∞–ª–∏–¥–Ω—ã–º"""
                    },
                    {
                        "role": "user",
                        "content": prompt
                    }
                ],
                temperature=0.7,
                max_tokens=3000
            )
            
            if not response or not response.choices:
                raise ValueError("–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç OpenAI API")
            
            return {
                'content': response.choices[0].message.content,
                'usage': response.usage.dict() if response.usage else {}
            }
            
        except Exception as e:
            raise Exception(f"OpenAI API error: {str(e)}")
    
    def _parse_ai_response(self, ai_response: Dict[str, Any]) -> str:
        """
        üîç –ü–ê–†–°–ò–ù–ì –û–¢–í–ï–¢–ê AI –ò –ò–ó–í–õ–ï–ß–ï–ù–ò–ï HTML
        """
        content = ai_response.get('content', '').strip()
        
        if not content:
            raise ValueError("–ü—É—Å—Ç–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç –≤ –æ—Ç–≤–µ—Ç–µ AI")
        
        # –£–¥–∞–ª—è–µ–º markdown –±–ª–æ–∫–∏ –µ—Å–ª–∏ –µ—Å—Ç—å
        if '```html' in content:
            start = content.find('```html') + 7
            end = content.find('```', start)
            if end != -1:
                content = content[start:end].strip()
            else:
                content = content[start:].strip()
        elif '```' in content:
            # –£–¥–∞–ª—è–µ–º –ª—é–±—ã–µ markdown –±–ª–æ–∫–∏
            content = re.sub(r'```[\s\S]*?```', '', content).strip()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ HTML –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ
        if not content.startswith('<!DOCTYPE html') and not content.startswith('<html'):
            # –ò—â–µ–º –Ω–∞—á–∞–ª–æ HTML –≤ —Ç–µ–∫—Å—Ç–µ
            html_start = content.find('<!DOCTYPE html')
            if html_start == -1:
                html_start = content.find('<html')
            
            if html_start != -1:
                content = content[html_start:].strip()
            else:
                raise ValueError("HTML –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ—Ç–≤–µ—Ç–µ AI")
        
        return content
    
    def _validate_html(self, html_content: str) -> bool:
        """
        ‚úÖ –ë–ê–ó–û–í–ê–Ø –í–ê–õ–ò–î–ê–¶–ò–Ø HTML
        """
        if not html_content.strip():
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ HTML —Ç–µ–≥–∏
        required_tags = ['<html', '</html>', '<head', '</head>', '<body', '</body>']
        for tag in required_tags:
            if tag not in html_content.lower():
                logger.warning(f"‚ö†Ô∏è [VALIDATION] –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ç–µ–≥: {tag}")
                return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –Ω–µ—Ç —è–≤–Ω—ã—Ö –æ—à–∏–±–æ–∫
        if 'error' in html_content.lower() or '–æ—à–∏–±–∫–∞' in html_content.lower():
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –¥–ª–∏–Ω—É
        if len(html_content) < 500:
            logger.warning(f"‚ö†Ô∏è [VALIDATION] HTML —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π: {len(html_content)} —Å–∏–º–≤–æ–ª–æ–≤")
            return False
        
        return True
    
    def _create_portfolio_from_filled_template(
        self,
        filled_html: str,
        original_template: PortfolioTemplate,
        project_title: str,
        project_description: str,
        user: User
    ) -> Portfolio:
        """
        üíº –°–û–ó–î–ê–ù–ò–ï –ü–û–†–¢–§–û–õ–ò–û –ò–ó –ó–ê–ü–û–õ–ù–ï–ù–ù–û–ì–û –®–ê–ë–õ–û–ù–ê
        """
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–≥–∏ –¥–ª—è –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ
        tags = ['ai-generated', 'template-based', original_template.category]
        if original_template.tags:
            tags.extend(original_template.tags[:3])  # –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—ã–µ 3 —Ç–µ–≥–∞ —à–∞–±–ª–æ–Ω–∞
        
        # –°–æ–∑–¥–∞–µ–º –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ
        portfolio = Portfolio.objects.create(
            author=user,
            title=project_title,
            description=project_description,
            html_content=filled_html,
            css_content=original_template.css_code,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º CSS —à–∞–±–ª–æ–Ω–∞
            js_content=original_template.js_code or '',  # –ò—Å–ø–æ–ª—å–∑—É–µ–º JS —à–∞–±–ª–æ–Ω–∞ –µ—Å–ª–∏ –µ—Å—Ç—å
            tags=tags,
            is_public=False  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø—Ä–∏–≤–∞—Ç–Ω–æ–µ
        )
        
        return portfolio
    
    def get_user_ai_stats(self, user: User) -> Dict[str, Any]:
        """
        üìä –ü–û–õ–£–ß–ï–ù–ò–ï –°–¢–ê–¢–ò–°–¢–ò–ö–ò AI –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Ø –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø
        """
        try:
            # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            total_requests = TemplateAIGeneration.objects.filter(user=user).count()
            successful_requests = TemplateAIGeneration.objects.filter(
                user=user, status='success'
            ).count()
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è
            today = timezone.now().date()
            today_stats, _ = TemplateAIStats.objects.get_or_create(
                user=user,
                date=today,
                defaults={
                    'ai_requests_count': 0,
                    'ai_successful_count': 0,
                    'ai_failed_count': 0,
                    'regular_usage_count': 0
                }
            )
            
            return {
                'total_ai_requests': total_requests,
                'total_ai_successful': successful_requests,
                'success_rate': round((successful_requests / total_requests * 100), 1) if total_requests > 0 else 0,
                'today_requests': today_stats.ai_requests_count,
                'today_successful': today_stats.ai_successful_count,
                'remaining_today': max(0, 10 - today_stats.ai_requests_count),
                'regular_usage_today': today_stats.regular_usage_count
            }
            
        except Exception as e:
            logger.error(f"[AI STATS] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}")
            return {
                'total_ai_requests': 0,
                'total_ai_successful': 0,
                'success_rate': 0,
                'today_requests': 0,
                'today_successful': 0,
                'remaining_today': 10,
                'regular_usage_today': 0
            } 