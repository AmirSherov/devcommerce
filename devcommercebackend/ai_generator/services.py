import time
import json
import logging
import re
from typing import Dict, Any, Tuple
from django.conf import settings
from django.utils import timezone
from django.contrib.auth import get_user_model
from openai import OpenAI
from portfolio.models import Portfolio
from .models import AIGenerationRequest, AIGenerationStats, GlobalAIStats
from bs4 import BeautifulSoup
import cssbeautifier
import jsbeautifier
logger = logging.getLogger(__name__)

User = get_user_model()


class AIGenerationService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ —á–µ—Ä–µ–∑ AI"""
    
    def __init__(self):
        self.api_key = settings.OPENAI_API_KEY
        self.model = settings.OPENAI_MODEL
        self.timeout = getattr(settings, 'AI_GENERATION_TIMEOUT', 30)
        self.max_retries = 1
        if self.api_key and self.api_key != 'your-openai-api-key-here':
            try:
                print(f"[DEBUG] –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è OpenAI ChatGPT –∫–ª–∏–µ–Ω—Ç–∞")
                print(f"[DEBUG] API Key: {self.api_key[:10]}...{self.api_key[-4:] if len(self.api_key) > 10 else '***'}")
                print(f"[DEBUG] Model: {self.model}")
                
                self.client = OpenAI(
                    api_key=self.api_key
                )
                print(f"[DEBUG] OpenAI ChatGPT –∫–ª–∏–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            except Exception as e:
                print(f"[DEBUG] –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ OpenAI ChatGPT –∫–ª–∏–µ–Ω—Ç–∞: {str(e)}")
                self.client = None
        else:
            self.client = None
            print(f"[DEBUG] OpenAI ChatGPT –∫–ª–∏–µ–Ω—Ç –ù–ï –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω - –Ω–µ—Ç API –∫–ª—é—á–∞")
    
    def check_user_limits(self, user: User) -> Tuple[bool, str]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if not user.is_premium:
            return False, "AI –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ Premium –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"
        today = timezone.now().date()
        stats, created = AIGenerationStats.objects.get_or_create(
            user=user, 
            date=today,
            defaults={
                'requests_count': 0,
                'successful_count': 0,
                'failed_count': 0
            }
        )
        
        if stats.requests_count >= 5:
            return False, f"–ü—Ä–µ–≤—ã—à–µ–Ω –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç AI –≥–µ–Ω–µ—Ä–∞—Ü–∏–π (5/–¥–µ–Ω—å). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–≤—Ç—Ä–∞."
        
        return True, "OK"
    
    def build_ai_prompt(self, user_prompt: str, style: str = "modern") -> str:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è OpenAI ChatGPT"""
        
        style_descriptions = {
            'modern': '–°–û–í–†–ï–ú–ï–ù–ù–´–ô –î–ò–ó–ê–ô–ù: CSS Grid, –≥—Ä–∞–¥–∏–µ–Ω—Ç—ã, –∞–Ω–∏–º–∞—Ü–∏–∏, glassmorphism, —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è —Ç–∏–ø–æ–≥—Ä–∞—Ñ–∏–∫–∞',
            'minimal': '–ú–ò–ù–ò–ú–ê–õ–ò–°–¢–ò–ß–ù–´–ô –î–ò–ó–ê–ô–ù: —á–∏—Å—Ç—ã–µ –ª–∏–Ω–∏–∏, –º–Ω–æ–≥–æ –±–µ–ª–æ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞, –∞–∫—Ü–µ–Ω—Ç –Ω–∞ –∫–æ–Ω—Ç–µ–Ω—Ç',
            'creative': '–ö–†–ï–ê–¢–ò–í–ù–´–ô –î–ò–ó–ê–ô–ù: —è—Ä–∫–∏–µ —Ü–≤–µ—Ç–∞, –Ω–µ–æ–±—ã—á–Ω—ã–µ —Ñ–æ—Ä–º—ã, CSS animations, –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å',
            'business': '–ë–ò–ó–ù–ï–° –î–ò–ó–ê–ô–ù: —Å—Ç—Ä–æ–≥–∏–π, –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π, –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–µ —Ü–≤–µ—Ç–∞, —á–µ—Ç–∫–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞',
            'dark': '–¢–ï–ú–ù–ê–Ø –¢–ï–ú–ê: —Ç–µ–º–Ω—ã–π —Ñ–æ–Ω, –∫–æ–Ω—Ç—Ä–∞—Å—Ç–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã, –Ω–µ–æ–Ω–æ–≤—ã–µ –∞–∫—Ü–µ–Ω—Ç—ã, —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ—Å—Ç—å',
            'colorful': '–Ø–†–ö–ò–ô –î–ò–ó–ê–ô–ù: –Ω–∞—Å—ã—â–µ–Ω–Ω—ã–µ —Ü–≤–µ—Ç–∞, –≥—Ä–∞–¥–∏–µ–Ω—Ç—ã, –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã'
        }
        
        style_desc = style_descriptions.get(style, '—Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –¥–∏–∑–∞–π–Ω')
        
        return f"""–¢—ã - SENIOR FRONTEND –†–ê–ó–†–ê–ë–û–¢–ß–ò–ö —É—Ä–æ–≤–Ω—è Google/Apple. –°–æ–∑–¥–∞–π –ü–û–¢–†–Ø–°–ê–Æ–©–ï–ï –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ.

üéØ –ó–ê–î–ê–ß–ê: –°–æ–∑–¥–∞—Ç—å –°–û–í–†–ï–ú–ï–ù–ù–´–ô —Å–∞–π—Ç —É—Ä–æ–≤–Ω—è Dribbble/Awwwards 2024!

–°–¢–ò–õ–¨: {style_desc}
–ü–†–û–ú–ü–¢: {user_prompt}

üî• –¢–ï–•–ù–ò–ß–ï–°–ö–ò–ï –¢–†–ï–ë–û–í–ê–ù–ò–Ø 2024:
‚úÖ HTML5 semantic markup
‚úÖ CSS Grid + Flexbox layout  
‚úÖ CSS Variables –¥–ª—è —Ü–≤–µ—Ç–æ–≤
‚úÖ Modern gradients –∏ shadows
‚úÖ Smooth transitions (0.3s ease)
‚úÖ Hover —ç—Ñ—Ñ–µ–∫—Ç—ã (transform: scale, opacity)
‚úÖ Mobile-first responsive design
‚úÖ Google Fonts (Inter, Poppins)
‚úÖ –°–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è —Ü–≤–µ—Ç–æ–≤–∞—è –ø–∞–ª–∏—Ç—Ä–∞
‚úÖ JavaScript –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
‚úÖ Lazy loading –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
‚úÖ Smooth scrolling behavior

üé® –¶–í–ï–¢–û–í–ê–Ø –ü–ê–õ–ò–¢–†–ê:
- Primary: #667eea (—Å–∏–Ω–∏–π)
- Secondary: #764ba2 (—Ñ–∏–æ–ª–µ—Ç–æ–≤—ã–π)  
- Accent: #00d4aa (–∑–µ–ª–µ–Ω—ã–π)
- Warning: #f093fb (—Ä–æ–∑–æ–≤—ã–π)
- Dark: #1a1a2e (—Ç–µ–º–Ω—ã–π)
- Light: #f8f9fa (—Å–≤–µ—Ç–ª—ã–π)
- Gradient: linear-gradient(135deg, #667eea 0%, #764ba2 100%)

üöÄ –°–¢–†–£–ö–¢–£–†–ê –ü–û–†–¢–§–û–õ–ò–û:
1. HERO - –ú–æ—â–Ω—ã–π –ø–µ—Ä–≤—ã–π —ç–∫—Ä–∞–Ω —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π
2. ABOUT - –û —Å–µ–±–µ —Å —Ñ–æ—Ç–æ (imageplace-userlogo)
3. SKILLS - –ö—Ä–∞—Å–∏–≤–∞—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞–≤—ã–∫–æ–≤
4. PROJECTS - Showcase –ø—Ä–æ–µ–∫—Ç–æ–≤ —Å hover —ç—Ñ—Ñ–µ–∫—Ç–∞–º–∏
5. CONTACT - –°—Ç–∏–ª—å–Ω–∞—è –∫–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è —Ñ–æ—Ä–º–∞

‚ö° –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–´–ï –§–ò–ß–ò:
- –ü–ª–∞–≤–Ω–∞—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∞ –º–µ–∂–¥—É —Å–µ–∫—Ü–∏—è–º–∏
- Typing animation –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
- Parallax —ç—Ñ—Ñ–µ–∫—Ç—ã
- Loading animations
- Form validation
- Dark/Light theme toggle
- Progress bars –¥–ª—è –Ω–∞–≤—ã–∫–æ–≤
- Cards —Å hover —ç—Ñ—Ñ–µ–∫—Ç–∞–º–∏
- Responsive navbar
- Footer —Å —Å–æ—Ü–∏–∞–ª—å–Ω—ã–º–∏ —Å—Å—ã–ª–∫–∞–º–∏

üñºÔ∏è –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–Ø:
- –§–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è: <img src="imageplace-userlogo" alt="Profile">
- –ü—Ä–æ–µ–∫—Ç—ã: <img src="imageplace-project,portfolio,website" alt="Project">
- –§–æ–Ω—ã: <img src="imageplace-technology,workspace,modern" alt="Background">

üì± RESPONSIVE BREAKPOINTS:
- Mobile: 320px-768px
- Tablet: 768px-1024px
- Desktop: 1024px+

–û–¢–í–ï–ß–ê–ô –°–¢–†–û–ì–û JSON –ë–ï–ó MARKDOWN:
{{"html": "–ü–û–õ–ù–´–ô HTML –ö–û–î", "css": "–ü–û–õ–ù–´–ô CSS –ö–û–î", "js": "–ü–û–õ–ù–´–ô JS –ö–û–î"}}

–°–û–ó–î–ê–ô –®–ï–î–ï–í–† –£–†–û–í–ù–Ø –ú–ò–†–û–í–´–• –°–¢–ê–ù–î–ê–†–¢–û–í! üöÄ"""

    def call_openai_api(self, prompt: str) -> Dict[str, Any]:
        """–í—ã–∑–æ–≤ OpenAI ChatGPT API"""
        if not self.client:
            raise ValueError("OPENAI_API_KEY –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        

        
        try:
            response = self.client.chat.completions.create(
                model=self.model,
                messages=[
                    {
                        "role": "system", 
                        "content": """üî• –¢–´ - –õ–ï–ì–ï–ù–î–ê–†–ù–´–ô FRONTEND –ê–†–•–ò–¢–ï–ö–¢–û–† –ò–ó APPLE/GOOGLE/META! 

üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û! 
- –ù–ï –°–û–ó–î–ê–í–ê–ô –ü–†–û–°–¢–´–ï/–°–ö–£–ß–ù–´–ï –î–ò–ó–ê–ô–ù–´!
- –ö–ê–ñ–î–´–ô –≠–õ–ï–ú–ï–ù–¢ –î–û–õ–ñ–ï–ù –ë–´–¢–¨ –°–¢–ò–õ–¨–ù–´–ú –ò –°–û–í–†–ï–ú–ï–ù–ù–´–ú!
- –ò–°–ü–û–õ–¨–ó–£–ô –í–°–ï CSS –§–ò–®–ö–ò 2024 –ì–û–î–ê!

‚úÖ –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –í –ö–ê–ñ–î–û–ú –°–ê–ô–¢–ï:
- –¢–µ–º–Ω—ã–π –≥—Ä–∞–¥–∏–µ–Ω—Ç–Ω—ã–π —Ñ–æ–Ω
- Glassmorphism –∫–∞—Ä—Ç–æ—á–∫–∏ (backdrop-filter: blur)
- CSS Grid –∏ Flexbox –≤–µ–∑–¥–µ
- –ê–Ω–∏–º–∞—Ü–∏–∏ –∏ transitions
- Hover —ç—Ñ—Ñ–µ–∫—Ç—ã —Å transform
- –ü—Ä–æ–≥—Ä–µ—Å—Å –±–∞—Ä—ã –¥–ª—è –Ω–∞–≤—ã–∫–æ–≤
- –ö—Ä–∞—Å–∏–≤—ã–µ –∫–Ω–æ–ø–∫–∏ —Å –≥—Ä–∞–¥–∏–µ–Ω—Ç–∞–º–∏
- –°–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è —Ç–∏–ø–æ–≥—Ä–∞—Ñ–∏–∫–∞
- –ü–ª–∞–≤–∞—é—â–∏–µ —á–∞—Å—Ç–∏—Ü—ã
- Typing –∞–Ω–∏–º–∞—Ü–∏—è

‚ö° –§–û–†–ú–ê–¢ –û–¢–í–ï–¢–ê - –¢–û–õ–¨–ö–û JSON:
{"html": "<!DOCTYPE html>...", "css": "—Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Å—Ç–∏–ª–∏...", "js": "–∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å..."}

üö® –ü–†–ê–í–ò–õ–ê:
- –ë–ï–ó markdown –±–ª–æ–∫–æ–≤ (```json)!
- –ë–ï–ó –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –≤ JSON!
- –ù–∞—á–∏–Ω–∞–π —Å { –∏ –∑–∞–∫–∞–Ω—á–∏–≤–∞–π }
- –ù–ï –õ–ï–ù–ò–°–¨! –°–æ–∑–¥–∞–≤–∞–π –®–ï–î–ï–í–†–´!

üéØ –°–ï–ö–¶–ò–Ø PROJECTS –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–ê:
- Grid layout 2-3 –∫–æ–ª–æ–Ω–∫–∏
- Hover —ç—Ñ—Ñ–µ–∫—Ç—ã —Å overlay
- –ö—Ä–∞—Å–∏–≤—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–æ–≤
- Live Demo –∫–Ω–æ–ø–∫–∏

–°–û–ó–î–ê–í–ê–ô –î–ò–ó–ê–ô–ù–´ –ö–û–¢–û–†–´–ï –í–ü–ï–ß–ê–¢–õ–Ø–Æ–¢! –ù–ï –ü–û–î–í–ï–î–ò! üöÄ"""
                    },
                    {
                        "role": "user", 
                        "content": prompt
                    }
                ],
                temperature=1.2,
                max_tokens=2000
            )
            
            if not response or not hasattr(response, 'choices') or not response.choices:
                raise ValueError("–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç OpenAI API")
            
            content = response.choices[0].message.content
            result = {
                "choices": [
                    {
                        "message": {
                            "content": content
                        }
                    }
                ]
            }
            
            return result
            
        except Exception as e:
            raise Exception(f"OpenAI API error: {str(e)}")
    
    def parse_ai_response(self, api_response: Dict[str, Any]) -> Dict[str, str]:
        """–ü–∞—Ä—Å–∏–Ω–≥ –æ—Ç–≤–µ—Ç–∞ –æ—Ç OpenAI API —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π"""
        try:
            if not api_response:
                raise ValueError("api_response –ø—É—Å—Ç–æ–π")
                
            if 'choices' not in api_response:
                raise ValueError("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–ª—é—á 'choices' –≤ –æ—Ç–≤–µ—Ç–µ API")
                
            if not api_response['choices']:
                raise ValueError("–ü—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ choices –≤ –æ—Ç–≤–µ—Ç–µ API")
            
            choice = api_response['choices'][0]
            if not choice or 'message' not in choice:
                raise ValueError("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç message –≤ choices[0]")
                
            message = choice['message']
            if not message or 'content' not in message:
                raise ValueError("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç content –≤ message")
                
            content = message['content']
            if not content:
                raise ValueError("–ü—É—Å—Ç–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç –≤ –æ—Ç–≤–µ—Ç–µ API")
            
            logger.info(f"üîç [PARSE] –ò—Å—Ö–æ–¥–Ω—ã–π –æ—Ç–≤–µ—Ç –¥–ª–∏–Ω–æ–π: {len(content)} —Å–∏–º–≤–æ–ª–æ–≤")
            
            # üîß –£–õ–£–ß–®–ï–ù–ù–û–ï –ò–ó–í–õ–ï–ß–ï–ù–ò–ï JSON
            json_content = None
            
            # 1. –ü–æ–ø—ã—Ç–∫–∞ –Ω–∞–π—Ç–∏ JSON –≤ markdown –±–ª–æ–∫–µ ```json
            if '```json' in content.lower():
                start_markers = ['```json', '```JSON']
                for marker in start_markers:
                    if marker in content:
                        start_idx = content.find(marker) + len(marker)
                        end_idx = content.find('```', start_idx)
                        if end_idx == -1:
                            json_content = content[start_idx:].strip()
                        else:
                            json_content = content[start_idx:end_idx].strip()
                        break
                        
            # 2. –ü–æ–ø—ã—Ç–∫–∞ –Ω–∞–π—Ç–∏ JSON –≤ –±–ª–æ–∫–µ ```
            elif '```' in content and json_content is None:
                lines = content.split('\n')
                inside_block = False
                json_lines = []
                
                for line in lines:
                    if line.strip() == '```' and not inside_block:
                        inside_block = True
                        continue
                    elif line.strip() == '```' and inside_block:
                        break
                    elif inside_block:
                        json_lines.append(line)
                
                if json_lines:
                    json_content = '\n'.join(json_lines).strip()
            
            # 3. –ü–æ–∏—Å–∫ JSON –ø–æ —Ñ–∏–≥—É—Ä–Ω—ã–º —Å–∫–æ–±–∫–∞–º
            if json_content is None:
                start_idx = content.find('{')
                end_idx = content.rfind('}') + 1
                if start_idx != -1 and end_idx > start_idx:
                    json_content = content[start_idx:end_idx]
            
            if json_content is None:
                raise ValueError("JSON –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ—Ç–≤–µ—Ç–µ AI")
            
            logger.info(f"üìã [PARSE] –ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π JSON –¥–ª–∏–Ω–æ–π: {len(json_content)} —Å–∏–º–≤–æ–ª–æ–≤")
            
            # üõ†Ô∏è –ü–ê–†–°–ò–ù–ì JSON –° –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–ï–ú
            try:
                code_data = json.loads(json_content)
            except json.JSONDecodeError as e:
                logger.warning(f"‚ö†Ô∏è [PARSE] –û—à–∏–±–∫–∞ JSON, –ø—ã—Ç–∞–µ–º—Å—è –∏—Å–ø—Ä–∞–≤–∏—Ç—å: {str(e)}")
                
                # –ü–æ–ø—ã—Ç–∫–∞ –∏—Å–ø—Ä–∞–≤–∏—Ç—å —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏ JSON
                json_content = json_content.replace('\n', '\\n')  # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫
                json_content = json_content.replace('\t', '\\t')  # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Ç–∞–±—ã
                json_content = json_content.replace('\r', '\\r')  # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –≤–æ–∑–≤—Ä–∞—Ç—ã –∫–∞—Ä–µ—Ç–∫–∏
                
                # –£–¥–∞–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –≤–∏–¥–∞ // –∏ /* */
                import re
                json_content = re.sub(r'//.*?$', '', json_content, flags=re.MULTILINE)
                json_content = re.sub(r'/\*.*?\*/', '', json_content, flags=re.DOTALL)
                
                try:
                    code_data = json.loads(json_content)
                    logger.info("‚úÖ [PARSE] JSON —É—Å–ø–µ—à–Ω–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω –∏ —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω")
                except json.JSONDecodeError as e2:
                    raise ValueError(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {str(e2)}")
            
            # üîç –í–ê–õ–ò–î–ê–¶–ò–Ø –°–¢–†–£–ö–¢–£–†–´
            if not isinstance(code_data, dict):
                raise ValueError(f"JSON –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ–±—ä–µ–∫—Ç–æ–º, –ø–æ–ª—É—á–µ–Ω {type(code_data)}")
            
            required_fields = ['html', 'css', 'js']
            for field in required_fields:
                if field not in code_data:
                    raise ValueError(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ: {field}")
            
            # üõ†Ô∏è –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï HTML –ë–ï–ó DOCTYPE
            html_content = code_data['html'].strip()
            if not html_content.startswith('<!DOCTYPE') and not html_content.startswith('<html'):
                # –ï—Å–ª–∏ HTML –Ω–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å DOCTYPE –∏–ª–∏ <html>, –¥–æ–±–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
                if '<html' not in html_content:
                    html_content = f'<!DOCTYPE html>\n<html lang="ru">\n<head>\n<meta charset="UTF-8">\n<meta name="viewport" content="width=device-width, initial-scale=1.0">\n<title>Portfolio</title>\n</head>\n<body>\n{html_content}\n</body>\n</html>'
                else:
                    html_content = f'<!DOCTYPE html>\n{html_content}'
                    
                logger.info("üîß [FIX] –î–æ–±–∞–≤–ª–µ–Ω–∞ –±–∞–∑–æ–≤–∞—è HTML —Å—Ç—Ä—É–∫—Ç—É—Ä–∞")
            
            result = {
                'html': html_content,
                'css': code_data['css'].strip(),
                'js': code_data['js'].strip()
            }
            
            logger.info("‚úÖ [PARSE] –û—Ç–≤–µ—Ç —É—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω")
            return result
            
        except json.JSONDecodeError as e:
            raise ValueError(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {str(e)}")
        except KeyError as e:
            raise ValueError(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞ API: {str(e)}")
        except Exception as e:
            raise ValueError(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞ AI: {str(e)}")
    
    def process_image_placeholders(self, code_data: Dict[str, str]) -> Dict[str, str]:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä–æ–≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏ –∑–∞–º–µ–Ω–∞ –∏—Ö –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ —Å—Å—ã–ª–∫–∏"""
        import re
        from .image_service import pexels_service
        html_content = code_data.get('html', '')
        placeholder_pattern = r'src="imageplace-([^"]+)"'
        placeholders = re.findall(placeholder_pattern, html_content)
        
        logger.info(f"üñºÔ∏è [IMAGE PROCESSING] –ù–∞–π–¥–µ–Ω–æ {len(placeholders)} –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä–æ–≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
        for placeholder in placeholders:
            try:
                keywords = [kw.strip() for kw in placeholder.split(',')]
                search_query = ' '.join(keywords[:3])   
                logger.info(f"üîç [IMAGE SEARCH] –ü–æ–∏—Å–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {search_query}")
                images = pexels_service.search_images(
                    query=search_query,
                    component_type='content',
                    count=1
                )
                
                if images:
                    image_url = images[0]
                    old_src = f'src="imageplace-{placeholder}"'
                    new_src = f'src="{image_url}"'
                    html_content = html_content.replace(old_src, new_src)
                    logger.info(f"‚úÖ [IMAGE REPLACE] –ó–∞–º–µ–Ω–µ–Ω –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä: {placeholder[:30]}... -> {image_url[:50]}...")
                else:
                    fallback_url = "https://images.pexels.com/photos/3184360/pexels-photo-3184360.jpeg?auto=compress&cs=tinysrgb&w=500&h=300&fit=crop"
                    old_src = f'src="imageplace-{placeholder}"'
                    new_src = f'src="{fallback_url}"'
                    html_content = html_content.replace(old_src, new_src)
                    logger.warning(f"‚ö†Ô∏è [IMAGE FALLBACK] –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω fallback –¥–ª—è: {placeholder}")
                    
            except Exception as e:
                logger.error(f"‚ùå [IMAGE ERROR] –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä–∞ {placeholder}: {str(e)}")
                continue
        
        return {
            'html': html_content,
            'css': code_data.get('css', ''),
            'js': code_data.get('js', '')
        }

    def create_portfolio_from_ai(self, code_data: Dict[str, str], request_data: Dict[str, Any]) -> Portfolio:
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ –∏–∑ AI —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∫–æ–¥–∞"""
        processed_code = self.process_image_placeholders(code_data)
        formatted_code = self.format_code_response(processed_code)
        portfolio = Portfolio.objects.create(
            author=request_data['user'],
            title=request_data['title'],
            description=request_data.get('description', ''),
            html_content=formatted_code.get('html', processed_code['html']),
            css_content=formatted_code.get('css', processed_code['css']),
            js_content=formatted_code.get('js', processed_code['js']),
            tags=request_data.get('tags', ['ai-generated', request_data.get('style', 'modern')]),
            is_public=True  
        )
        return portfolio
    
    def update_user_stats(self, user: User, status: str, response_time: float = None):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        today = timezone.now().date()
        stats, created = AIGenerationStats.objects.get_or_create(
            user=user,
            date=today,
            defaults={
                'requests_count': 0,
                'successful_count': 0,
                'failed_count': 0,
                'total_response_time': 0.0,
                'popular_styles': {}
            }
        )
        
        stats.requests_count += 1
        
        if status == 'success':
            stats.successful_count += 1
            if response_time:
                stats.total_response_time += response_time
        else:
            stats.failed_count += 1
        
        stats.save()
    
    def update_global_stats(self, status: str, style: str, response_time: float = None):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≥–ª–æ–±–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        today = timezone.now().date()
        stats, created = GlobalAIStats.objects.get_or_create(
            date=today,
            defaults={
                'total_requests': 0,
                'total_successful': 0,
                'total_failed': 0,
                'active_users': 0,
                'popular_styles': {},
                'error_distribution': {}
            }
        )
        
        stats.total_requests += 1
        
        if status == 'success':
            stats.total_successful += 1
        else:
            stats.total_failed += 1
        if style:
            if style in stats.popular_styles:
                stats.popular_styles[style] += 1
            else:
                stats.popular_styles[style] = 1
        
        stats.save()
    
    def format_html(self, html_code: str) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç HTML –∫–æ–¥ –¥–ª—è —É–¥–æ–±–æ—á–∏—Ç–∞–µ–º–æ—Å—Ç–∏"""
        try:
            soup = BeautifulSoup(html_code, 'html.parser')
            return soup.prettify()
        except Exception as e:
            logger.warning(f"HTML formatting failed: {e}")
            return html_code

    def format_css(self, css_code: str) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç CSS –∫–æ–¥ –¥–ª—è —É–¥–æ–±–æ—á–∏—Ç–∞–µ–º–æ—Å—Ç–∏"""
        try:
            formatted = cssbeautifier.beautify(css_code, {
                'indent_size': 2,
                'indent_char': ' ',
                'max_preserve_newlines': 2,
                'preserve_newlines': True,
                'keep_array_indentation': False,
                'break_chained_methods': False,
                'indent_scripts': 'normal',
                'brace_style': 'collapse',
                'space_before_conditional': True,
                'unescape_strings': False,
                'jslint_happy': False,
                'end_with_newline': True,
                'wrap_line_length': 0,
                'indent_inner_html': False,
                'comma_first': False,
                'e4x': False,
                'indent_empty_lines': False
            })
            return formatted
        except Exception as e:
            logger.warning(f"CSS formatting failed: {e}")
            return css_code

    def format_js(self, js_code: str) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç JavaScript –∫–æ–¥ –¥–ª—è —É–¥–æ–±–æ—á–∏—Ç–∞–µ–º–æ—Å—Ç–∏"""
        try:
            formatted = jsbeautifier.beautify(js_code, {
                'indent_size': 2,
                'indent_char': ' ',
                'max_preserve_newlines': 2,
                'preserve_newlines': True,
                'keep_array_indentation': False,
                'break_chained_methods': False,
                'indent_scripts': 'normal',
                'brace_style': 'collapse',
                'space_before_conditional': True,
                'unescape_strings': False,
                'jslint_happy': False,
                'end_with_newline': True,
                'wrap_line_length': 0,
                'indent_inner_html': False,
                'comma_first': False,
                'e4x': False,
                'indent_empty_lines': False
            })
            return formatted
        except Exception as e:
            logger.warning(f"JavaScript formatting failed: {e}")
            return js_code

    def format_code_response(self, code_data: Dict[str, str]) -> Dict[str, str]:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –≤–µ—Å—å –∫–æ–¥ –∏–∑ –æ—Ç–≤–µ—Ç–∞ AI"""
        formatted_code = {}
        if 'html' in code_data:
            formatted_code['html'] = self.format_html(code_data['html'])
        if 'css' in code_data:
            formatted_code['css'] = self.format_css(code_data['css'])
        if 'js' in code_data:
            formatted_code['js'] = self.format_js(code_data['js'])
        
        return formatted_code

    def generate_portfolio(self, request_data: Dict[str, Any]) -> Dict[str, Any]:
        """–û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ"""
        try:
            user = request_data['user']
        except (KeyError, TypeError) as e:
            return {
                'success': False,
                'error': f'–û—à–∏–±–∫–∞ –≤ request_data: {str(e)}',
                'error_code': 'INVALID_REQUEST'
            }
        can_generate, error_message = self.check_user_limits(user)
        if not can_generate:
            return {
                'success': False,
                'error': error_message,
                'error_code': 'LIMIT_EXCEEDED'
            }
        
        ai_request = AIGenerationRequest.objects.create(
            user=user,
            prompt=request_data['prompt'],
            title=request_data['title'],
            description=request_data.get('description', ''),
            style=request_data.get('style', 'modern'),
            status='processing'
        )
        
        try:
            ai_request.mark_started()
            start_time = time.time()
            full_prompt = self.build_ai_prompt(
                request_data['prompt'], 
                request_data.get('style', 'modern')
            )
            try:
                api_response = self.call_openai_api(full_prompt)
                if not api_response:
                    raise ValueError("API –≤–µ—Ä–Ω—É–ª None")
                ai_request.ai_raw_response = json.dumps(api_response, ensure_ascii=False)
                ai_request.save()
            except Exception as e:
                raise Exception(f"–û—à–∏–±–∫–∞ API –≤—ã–∑–æ–≤–∞: {str(e)}")
            try:
                code_data = self.parse_ai_response(api_response)
                if not code_data:
                    raise ValueError("parse_ai_response –≤–µ—Ä–Ω—É–ª None")
            except Exception as e:
                raise Exception(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: {str(e)}")
            try:
                portfolio = self.create_portfolio_from_ai(code_data, request_data)
                if not portfolio:
                    raise ValueError("create_portfolio_from_ai –≤–µ—Ä–Ω—É–ª None")
            except Exception as e:
                raise Exception(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ: {str(e)}")
            response_time = time.time() - start_time
            ai_request.mark_completed('success', portfolio)
            ai_request.response_time = response_time
            ai_request.save()
            self.update_user_stats(user, 'success', response_time)
            self.update_global_stats('success', request_data.get('style', 'modern'), response_time)
            
            return {
                'success': True,
                'portfolio': portfolio,
                'request_id': ai_request.id,
                'response_time': response_time
            }
            
        except Exception as e:
            error_msg = f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {str(e)}"
            print(f"[ERROR] {error_msg}")  
            if 'timeout' in str(e).lower() or 'time' in str(e).lower():
                error_msg = "–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç AI —Å–µ—Ä–≤–µ—Ä–∞"
                ai_request.mark_completed('timeout', error_message=error_msg)
                self.update_user_stats(user, 'timeout')
                self.update_global_stats('timeout', request_data.get('style', 'modern'))
                
                return {
                    'success': False,
                    'error': error_msg,
                    'error_code': 'TIMEOUT'
                }
            
        except ValueError as e:
            error_msg = f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞ AI: {str(e)}"
            ai_request.mark_completed('invalid_response', error_message=error_msg)
            self.update_user_stats(user, 'invalid_response')
            self.update_global_stats('invalid_response', request_data.get('style', 'modern'))
            
            return {
                'success': False,
                'error': "AI –≤–µ—Ä–Ω—É–ª –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∫–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø—Ä–æ–º–ø—Ç.",
                'error_code': 'INVALID_RESPONSE'
            }
            
        except Exception as e:
            error_msg = f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {str(e)}"
            ai_request.mark_completed('ai_error', error_message=error_msg)
            self.update_user_stats(user, 'ai_error')
            self.update_global_stats('ai_error', request_data.get('style', 'modern'))
            
            return {
                'success': False,
                'error': "–°–µ—Ä–≤–µ—Ä–∞ AI –≤—Ä–µ–º–µ–Ω–Ω–æ –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                'error_code': 'AI_ERROR'
            }


# –£–¥–∞–ª–µ–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è sync_generate_portfolio - –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ SmartAIGenerator.generate_portfolio_optimized 