import logging
import time
from datetime import datetime, timedelta
from typing import Dict, Any

from django.db.models import Sum, Count, Q
from django.utils import timezone
from django.contrib.auth import get_user_model
from django.shortcuts import get_object_or_404
from django.core.exceptions import PermissionDenied, ValidationError

from rest_framework.views import APIView
from rest_framework.decorators import api_view, permission_classes
from rest_framework.response import Response
from rest_framework import status, permissions
from rest_framework.exceptions import PermissionDenied as DRFPermissionDenied

from .models import (
    StorageContainer, StorageFile, UserStorageUsage, StorageAPILog
)
from .serializers import (
    StorageContainerSerializer, StorageContainerCreateSerializer,
    StorageFileSerializer, StorageFileUploadSerializer, StorageFileListSerializer,
    UserStorageUsageSerializer, StorageLimitsSerializer, StorageStatsSerializer,
    StorageAPILogSerializer
)
from .s3_utils import (
    upload_file_to_s3, delete_file_from_s3, get_file_url_from_s3,
    file_exists_in_s3, get_file_info_from_s3, get_bucket_size_from_s3
)
import os

logger = logging.getLogger(__name__)
User = get_user_model()


class StorageContainerView(APIView):
    """
    üì¶ API –î–õ–Ø –£–ü–†–ê–í–õ–ï–ù–ò–Ø –ö–û–ù–¢–ï–ô–ù–ï–†–ê–ú–ò –•–†–ê–ù–ò–õ–ò–©–ê
    
    GET /api/storage/containers/ - —Å–ø–∏—Å–æ–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    POST /api/storage/containers/ - —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
    """
    permission_classes = [permissions.IsAuthenticated]
    
    def get(self, request):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ª—å–∫–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            containers = StorageContainer.objects.filter(
                user=request.user,
                is_active=True
            ).order_by('-created_at')
            
            # –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
            for container in containers:
                self._recalculate_container_stats(container)
            
            serializer = StorageContainerSerializer(containers, many=True)
            
            return Response({
                'success': True,
                'containers': serializer.data,
                'total_containers': containers.count()
            })
            
        except Exception as e:
            logger.error(f"[STORAGE CONTAINERS] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤: {str(e)}")
            return Response({
                'success': False,
                'error': '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤'
            }, status=status.HTTP_500_INTERNAL_SERVER_ERROR)
    
    def post(self, request):
        """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            can_create, limit_message = self._check_container_limits(request.user)
            if not can_create:
                return Response({
                    'success': False,
                    'error': limit_message,
                    'error_code': 'CONTAINER_LIMIT_EXCEEDED'
                }, status=status.HTTP_429_TOO_MANY_REQUESTS)
            
            # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
            serializer = StorageContainerCreateSerializer(data=request.data)
            if not serializer.is_valid():
                return Response({
                    'success': False,
                    'error': '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ',
                    'details': serializer.errors
                }, status=status.HTTP_400_BAD_REQUEST)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –∏–º–µ–Ω–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            name = serializer.validated_data['name']
            if StorageContainer.objects.filter(user=request.user, name=name).exists():
                return Response({
                    'success': False,
                    'error': '–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç',
                    'error_code': 'CONTAINER_NAME_EXISTS'
                }, status=status.HTTP_400_BAD_REQUEST)
            
            # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
            container = StorageContainer.objects.create(
                user=request.user,
                name=name,
                is_public=serializer.validated_data.get('is_public', False)
            )
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            self._update_user_stats(request.user, 'container_created')
            
            logger.info(f"[STORAGE CONTAINER] –°–æ–∑–¥–∞–Ω –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä '{name}' –¥–ª—è {request.user.username}")
            
            return Response({
                'success': True,
                'container': StorageContainerSerializer(container).data,
                'message': '–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω'
            }, status=status.HTTP_201_CREATED)
            
        except Exception as e:
            logger.error(f"[STORAGE CONTAINER] –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞: {str(e)}")
            return Response({
                'success': False,
                'error': '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞'
            }, status=status.HTTP_500_INTERNAL_SERVER_ERROR)
    
    def _check_container_limits(self, user: User) -> tuple[bool, str]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–æ–≤ –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤"""
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        containers_count = StorageContainer.objects.filter(
            user=user, 
            is_active=True
        ).count()
        
        # –õ–∏–º–∏—Ç—ã –ø–æ –ø–ª–∞–Ω–∞–º
        if user.plan == 'pro':
            max_containers = 100  # Pro: 100 –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
        elif user.plan == 'premium':
            max_containers = 50  # Premium: 50 –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
        else:
            max_containers = 10  # Standard: 10 –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
        
        if containers_count >= max_containers:
            return False, f"–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ ({max_containers}). –£–¥–∞–ª–∏—Ç–µ –Ω–µ–Ω—É–∂–Ω—ã–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã."
        
        return True, f"–ú–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –µ—â–µ {max_containers - containers_count} –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤"
    
    def _update_user_stats(self, user: User, action: str):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        today = timezone.now().date()
        
        usage, created = UserStorageUsage.objects.get_or_create(
            user=user,
            date=today,
            defaults={
                'bytes_used': 0,
                'files_count': 0,
                'containers_count': 0,
                'uploads_count': 0,
                'uploads_size': 0,
                'deletions_count': 0,
                'deletions_size': 0,
                'file_types_stats': {}
            }
        )
        
        if action == 'container_created':
            usage.containers_count += 1
        
        usage.save()
    
    def _recalculate_container_stats(self, container):
        """–ü–µ—Ä–µ—Å—á–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —Ñ–∞–π–ª—ã –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ
            files = StorageFile.objects.filter(
                container=container,
                is_active=True
            )
            
            # –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            files_count = files.count()
            total_size = files.aggregate(total=Sum('file_size'))['total'] or 0
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å
            if container.files_count != files_count or container.total_size != total_size:
                container.files_count = files_count
                container.total_size = total_size
                container.save()
                logger.info(f"[STORAGE CONTAINER] –ü–µ—Ä–µ—Å—á–∏—Ç–∞–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ '{container.name}': {files_count} —Ñ–∞–π–ª–æ–≤, {total_size} –±–∞–π—Ç")
                
        except Exception as e:
            logger.error(f"[STORAGE CONTAINER] –û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å—á–µ—Ç–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}")


class StorageContainerDetailView(APIView):
    """
    üì¶ API –î–õ–Ø –£–ü–†–ê–í–õ–ï–ù–ò–Ø –ö–û–ù–ö–†–ï–¢–ù–´–ú –ö–û–ù–¢–ï–ô–ù–ï–†–û–ú
    
    GET /api/storage/containers/{id}/ - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ
    PUT /api/storage/containers/{id}/ - –æ–±–Ω–æ–≤–∏—Ç—å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
    DELETE /api/storage/containers/{id}/ - —É–¥–∞–ª–∏—Ç—å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
    """
    permission_classes = [permissions.IsAuthenticated]
    
    def get(self, request, container_id):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
            container = get_object_or_404(
                StorageContainer,
                id=container_id,
                user=request.user,
                is_active=True
            )
            
            # –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
            self._recalculate_container_stats(container)
            
            serializer = StorageContainerSerializer(container)
            
            return Response({
                'success': True,
                'container': serializer.data
            })
            
        except Exception as e:
            logger.error(f"[STORAGE CONTAINER DETAIL] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞: {str(e)}")
            return Response({
                'success': False,
                'error': '–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω'
            }, status=status.HTTP_404_NOT_FOUND)
    
    def _recalculate_container_stats(self, container):
        """–ü–µ—Ä–µ—Å—á–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —Ñ–∞–π–ª—ã –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ
            files = StorageFile.objects.filter(
                container=container,
                is_active=True
            )
            
            # –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            files_count = files.count()
            total_size = files.aggregate(total=Sum('file_size'))['total'] or 0
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å
            if container.files_count != files_count or container.total_size != total_size:
                container.files_count = files_count
                container.total_size = total_size
                container.save()
                logger.info(f"[STORAGE CONTAINER] –ü–µ—Ä–µ—Å—á–∏—Ç–∞–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ '{container.name}': {files_count} —Ñ–∞–π–ª–æ–≤, {total_size} –±–∞–π—Ç")
                
        except Exception as e:
            logger.error(f"[STORAGE CONTAINER] –û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å—á–µ—Ç–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}")
    
    def put(self, request, container_id):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
            container = get_object_or_404(
                StorageContainer,
                id=container_id,
                user=request.user,
                is_active=True
            )
            
            # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
            serializer = StorageContainerCreateSerializer(data=request.data, partial=True)
            if not serializer.is_valid():
                return Response({
                    'success': False,
                    'error': '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ',
                    'details': serializer.errors
                }, status=status.HTTP_400_BAD_REQUEST)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –∏–º–µ–Ω–∏ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏
            if 'name' in serializer.validated_data:
                new_name = serializer.validated_data['name']
                if StorageContainer.objects.filter(
                    user=request.user, 
                    name=new_name
                ).exclude(id=container_id).exists():
                    return Response({
                        'success': False,
                        'error': '–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç',
                        'error_code': 'CONTAINER_NAME_EXISTS'
                    }, status=status.HTTP_400_BAD_REQUEST)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
            for field, value in serializer.validated_data.items():
                setattr(container, field, value)
            container.save()
            
            logger.info(f"[STORAGE CONTAINER] –û–±–Ω–æ–≤–ª–µ–Ω –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä '{container.name}' –¥–ª—è {request.user.username}")
            
            return Response({
                'success': True,
                'container': StorageContainerSerializer(container).data,
                'message': '–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω'
            })
            
        except Exception as e:
            logger.error(f"[STORAGE CONTAINER DETAIL] –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞: {str(e)}")
            return Response({
                'success': False,
                'error': '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞'
            }, status=status.HTTP_500_INTERNAL_SERVER_ERROR)
    
    def delete(self, request, container_id):
        """–£–¥–∞–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
            container = get_object_or_404(
                StorageContainer,
                id=container_id,
                user=request.user,
                is_active=True
            )
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ñ–∞–π–ª—ã –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ
            if container.files_count > 0:
                return Response({
                    'success': False,
                    'error': '–ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å —Ñ–∞–π–ª–∞–º–∏. –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª–∏—Ç–µ –≤—Å–µ —Ñ–∞–π–ª—ã.',
                    'error_code': 'CONTAINER_HAS_FILES'
                }, status=status.HTTP_400_BAD_REQUEST)
            
            # –£–¥–∞–ª—è–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä (–º—è–≥–∫–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ)
            container.is_active = False
            container.save()
            
            logger.info(f"[STORAGE CONTAINER] –£–¥–∞–ª–µ–Ω –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä '{container.name}' –¥–ª—è {request.user.username}")
            
            return Response({
                'success': True,
                'message': '–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω'
            })
            
        except Exception as e:
            logger.error(f"[STORAGE CONTAINER DETAIL] –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞: {str(e)}")
            return Response({
                'success': False,
                'error': '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞'
            }, status=status.HTTP_500_INTERNAL_SERVER_ERROR)


class StorageFileUploadView(APIView):
    """
    üìÅ API –î–õ–Ø –ó–ê–ì–†–£–ó–ö–ò –§–ê–ô–õ–û–í
    
    POST /api/storage/containers/{id}/upload/ - –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
    """
    permission_classes = [permissions.IsAuthenticated]
    
    def post(self, request, container_id):
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
            container = get_object_or_404(
                StorageContainer,
                id=container_id,
                user=request.user,
                is_active=True
            )
            
            # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∑–∫–∏
            serializer = StorageFileUploadSerializer(data=request.data)
            if not serializer.is_valid():
                return Response({
                    'success': False,
                    'error': '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ',
                    'details': serializer.errors
                }, status=status.HTTP_400_BAD_REQUEST)
            
            uploaded_file = serializer.validated_data['file']
            custom_filename = serializer.validated_data.get('filename')
            is_public = serializer.validated_data.get('is_public', False)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã —Ñ–∞–π–ª–æ–≤
            can_upload, limit_message = self._check_file_limits(request.user, uploaded_file.size)
            if not can_upload:
                return Response({
                    'success': False,
                    'error': limit_message,
                    'error_code': 'FILE_LIMIT_EXCEEDED'
                }, status=status.HTTP_429_TOO_MANY_REQUESTS)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
            max_file_size = 100 * 1024 * 1024  # 100MB –º–∞–∫—Å–∏–º—É–º
            if uploaded_file.size > max_file_size:
                return Response({
                    'success': False,
                    'error': f'–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: {max_file_size // (1024*1024)}MB',
                    'error_code': 'FILE_TOO_LARGE'
                }, status=status.HTTP_400_BAD_REQUEST)
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞
            filename = custom_filename or uploaded_file.name
            if StorageFile.objects.filter(container=container, filename=filename).exists():
                # –î–æ–±–∞–≤–ª—è–µ–º —Å—É—Ñ—Ñ–∏–∫—Å –µ—Å–ª–∏ —Ñ–∞–π–ª —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                name, ext = os.path.splitext(filename)
                counter = 1
                while StorageFile.objects.filter(container=container, filename=f"{name}_{counter}{ext}").exists():
                    counter += 1
                filename = f"{name}_{counter}{ext}"
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º S3 –∫–ª—é—á –¥–ª—è —Ñ–∞–π–ª–∞
            s3_key = f"users/{request.user.id}/containers/{container.id}/{filename}"
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª –≤ S3
            upload_result = upload_file_to_s3(
                file_obj=uploaded_file,
                file_name=filename,
                container_name=f"user_{request.user.id}_container_{container.id}",
                content_type=uploaded_file.content_type
            )
            
            if not upload_result['success']:
                return Response({
                    'success': False,
                    'error': f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤ S3: {upload_result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}",
                    'error_code': 'S3_UPLOAD_ERROR'
                }, status=status.HTTP_500_INTERNAL_SERVER_ERROR)
            
            # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            storage_file = StorageFile.objects.create(
                container=container,
                filename=filename,
                original_filename=uploaded_file.name,
                s3_key=upload_result['s3_key'],
                file_size=uploaded_file.size,
                mime_type=uploaded_file.content_type,
                is_public=is_public,
                file_url=upload_result['file_url']
            )
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
            container.files_count += 1
            container.total_size += uploaded_file.size
            container.save()
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            self._update_user_stats(request.user, 'file_uploaded', uploaded_file.size)
            
            logger.info(f"[STORAGE UPLOAD] –ó–∞–≥—Ä—É–∂–µ–Ω —Ñ–∞–π–ª '{filename}' –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä '{container.name}' –¥–ª—è {request.user.username}")
            
            return Response({
                'success': True,
                'file': StorageFileSerializer(storage_file).data,
                'message': '–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω'
            }, status=status.HTTP_201_CREATED)
            
        except Exception as e:
            logger.error(f"[STORAGE UPLOAD] –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞: {str(e)}")
            return Response({
                'success': False,
                'error': '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞'
            }, status=status.HTTP_500_INTERNAL_SERVER_ERROR)
    
    def _check_file_limits(self, user: User, file_size: int) -> tuple[bool, str]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–æ–≤ –Ω–∞ –∑–∞–≥—Ä—É–∑–∫—É —Ñ–∞–π–ª–æ–≤"""
        today = timezone.now().date()
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ —Å–µ–≥–æ–¥–Ω—è
        usage, created = UserStorageUsage.objects.get_or_create(
            user=user,
            date=today,
            defaults={
                'bytes_used': 0,
                'files_count': 0,
                'containers_count': 0,
                'uploads_count': 0,
                'uploads_size': 0,
                'deletions_count': 0,
                'deletions_size': 0,
                'file_types_stats': {}
            }
        )
        
        # –õ–∏–º–∏—Ç—ã –ø–æ –ø–ª–∞–Ω–∞–º (—Ç–æ–ª—å–∫–æ –æ–±—â–∏–π –æ–±—ä–µ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–∞)
        if user.plan == 'pro':
            storage_limit = float('inf')  # –ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
        elif user.plan == 'premium':
            storage_limit = 5 * 1024 * 1024 * 1024  # 5GB –æ–±—â–µ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
        else:
            storage_limit = 100 * 1024 * 1024  # 100MB –æ–±—â–µ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ –æ–±—â–∏–π –ª–∏–º–∏—Ç —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ (—É–±–∏—Ä–∞–µ–º –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç)
        if user.plan != 'pro' and usage.bytes_used + file_size > storage_limit:
            return False, f"–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ ({storage_limit // (1024*1024)}MB)"
        
        return True, "–ú–æ–∂–Ω–æ –∑–∞–≥—Ä—É–∂–∞—Ç—å —Ñ–∞–π–ª"
    
    def _update_user_stats(self, user: User, action: str, file_size: int = 0):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        today = timezone.now().date()
        
        usage, created = UserStorageUsage.objects.get_or_create(
            user=user,
            date=today,
            defaults={
                'bytes_used': 0,
                'files_count': 0,
                'containers_count': 0,
                'uploads_count': 0,
                'uploads_size': 0,
                'deletions_count': 0,
                'deletions_size': 0,
                'file_types_stats': {}
            }
        )
        
        if action == 'file_uploaded':
            usage.uploads_count += 1
            usage.uploads_size += file_size
            usage.bytes_used += file_size
            usage.files_count += 1
        
        usage.save()


class StorageFileListView(APIView):
    """
    üìÅ API –î–õ–Ø –ü–û–õ–£–ß–ï–ù–ò–Ø –°–ü–ò–°–ö–ê –§–ê–ô–õ–û–í
    
    GET /api/storage/containers/{id}/files/ - —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ
    """
    permission_classes = [permissions.IsAuthenticated]
    
    def get(self, request, container_id):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤ –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
            container = get_object_or_404(
                StorageContainer,
                id=container_id,
                user=request.user,
                is_active=True
            )
            
            # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª—ã —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
            page = int(request.GET.get('page', 1))
            page_size = min(int(request.GET.get('page_size', 20)), 100)  # –ú–∞–∫—Å–∏–º—É–º 100 —Ñ–∞–π–ª–æ–≤ –∑–∞ —Ä–∞–∑
            
            files = StorageFile.objects.filter(
                container=container,
                is_active=True
            ).order_by('-created_at')
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–∞–≥–∏–Ω–∞—Ü–∏—é
            start = (page - 1) * page_size
            end = start + page_size
            files_page = files[start:end]
            
            serializer = StorageFileListSerializer(files_page, many=True)
            
            return Response({
                'success': True,
                'files': serializer.data,
                'pagination': {
                    'page': page,
                    'page_size': page_size,
                    'total_files': files.count(),
                    'total_pages': (files.count() + page_size - 1) // page_size
                }
            })
            
        except Exception as e:
            logger.error(f"[STORAGE FILES] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤: {str(e)}")
            return Response({
                'success': False,
                'error': '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤'
            }, status=status.HTTP_500_INTERNAL_SERVER_ERROR)


class StorageFileDetailView(APIView):
    """
    üìÅ API –î–õ–Ø –£–ü–†–ê–í–õ–ï–ù–ò–Ø –ö–û–ù–ö–†–ï–¢–ù–´–ú –§–ê–ô–õ–û–ú
    
    GET /api/storage/files/{id}/ - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∞–π–ª–µ
    DELETE /api/storage/files/{id}/ - —É–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª
    """
    permission_classes = [permissions.IsAuthenticated]
    
    def get(self, request, file_id):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–∞–π–ª–µ"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
            storage_file = get_object_or_404(
                StorageFile,
                id=file_id,
                container__user=request.user,
                container__is_active=True,
                is_active=True
            )
            
            serializer = StorageFileSerializer(storage_file)
            
            return Response({
                'success': True,
                'file': serializer.data
            })
            
        except Exception as e:
            logger.error(f"[STORAGE FILE DETAIL] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {str(e)}")
            return Response({
                'success': False,
                'error': '–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω'
            }, status=status.HTTP_404_NOT_FOUND)
    
    def delete(self, request, file_id):
        """–£–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
            storage_file = get_object_or_404(
                StorageFile,
                id=file_id,
                container__user=request.user,
                container__is_active=True,
                is_active=True
            )
            
            # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª –∏–∑ S3
            delete_result = delete_file_from_s3(storage_file.s3_key)
            
            if not delete_result['success']:
                logger.warning(f"[STORAGE DELETE] –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ S3: {delete_result.get('error')}")
                # –î–∞–∂–µ –µ—Å–ª–∏ S3 —É–¥–∞–ª–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å, –ø–æ–º–µ—á–∞–µ–º –∫–∞–∫ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–π –≤ –ë–î
                # —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø—Ä–æ–±–ª–µ–º —Å –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å—é
            
            # –ü–æ–º–µ—á–∞–µ–º —Ñ–∞–π–ª –∫–∞–∫ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–π
            storage_file.is_active = False
            storage_file.save()
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
            container = storage_file.container
            container.files_count -= 1
            container.total_size -= storage_file.file_size
            container.save()
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            self._update_user_stats(request.user, 'file_deleted', storage_file.file_size)
            
            logger.info(f"[STORAGE FILE] –£–¥–∞–ª–µ–Ω —Ñ–∞–π–ª '{storage_file.filename}' –¥–ª—è {request.user.username}")
            
            return Response({
                'success': True,
                'message': '–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω'
            })
            
        except Exception as e:
            logger.error(f"[STORAGE FILE DETAIL] –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {str(e)}")
            return Response({
                'success': False,
                'error': '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞'
            }, status=status.HTTP_500_INTERNAL_SERVER_ERROR)
    
    def _update_user_stats(self, user: User, action: str, file_size: int = 0):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        today = timezone.now().date()
        
        usage, created = UserStorageUsage.objects.get_or_create(
            user=user,
            date=today,
            defaults={
                'bytes_used': 0,
                'files_count': 0,
                'containers_count': 0,
                'uploads_count': 0,
                'uploads_size': 0,
                'deletions_count': 0,
                'deletions_size': 0,
                'file_types_stats': {}
            }
        )
        
        if action == 'file_deleted':
            usage.deletions_count += 1
            usage.deletions_size += file_size
            usage.bytes_used -= file_size
            usage.files_count -= 1
        
        usage.save()


class StorageLimitsView(APIView):
    """
    üìä API –î–õ–Ø –ü–û–õ–£–ß–ï–ù–ò–Ø –õ–ò–ú–ò–¢–û–í –•–†–ê–ù–ò–õ–ò–©–ê
    
    GET /api/storage/limits/ - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ª–∏–º–∏—Ç–∞—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    permission_classes = [permissions.IsAuthenticated]
    
    def get(self, request):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ª–∏–º–∏—Ç–∞—Ö —Ö—Ä–∞–Ω–∏–ª–∏—â–∞"""
        try:
            user = request.user
            today = timezone.now().date()
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ —Å–µ–≥–æ–¥–Ω—è
            usage, created = UserStorageUsage.objects.get_or_create(
                user=user,
                date=today,
                defaults={
                    'bytes_used': 0,
                    'files_count': 0,
                    'containers_count': 0,
                    'uploads_count': 0,
                    'uploads_size': 0,
                    'deletions_count': 0,
                    'deletions_size': 0,
                    'file_types_stats': {}
                }
            )
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–ª–∞–Ω –∏ –ª–∏–º–∏—Ç—ã
            plan = user.plan
            if user.plan == 'pro':
                storage_limit_mb = float('inf')  # –ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
                api_access = True
            elif user.plan == 'premium':
                storage_limit_mb = 5 * 1024  # 5GB
                api_access = False
            else:
                storage_limit_mb = 100  # 100MB
                api_access = False
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è Pro –ø–ª–∞–Ω–∞
            if storage_limit_mb == float('inf'):
                storage_limit_gb = float('inf')
                storage_used_mb = usage.bytes_used / (1024 * 1024)
                storage_used_gb = storage_used_mb / 1024
                storage_remaining_mb = float('inf')
                storage_remaining_gb = float('inf')
                usage_percentage = 0
                can_upload = True
            else:
                storage_limit_gb = storage_limit_mb / 1024
                storage_used_mb = usage.bytes_used / (1024 * 1024)
                storage_used_gb = storage_used_mb / 1024
                storage_remaining_mb = max(0, storage_limit_mb - storage_used_mb)
                storage_remaining_gb = storage_remaining_mb / 1024
                usage_percentage = (storage_used_mb / storage_limit_mb) * 100 if storage_limit_mb > 0 else 0
                can_upload = storage_remaining_mb > 0
            
            return Response({
                'success': True,
                'limits': {
                    'plan': plan,
                    'storage_limit_mb': storage_limit_mb,
                    'storage_limit_gb': storage_limit_gb,
                    'storage_used_mb': round(storage_used_mb, 2),
                    'storage_used_gb': round(storage_used_gb, 2),
                    'storage_remaining_mb': round(storage_remaining_mb, 2),
                    'storage_remaining_gb': round(storage_remaining_gb, 2),
                    'usage_percentage': round(usage_percentage, 1),
                    'can_upload': can_upload,
                    'api_access': api_access
                }
            })
            
        except Exception as e:
            logger.error(f"[STORAGE LIMITS] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–∏–º–∏—Ç–æ–≤: {str(e)}")
            return Response({
                'success': False,
                'error': '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–∏–º–∏—Ç–æ–≤'
            }, status=status.HTTP_500_INTERNAL_SERVER_ERROR)


class StorageStatsView(APIView):
    """
    üìà API –î–õ–Ø –ü–û–õ–£–ß–ï–ù–ò–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ò –•–†–ê–ù–ò–õ–ò–©–ê
    
    GET /api/storage/stats/ - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
    """
    permission_classes = [permissions.IsAuthenticated]
    
    def get(self, request):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ö—Ä–∞–Ω–∏–ª–∏—â–∞"""
        try:
            user = request.user
            
            # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            containers = StorageContainer.objects.filter(user=user, is_active=True)
            files = StorageFile.objects.filter(container__user=user, is_active=True)
            
            total_containers = containers.count()
            total_files = files.count()
            total_size = files.aggregate(total=Sum('file_size'))['total'] or 0
            total_size_mb = total_size / (1024 * 1024)
            total_size_gb = total_size_mb / 1024
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º —Ñ–∞–π–ª–æ–≤
            images_count = files.filter(mime_type__startswith='image/').count()
            videos_count = files.filter(mime_type__startswith='video/').count()
            documents_count = files.filter(
                Q(mime_type__startswith='application/') | 
                Q(mime_type__startswith='text/')
            ).count()
            other_files_count = total_files - images_count - videos_count - documents_count
            
            # –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ç–∏–ø—ã —Ñ–∞–π–ª–æ–≤
            popular_types = files.values('mime_type').annotate(
                count=Count('mime_type')
            ).order_by('-count')[:5]
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–≥—Ä—É–∑–æ–∫
            today = timezone.now().date()
            week_ago = today - timedelta(days=7)
            month_ago = today - timedelta(days=30)
            
            uploads_today = UserStorageUsage.objects.filter(
                user=user, date=today
            ).aggregate(count=Sum('uploads_count'))['count'] or 0
            
            uploads_this_week = UserStorageUsage.objects.filter(
                user=user, date__gte=week_ago
            ).aggregate(count=Sum('uploads_count'))['count'] or 0
            
            uploads_this_month = UserStorageUsage.objects.filter(
                user=user, date__gte=month_ago
            ).aggregate(count=Sum('uploads_count'))['count'] or 0
            
            return Response({
                'success': True,
                'stats': {
                    'total_containers': total_containers,
                    'total_files': total_files,
                    'total_size_mb': round(total_size_mb, 2),
                    'total_size_gb': round(total_size_gb, 2),
                    'images_count': images_count,
                    'videos_count': videos_count,
                    'documents_count': documents_count,
                    'other_files_count': other_files_count,
                    'popular_file_types': list(popular_types),
                    'uploads_today': uploads_today,
                    'uploads_this_week': uploads_this_week,
                    'uploads_this_month': uploads_this_month
                }
            })
            
        except Exception as e:
            logger.error(f"[STORAGE STATS] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}")
            return Response({
                'success': False,
                'error': '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏'
            }, status=status.HTTP_500_INTERNAL_SERVER_ERROR)
