import uuid
import os
from django.db import models
from django.contrib.auth import get_user_model
from django.utils import timezone
from django.core.validators import MinValueValidator, MaxValueValidator

User = get_user_model()


class StorageContainer(models.Model):
    """
    üì¶ –ú–û–î–ï–õ–¨ –î–õ–Ø –ö–û–ù–¢–ï–ô–ù–ï–†–û–í –•–†–ê–ù–ò–õ–ò–©–ê
    
    –ö–∞–∂–¥—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤
    """
    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)
    user = models.ForeignKey(User, on_delete=models.CASCADE, related_name='storage_containers')
    name = models.CharField(max_length=100, help_text="–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞")
    api_key = models.CharField(max_length=64, unique=True, help_text="–£–Ω–∏–∫–∞–ª—å–Ω—ã–π API –∫–ª—é—á –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—É")
    is_public = models.BooleanField(default=False, help_text="–ü—É–±–ª–∏—á–Ω—ã–π –ª–∏ –¥–æ—Å—Ç—É–ø –∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—É")
    is_active = models.BooleanField(default=True, help_text="–ê–∫—Ç–∏–≤–µ–Ω –ª–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä")
    files_count = models.IntegerField(default=0, help_text="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∞–π–ª–æ–≤ –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ")
    total_size = models.BigIntegerField(default=0, help_text="–û–±—â–∏–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–æ–≤ –≤ –±–∞–π—Ç–∞—Ö")
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)
    
    class Meta:
        ordering = ['-created_at']
        verbose_name = '–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä —Ö—Ä–∞–Ω–∏–ª–∏—â–∞'
        verbose_name_plural = '–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã —Ö—Ä–∞–Ω–∏–ª–∏—â–∞'
        unique_together = ['user', 'name']
    
    def __str__(self):
        return f"{self.name} ({self.user.username})"
    
    def save(self, *args, **kwargs):
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º API –∫–ª—é—á –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏
        if not self.api_key:
            self.api_key = self.generate_api_key()
        super().save(*args, **kwargs)
    
    @staticmethod
    def generate_api_key():
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ API –∫–ª—é—á–∞"""
        return uuid.uuid4().hex
    
    @property
    def total_size_mb(self):
        """–†–∞–∑–º–µ—Ä –≤ –º–µ–≥–∞–±–∞–π—Ç–∞—Ö"""
        return round(self.total_size / (1024 * 1024), 2)
    
    @property
    def total_size_gb(self):
        """–†–∞–∑–º–µ—Ä –≤ –≥–∏–≥–∞–±–∞–π—Ç–∞—Ö"""
        return round(self.total_size / (1024 * 1024 * 1024), 2)


class StorageFile(models.Model):
    """
    üìÅ –ú–û–î–ï–õ–¨ –î–õ–Ø –§–ê–ô–õ–û–í –í –•–†–ê–ù–ò–õ–ò–©–ï
    
    –§–∞–π–ª—ã, –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
    """
    
    # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)
    container = models.ForeignKey(StorageContainer, on_delete=models.CASCADE, related_name='files')
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∞–π–ª–µ
    filename = models.CharField(max_length=255, help_text="–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞")
    s3_key = models.CharField(max_length=500, help_text="–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –≤ S3")
    file_url = models.URLField(max_length=1000, blank=True, null=True, help_text="URL –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ–∞–π–ª—É")
    file_size = models.BigIntegerField(help_text="–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –≤ –±–∞–π—Ç–∞—Ö")
    mime_type = models.CharField(max_length=100, help_text="MIME —Ç–∏–ø —Ñ–∞–π–ª–∞")
    
    # –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
    original_filename = models.CharField(max_length=255, help_text="–ò—Å—Ö–æ–¥–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞")
    file_extension = models.CharField(max_length=20, blank=True, help_text="–†–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞")
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–æ—Å—Ç—É–ø–∞
    is_public = models.BooleanField(default=False, help_text="–ü—É–±–ª–∏—á–Ω—ã–π –ª–∏ —Ñ–∞–π–ª")
    is_active = models.BooleanField(default=True, help_text="–ê–∫—Ç–∏–≤–µ–Ω –ª–∏ —Ñ–∞–π–ª")
    
    # –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    upload_session = models.CharField(max_length=100, blank=True, help_text="ID —Å–µ—Å—Å–∏–∏ –∑–∞–≥—Ä—É–∑–∫–∏")
    checksum = models.CharField(max_length=64, blank=True, help_text="MD5 —Ö–µ—à —Ñ–∞–π–ª–∞")
    
    # –í—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)
    
    class Meta:
        ordering = ['-created_at']
        verbose_name = '–§–∞–π–ª —Ö—Ä–∞–Ω–∏–ª–∏—â–∞'
        verbose_name_plural = '–§–∞–π–ª—ã —Ö—Ä–∞–Ω–∏–ª–∏—â–∞'
        unique_together = ['container', 'filename']
    
    def __str__(self):
        return f"{self.filename} ({self.container.name})"
    
    def save(self, *args, **kwargs):
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
        if not self.file_extension:
            self.file_extension = os.path.splitext(self.filename)[1].lower()
        super().save(*args, **kwargs)
    
    @property
    def file_size_mb(self):
        """–†–∞–∑–º–µ—Ä –≤ –º–µ–≥–∞–±–∞–π—Ç–∞—Ö"""
        return round(self.file_size / (1024 * 1024), 2)
    
    @property
    def is_image(self):
        """–Ø–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ñ–∞–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º"""
        return self.mime_type.startswith('image/')
    
    @property
    def is_video(self):
        """–Ø–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ñ–∞–π–ª –≤–∏–¥–µ–æ"""
        return self.mime_type.startswith('video/')
    
    @property
    def is_document(self):
        """–Ø–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ñ–∞–π–ª –¥–æ–∫—É–º–µ–Ω—Ç–æ–º"""
        return self.mime_type.startswith('application/') or self.mime_type.startswith('text/')


class UserStorageUsage(models.Model):
    """
    üìä –ú–û–î–ï–õ–¨ –î–õ–Ø –û–¢–°–õ–ï–ñ–ò–í–ê–ù–ò–Ø –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Ø –•–†–ê–ù–ò–õ–ò–©–ê
    
    –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
    """
    
    user = models.ForeignKey(User, on_delete=models.CASCADE, related_name='storage_usage')
    date = models.DateField(help_text="–î–∞—Ç–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
    
    # –ú–µ—Ç—Ä–∏–∫–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    bytes_used = models.BigIntegerField(default=0, help_text="–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –±–∞–π—Ç")
    files_count = models.IntegerField(default=0, help_text="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∞–π–ª–æ–≤")
    containers_count = models.IntegerField(default=0, help_text="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤")
    
    # –ú–µ—Ç—Ä–∏–∫–∏ –∑–∞–≥—Ä—É–∑–æ–∫
    uploads_count = models.IntegerField(default=0, help_text="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–≥—Ä—É–∑–æ–∫")
    uploads_size = models.BigIntegerField(default=0, help_text="–†–∞–∑–º–µ—Ä –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤")
    
    # –ú–µ—Ç—Ä–∏–∫–∏ —É–¥–∞–ª–µ–Ω–∏–π
    deletions_count = models.IntegerField(default=0, help_text="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–¥–∞–ª–µ–Ω–∏–π")
    deletions_size = models.BigIntegerField(default=0, help_text="–†–∞–∑–º–µ—Ä —É–¥–∞–ª–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤")
    
    # –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ç–∏–ø—ã —Ñ–∞–π–ª–æ–≤
    file_types_stats = models.JSONField(default=dict, help_text="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º —Ñ–∞–π–ª–æ–≤")
    
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)
    
    class Meta:
        unique_together = ['user', 'date']
        ordering = ['-date']
        verbose_name = '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞'
        verbose_name_plural = '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞'
    
    def __str__(self):
        return f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ {self.user.username} - {self.date}"
    
    @property
    def usage_mb(self):
        """–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –≤ –º–µ–≥–∞–±–∞–π—Ç–∞—Ö"""
        return round(self.bytes_used / (1024 * 1024), 2)
    
    @property
    def usage_gb(self):
        """–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –≤ –≥–∏–≥–∞–±–∞–π—Ç–∞—Ö"""
        return round(self.bytes_used / (1024 * 1024 * 1024), 2)


class StorageAPILog(models.Model):
    """
    üìù –ú–û–î–ï–õ–¨ –î–õ–Ø –õ–û–ì–ò–†–û–í–ê–ù–ò–Ø API –ó–ê–ü–†–û–°–û–í
    
    –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è API —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
    """
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–ø—Ä–æ—Å–µ
    container = models.ForeignKey(StorageContainer, on_delete=models.CASCADE, related_name='api_logs')
    api_key = models.CharField(max_length=64, help_text="–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π API –∫–ª—é—á")
    
    # –î–µ—Ç–∞–ª–∏ –∑–∞–ø—Ä–æ—Å–∞
    method = models.CharField(max_length=10, help_text="HTTP –º–µ—Ç–æ–¥")
    endpoint = models.CharField(max_length=200, help_text="–≠–Ω–¥–ø–æ–∏–Ω—Ç API")
    status_code = models.IntegerField(help_text="HTTP —Å—Ç–∞—Ç—É—Å –∫–æ–¥")
    
    # –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
    user_agent = models.CharField(max_length=500, blank=True, help_text="User Agent")
    ip_address = models.GenericIPAddressField(blank=True, null=True, help_text="IP –∞–¥—Ä–µ—Å")
    
    # –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
    response_time = models.FloatField(null=True, blank=True, help_text="–í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö")
    
    # –û—à–∏–±–∫–∏
    error_message = models.TextField(blank=True, help_text="–°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ")
    
    created_at = models.DateTimeField(auto_now_add=True)
    
    class Meta:
        ordering = ['-created_at']
        verbose_name = 'API –ª–æ–≥ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞'
        verbose_name_plural = 'API –ª–æ–≥–∏ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞'
    
    def __str__(self):
        return f"API –∑–∞–ø—Ä–æ—Å {self.method} {self.endpoint} - {self.status_code}"
