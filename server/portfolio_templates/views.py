from django.shortcuts import render
import logging
from django.shortcuts import get_object_or_404
from django.db.models import Q, Count
from django.http import HttpResponse
from django.template import Template, Context
from rest_framework import status, permissions
from rest_framework.views import APIView
from rest_framework.response import Response
from rest_framework.decorators import api_view, permission_classes
from rest_framework.pagination import PageNumberPagination
from portfolio.models import Portfolio

from .models import PortfolioTemplate, TemplateUsage, TemplateLike
from .serializers import (
    PortfolioTemplateListSerializer,
    PortfolioTemplateDetailSerializer,
    PortfolioTemplateCreateSerializer,
    TemplateUsageSerializer,
    TemplateLikeSerializer,
    TemplateStatsSerializer,
    UseTemplateSerializer
)

logger = logging.getLogger(__name__)


class TemplatePagination(PageNumberPagination):
    """–ü–∞–≥–∏–Ω–∞—Ü–∏—è –¥–ª—è —à–∞–±–ª–æ–Ω–æ–≤"""
    page_size = 12
    page_size_query_param = 'page_size'
    max_page_size = 50


class PortfolioTemplateListView(APIView):
    """
    üìã API –î–õ–Ø –ü–û–õ–£–ß–ï–ù–ò–Ø –°–ü–ò–°–ö–ê –®–ê–ë–õ–û–ù–û–í
    
    GET /api/templates/ - —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤
    """
    
    permission_classes = [permissions.AllowAny]
    pagination_class = TemplatePagination
    
    def get(self, request):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —à–∞–±–ª–æ–Ω–æ–≤ —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –∏ –ø–æ–∏—Å–∫–æ–º"""
        
        try:
            # –ë–∞–∑–æ–≤—ã–π queryset - —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã
            queryset = PortfolioTemplate.objects.filter(is_active=True)
            
            # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            category = request.GET.get('category')
            if category:
                queryset = queryset.filter(category=category)
            
            # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
            difficulty = request.GET.get('difficulty')
            if difficulty:
                queryset = queryset.filter(difficulty=difficulty)
            
            # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –ø—Ä–µ–º–∏—É–º —Å—Ç–∞—Ç—É—Å—É
            is_premium = request.GET.get('is_premium')
            if is_premium is not None:
                queryset = queryset.filter(is_premium=is_premium.lower() == 'true')
            
            # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Ç–æ–ª—å–∫–æ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã—Ö
            featured_only = request.GET.get('featured')
            if featured_only and featured_only.lower() == 'true':
                queryset = queryset.filter(is_featured=True)
            
            # –ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é, –æ–ø–∏—Å–∞–Ω–∏—é –∏ —Ç–µ–≥–∞–º
            search = request.GET.get('search')
            if search:
                queryset = queryset.filter(
                    Q(title__icontains=search) |
                    Q(description__icontains=search) |
                    Q(tags__icontains=search)
                )
            
            # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
            sort_by = request.GET.get('sort', 'featured')  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é - —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ
            
            if sort_by == 'popular':
                queryset = queryset.order_by('-likes', '-views')
            elif sort_by == 'newest':
                queryset = queryset.order_by('-created_at')
            elif sort_by == 'most_used':
                queryset = queryset.order_by('-uses')
            elif sort_by == 'alphabetical':
                queryset = queryset.order_by('title')
            else:  # featured (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
                queryset = queryset.order_by('-is_featured', '-likes', '-created_at')
            
            # –ü–∞–≥–∏–Ω–∞—Ü–∏—è
            paginator = self.pagination_class()
            page = paginator.paginate_queryset(queryset, request)
            
            if page is not None:
                serializer = PortfolioTemplateListSerializer(
                    page, 
                    many=True, 
                    context={'request': request}
                )
                return paginator.get_paginated_response(serializer.data)
            
            # Fallback –±–µ–∑ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
            serializer = PortfolioTemplateListSerializer(
                queryset, 
                many=True, 
                context={'request': request}
            )
            
            return Response({
                'success': True,
                'data': serializer.data,
                'count': queryset.count()
            })
            
        except Exception as e:
            logger.error(f"[TEMPLATES] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —à–∞–±–ª–æ–Ω–æ–≤: {str(e)}")
            return Response({
                'success': False,
                'error': '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —à–∞–±–ª–æ–Ω–æ–≤'
            }, status=status.HTTP_500_INTERNAL_SERVER_ERROR)


class PortfolioTemplateDetailView(APIView):
    """
    üìÑ API –î–õ–Ø –ü–û–õ–£–ß–ï–ù–ò–Ø –î–ï–¢–ê–õ–¨–ù–û–ô –ò–ù–§–û–†–ú–ê–¶–ò–ò –û –®–ê–ë–õ–û–ù–ï
    
    GET /api/templates/{id}/ - –¥–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —à–∞–±–ª–æ–Ω–µ
    """
    
    permission_classes = [permissions.AllowAny]
    
    def get(self, request, template_id):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —à–∞–±–ª–æ–Ω–µ"""
        
        try:
            template = get_object_or_404(
                PortfolioTemplate, 
                id=template_id, 
                is_active=True
            )
            
            # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤
            template.increment_views()
            
            serializer = PortfolioTemplateDetailSerializer(
                template, 
                context={'request': request}
            )
            
            return Response({
                'success': True,
                'data': serializer.data
            })
            
        except PortfolioTemplate.DoesNotExist:
            return Response({
                'success': False,
                'error': '–®–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω'
            }, status=status.HTTP_404_NOT_FOUND)
        
        except Exception as e:
            logger.error(f"[TEMPLATES] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–∞ {template_id}: {str(e)}")
            return Response({
                'success': False,
                'error': '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–∞'
            }, status=status.HTTP_500_INTERNAL_SERVER_ERROR)


class PortfolioTemplatePreviewView(APIView):
    """
    üëÅÔ∏è API –î–õ–Ø –ü–†–ï–í–¨–Æ –®–ê–ë–õ–û–ù–ê
    
    GET /api/templates/{id}/preview/ - HTML –ø—Ä–µ–≤—å—é —à–∞–±–ª–æ–Ω–∞
    """
    
    permission_classes = [permissions.AllowAny]
    
    def get(self, request, template_id):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ HTML –ø—Ä–µ–≤—å—é —à–∞–±–ª–æ–Ω–∞"""
        
        try:
            template = get_object_or_404(
                PortfolioTemplate, 
                id=template_id, 
                is_active=True
            )
            
            # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤
            template.increment_views()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
            if not template.html_code.strip() or not template.css_code.strip():
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥–ª—É—à–∫—É, –µ—Å–ª–∏ –Ω–µ—Ç –∫–æ–Ω—Ç–µ–Ω—Ç–∞
                full_html = f"""<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{template.title} - –ü—Ä–µ–≤—å—é</title>
    <style>
        body {{
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            margin: 0;
            padding: 40px;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            display: flex;
            align-items: center;
            justify-content: center;
        }}
        .preview-placeholder {{
            background: white;
            border-radius: 12px;
            padding: 40px;
            text-align: center;
            box-shadow: 0 10px 30px rgba(0,0,0,0.2);
            max-width: 500px;
        }}
        .preview-placeholder h1 {{
            color: #333;
            margin-bottom: 16px;
            font-size: 24px;
        }}
        .preview-placeholder p {{
            color: #666;
            line-height: 1.6;
            margin: 0;
        }}
        .template-info {{
            background: #f8f9fa;
            border-radius: 8px;
            padding: 20px;
            margin-top: 20px;
        }}
        .badge {{
            display: inline-block;
            background: #007bff;
            color: white;
            padding: 4px 12px;
            border-radius: 20px;
            font-size: 12px;
            margin: 4px;
        }}
    </style>
</head>
<body>
    <div class="preview-placeholder">
        <h1>üé® {template.title}</h1>
        <p>{template.description}</p>
        <div class="template-info">
            <div class="badge">{template.get_category_display()}</div>
            <div class="badge">{template.get_difficulty_display()}</div>
            <p style="margin-top: 15px; font-size: 14px; color: #888;">
                –ü—Ä–µ–≤—å—é –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è HTML/CSS –∫–æ–¥–∞ –≤ –∞–¥–º–∏–Ω–∫–µ
            </p>
        </div>
    </div>
</body>
</html>"""
            else:
                # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π HTML –¥–ª—è –ø—Ä–µ–≤—å—é
                full_html = f"""<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{template.title} - –ü—Ä–µ–≤—å—é</title>
    <style>
        {template.css_code}
    </style>
</head>
<body>
    {template.html_code}
    <script>
        {template.js_code or ''}
    </script>
</body>
</html>"""
            
            response = HttpResponse(full_html, content_type='text/html')
            # –£–±–∏—Ä–∞–µ–º X-Frame-Options —á—Ç–æ–±—ã —Ä–∞–∑—Ä–µ—à–∏—Ç—å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ iframe
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π CSP –ø–æ–¥—Ö–æ–¥
            response['Content-Security-Policy'] = "frame-ancestors *;"
            # –î–æ–±–∞–≤–ª—è–µ–º CORS –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞
            response['Access-Control-Allow-Origin'] = '*'
            response['Access-Control-Allow-Methods'] = 'GET'
            response['Access-Control-Allow-Headers'] = 'Content-Type'
            return response
            
        except PortfolioTemplate.DoesNotExist:
            return HttpResponse(
                '<h1>–®–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω</h1>', 
                content_type='text/html',
                status=404
            )
        
        except Exception as e:
            logger.error(f"[TEMPLATES] –û—à–∏–±–∫–∞ –ø—Ä–µ–≤—å—é —à–∞–±–ª–æ–Ω–∞ {template_id}: {str(e)}")
            return HttpResponse(
                '<h1>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–µ–≤—å—é</h1>', 
                content_type='text/html',
                status=500
            )


class UseTemplateView(APIView):
    """
    üéØ API –î–õ–Ø –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Ø –®–ê–ë–õ–û–ù–ê
    
    POST /api/templates/use/ - –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ
    """
    
    permission_classes = [permissions.IsAuthenticated]
    
    def post(self, request):
        """–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ"""
        
        try:
            serializer = UseTemplateSerializer(data=request.data)
            if not serializer.is_valid():
                return Response({
                    'success': False,
                    'error': '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ',
                    'details': serializer.errors
                }, status=status.HTTP_400_BAD_REQUEST)
            
            template_id = serializer.validated_data['template_id']
            template = get_object_or_404(
                PortfolioTemplate, 
                id=template_id, 
                is_active=True
            )
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–µ–º–∏—É–º –¥–æ—Å—Ç—É–ø
            if template.is_premium and not request.user.is_premium:
                return Response({
                    'success': False,
                    'error': '–ü—Ä–µ–º–∏—É–º —à–∞–±–ª–æ–Ω –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ Premium –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º',
                    'error_code': 'PREMIUM_REQUIRED'
                }, status=status.HTTP_403_FORBIDDEN)
            
            # –°–æ–∑–¥–∞–µ–º –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ –Ω–∞ –æ—Å–Ω–æ–≤–µ —à–∞–±–ª–æ–Ω–∞
            portfolio_title = serializer.validated_data.get(
                'portfolio_title', 
                f"{template.title} - {request.user.username}"
            )
            
            portfolio_description = serializer.validated_data.get(
                'portfolio_description',
                f"–ü–æ—Ä—Ç—Ñ–æ–ª–∏–æ —Å–æ–∑–¥–∞–Ω–æ –Ω–∞ –æ—Å–Ω–æ–≤–µ —à–∞–±–ª–æ–Ω–∞ '{template.title}'"
            )
            
            # –°–æ–∑–¥–∞–µ–º –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ
            portfolio = Portfolio.objects.create(
                author=request.user,
                title=portfolio_title,
                description=portfolio_description,
                html_content=template.html_code,
                css_content=template.css_code,
                js_content=template.js_code,
                tags=template.tags + ['template-based'],
                is_public=False  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø—Ä–∏–≤–∞—Ç–Ω–æ–µ
            )
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞
            TemplateUsage.objects.create(
                template=template,
                user=request.user,
                portfolio_created=portfolio
            )
            
            # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π
            template.increment_uses()
            
            logger.info(f"[TEMPLATES] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {request.user.username} –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª —à–∞–±–ª–æ–Ω {template.title}")
            
            return Response({
                'success': True,
                'portfolio': {
                    'id': str(portfolio.id),
                    'title': portfolio.title,
                    'slug': portfolio.slug,
                    'edit_url': f'/portfolio/edit/me?project={portfolio.id}',
                    'public_url': portfolio.public_url if portfolio.is_public else None
                },
                'template': {
                    'id': template.id,
                    'title': template.title,
                    'category': template.category
                },
                'message': '–ü–æ—Ä—Ç—Ñ–æ–ª–∏–æ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ –Ω–∞ –æ—Å–Ω–æ–≤–µ —à–∞–±–ª–æ–Ω–∞'
            }, status=status.HTTP_201_CREATED)
            
        except PortfolioTemplate.DoesNotExist:
            return Response({
                'success': False,
                'error': '–®–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω'
            }, status=status.HTTP_404_NOT_FOUND)
        
        except Exception as e:
            logger.error(f"[TEMPLATES] –û—à–∏–±–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —à–∞–±–ª–æ–Ω–∞: {str(e)}")
            return Response({
                'success': False,
                'error': '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ –Ω–∞ –æ—Å–Ω–æ–≤–µ —à–∞–±–ª–æ–Ω–∞'
            }, status=status.HTTP_500_INTERNAL_SERVER_ERROR)


class TemplateLikeView(APIView):
    """
    üëç API –î–õ–Ø –õ–ê–ô–ö–û–í –®–ê–ë–õ–û–ù–û–í
    
    POST /api/templates/{id}/like/ - –ª–∞–π–∫–Ω—É—Ç—å —à–∞–±–ª–æ–Ω
    DELETE /api/templates/{id}/like/ - —É–±—Ä–∞—Ç—å –ª–∞–π–∫
    """
    
    permission_classes = [permissions.IsAuthenticated]
    
    def post(self, request, template_id):
        """–õ–∞–π–∫–Ω—É—Ç—å —à–∞–±–ª–æ–Ω"""
        
        try:
            template = get_object_or_404(
                PortfolioTemplate, 
                id=template_id, 
                is_active=True
            )
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ª–∞–π–∫–Ω—É–ª –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            like, created = TemplateLike.objects.get_or_create(
                template=template,
                user=request.user
            )
            
            if created:
                # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ª–∞–π–∫–æ–≤
                template.add_like()
                
                return Response({
                    'success': True,
                    'message': '–õ–∞–π–∫ –¥–æ–±–∞–≤–ª–µ–Ω',
                    'likes_count': template.likes
                })
            else:
                return Response({
                    'success': False,
                    'message': '–í—ã —É–∂–µ –ª–∞–π–∫–Ω—É–ª–∏ —ç—Ç–æ—Ç —à–∞–±–ª–æ–Ω',
                    'likes_count': template.likes
                }, status=status.HTTP_400_BAD_REQUEST)
                
        except PortfolioTemplate.DoesNotExist:
            return Response({
                'success': False,
                'error': '–®–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω'
            }, status=status.HTTP_404_NOT_FOUND)
        
        except Exception as e:
            logger.error(f"[TEMPLATES] –û—à–∏–±–∫–∞ –ª–∞–π–∫–∞ —à–∞–±–ª–æ–Ω–∞ {template_id}: {str(e)}")
            return Response({
                'success': False,
                'error': '–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ª–∞–π–∫–∞'
            }, status=status.HTTP_500_INTERNAL_SERVER_ERROR)
    
    def delete(self, request, template_id):
        """–£–±—Ä–∞—Ç—å –ª–∞–π–∫ —Å —à–∞–±–ª–æ–Ω–∞"""
        
        try:
            template = get_object_or_404(
                PortfolioTemplate, 
                id=template_id, 
                is_active=True
            )
            
            # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –∏ —É–¥–∞–ª–∏—Ç—å –ª–∞–π–∫
            try:
                like = TemplateLike.objects.get(
                    template=template,
                    user=request.user
                )
                like.delete()
                
                # –£–º–µ–Ω—å—à–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ª–∞–π–∫–æ–≤
                template.remove_like()
                
                return Response({
                    'success': True,
                    'message': '–õ–∞–π–∫ —É–±—Ä–∞–Ω',
                    'likes_count': template.likes
                })
                
            except TemplateLike.DoesNotExist:
                return Response({
                    'success': False,
                    'message': '–í—ã –Ω–µ –ª–∞–π–∫–∞–ª–∏ —ç—Ç–æ—Ç —à–∞–±–ª–æ–Ω',
                    'likes_count': template.likes
                }, status=status.HTTP_400_BAD_REQUEST)
                
        except PortfolioTemplate.DoesNotExist:
            return Response({
                'success': False,
                'error': '–®–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω'
            }, status=status.HTTP_404_NOT_FOUND)
        
        except Exception as e:
            logger.error(f"[TEMPLATES] –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ª–∞–π–∫–∞ —à–∞–±–ª–æ–Ω–∞ {template_id}: {str(e)}")
            return Response({
                'success': False,
                'error': '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ª–∞–π–∫–∞'
            }, status=status.HTTP_500_INTERNAL_SERVER_ERROR)


class TemplateStatsView(APIView):
    """
    üìà API –î–õ–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ò –®–ê–ë–õ–û–ù–û–í
    
    GET /api/templates/stats/ - –æ–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    """
    
    permission_classes = [permissions.AllowAny]
    
    def get(self, request):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —à–∞–±–ª–æ–Ω–æ–≤"""
        
        try:
            # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            total_templates = PortfolioTemplate.objects.count()
            active_templates = PortfolioTemplate.objects.filter(is_active=True).count()
            featured_templates = PortfolioTemplate.objects.filter(is_featured=True, is_active=True).count()
            premium_templates = PortfolioTemplate.objects.filter(is_premium=True, is_active=True).count()
            
            # –ê–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            from django.db.models import Sum
            total_likes = PortfolioTemplate.objects.filter(is_active=True).aggregate(Sum('likes'))['likes__sum'] or 0
            total_views = PortfolioTemplate.objects.filter(is_active=True).aggregate(Sum('views'))['views__sum'] or 0
            total_uses = PortfolioTemplate.objects.filter(is_active=True).aggregate(Sum('uses'))['uses__sum'] or 0
            
            # –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            popular_categories = (
                PortfolioTemplate.objects
                .filter(is_active=True)
                .values('category', 'category')
                .annotate(count=Count('id'))
                .order_by('-count')[:5]
            )
            
            # –ü–æ—Å–ª–µ–¥–Ω–∏–µ —à–∞–±–ª–æ–Ω—ã
            recent_templates = PortfolioTemplate.objects.filter(
                is_active=True
            ).order_by('-created_at')[:5]
            
            recent_templates_data = PortfolioTemplateListSerializer(
                recent_templates, 
                many=True,
                context={'request': request}
            ).data
            
            stats_data = {
                'total_templates': total_templates,
                'active_templates': active_templates,
                'featured_templates': featured_templates,
                'premium_templates': premium_templates,
                'total_likes': total_likes,
                'total_views': total_views,
                'total_uses': total_uses,
                'popular_categories': list(popular_categories),
                'recent_templates': recent_templates_data
            }
            
            serializer = TemplateStatsSerializer(stats_data)
            
            return Response({
                'success': True,
                'data': serializer.data
            })
            
        except Exception as e:
            logger.error(f"[TEMPLATES] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}")
            return Response({
                'success': False,
                'error': '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏'
            }, status=status.HTTP_500_INTERNAL_SERVER_ERROR)


@api_view(['GET'])
@permission_classes([permissions.AllowAny])
def template_categories_view(request):
    """
    üè∑Ô∏è API –î–õ–Ø –ü–û–õ–£–ß–ï–ù–ò–Ø –°–ü–ò–°–ö–ê –ö–ê–¢–ï–ì–û–†–ò–ô
    
    GET /api/templates/categories/ - —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    """
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –∞–∫—Ç–∏–≤–Ω—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤
        categories_with_counts = (
            PortfolioTemplate.objects
            .filter(is_active=True)
            .values('category')
            .annotate(count=Count('id'))
            .order_by('category')
        )
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Å —á–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º—ã–º–∏ –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏
        categories = []
        for item in categories_with_counts:
            category_code = item['category']
            category_display = dict(PortfolioTemplate.CATEGORY_CHOICES).get(category_code, category_code)
            
            categories.append({
                'code': category_code,
                'display': category_display,
                'count': item['count']
            })
        
        return Response({
            'success': True,
            'data': categories
        })
        
    except Exception as e:
        logger.error(f"[TEMPLATES] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {str(e)}")
        return Response({
            'success': False,
            'error': '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π'
        }, status=status.HTTP_500_INTERNAL_SERVER_ERROR)
