from rest_framework import serializers
from django.contrib.auth import get_user_model
from .models import PortfolioTemplate, TemplateUsage, TemplateLike

User = get_user_model()


class PortfolioTemplateListSerializer(serializers.ModelSerializer):
    """
    üìã –°–ï–†–ò–ê–õ–ò–ó–ê–¢–û–† –î–õ–Ø –°–ü–ò–°–ö–ê –®–ê–ë–õ–û–ù–û–í
    
    –õ–µ–≥–∫–∏–π —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ç–æ—Ä –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–µ—Ç–∫–∏ —à–∞–±–ª–æ–Ω–æ–≤
    """
    
    category_display = serializers.CharField(source='get_category_display', read_only=True)
    difficulty_display = serializers.CharField(source='get_difficulty_display', read_only=True)
    created_by_username = serializers.CharField(source='created_by.username', read_only=True)
    is_liked_by_user = serializers.SerializerMethodField()
    demo_url = serializers.SerializerMethodField()
    
    class Meta:
        model = PortfolioTemplate
        fields = [
            'id', 'title', 'description', 'category', 'category_display',
            'difficulty', 'difficulty_display', 'thumbnail_image', 'demo_url',
            'likes', 'views', 'uses', 'is_featured', 'is_premium',
            'created_by_username', 'created_at', 'tags', 'is_liked_by_user'
        ]
    
    def get_demo_url(self, obj):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º URL –¥–ª—è –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —à–∞–±–ª–æ–Ω–∞"""
        request = self.context.get('request')
        if request:
            return request.build_absolute_uri(f'/api/templates/{obj.id}/preview/')
        return f'/api/templates/{obj.id}/preview/'
    
    def get_is_liked_by_user(self, obj):
        """–ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∞–π–∫–Ω—É–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —ç—Ç–æ—Ç —à–∞–±–ª–æ–Ω"""
        request = self.context.get('request')
        if request and request.user.is_authenticated:
            return TemplateLike.objects.filter(
                template=obj, 
                user=request.user
            ).exists()
        return False


class PortfolioTemplateDetailSerializer(serializers.ModelSerializer):
    """
    üìÑ –î–ï–¢–ê–õ–¨–ù–´–ô –°–ï–†–ò–ê–õ–ò–ó–ê–¢–û–† –®–ê–ë–õ–û–ù–ê
    
    –ü–æ–ª–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —à–∞–±–ª–æ–Ω–µ –≤–∫–ª—é—á–∞—è –∫–æ–¥
    """
    
    category_display = serializers.CharField(source='get_category_display', read_only=True)
    difficulty_display = serializers.CharField(source='get_difficulty_display', read_only=True)
    created_by_username = serializers.CharField(source='created_by.username', read_only=True)
    is_liked_by_user = serializers.SerializerMethodField()
    is_popular = serializers.BooleanField(read_only=True)
    usage_count = serializers.SerializerMethodField()
    demo_url = serializers.SerializerMethodField()
    
    class Meta:
        model = PortfolioTemplate
        fields = [
            'id', 'title', 'description', 'category', 'category_display',
            'difficulty', 'difficulty_display', 'html_code', 'css_code', 'js_code',
            'thumbnail_image', 'demo_url', 'tags', 'likes', 'views', 'uses',
            'is_active', 'is_featured', 'is_premium', 'is_popular',
            'created_by_username', 'created_at', 'updated_at',
            'is_liked_by_user', 'usage_count'
        ]
    
    def get_demo_url(self, obj):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º URL –¥–ª—è –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —à–∞–±–ª–æ–Ω–∞"""
        request = self.context.get('request')
        if request:
            return request.build_absolute_uri(f'/api/templates/{obj.id}/preview/')
        return f'/api/templates/{obj.id}/preview/'
    
    def get_is_liked_by_user(self, obj):
        """–ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∞–π–∫–Ω—É–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —ç—Ç–æ—Ç —à–∞–±–ª–æ–Ω"""
        request = self.context.get('request')
        if request and request.user.is_authenticated:
            return TemplateLike.objects.filter(
                template=obj, 
                user=request.user
            ).exists()
        return False
    
    def get_usage_count(self, obj):
        """–ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü"""
        from django.utils import timezone
        from datetime import timedelta
        
        last_month = timezone.now() - timedelta(days=30)
        return TemplateUsage.objects.filter(
            template=obj,
            used_at__gte=last_month
        ).count()


class PortfolioTemplateCreateSerializer(serializers.ModelSerializer):
    """
    ‚úèÔ∏è –°–ï–†–ò–ê–õ–ò–ó–ê–¢–û–† –î–õ–Ø –°–û–ó–î–ê–ù–ò–Ø –®–ê–ë–õ–û–ù–ê
    """
    
    class Meta:
        model = PortfolioTemplate
        fields = [
            'title', 'description', 'category', 'difficulty',
            'html_code', 'css_code', 'js_code', 'thumbnail_image',
            'demo_url', 'tags', 'is_premium'
        ]
    
    def validate_title(self, value):
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è"""
        if len(value.strip()) < 3:
            raise serializers.ValidationError(
                "–ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞"
            )
        return value.strip()
    
    def validate_description(self, value):
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –æ–ø–∏—Å–∞–Ω–∏—è"""
        if len(value.strip()) < 10:
            raise serializers.ValidationError(
                "–û–ø–∏—Å–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 10 —Å–∏–º–≤–æ–ª–æ–≤"
            )
        return value.strip()
    
    def validate_html_code(self, value):
        """–í–∞–ª–∏–¥–∞—Ü–∏—è HTML –∫–æ–¥–∞"""
        if not value.strip():
            raise serializers.ValidationError("HTML –∫–æ–¥ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω")
        
        # –ë–∞–∑–æ–≤—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ HTML
        if '<html' not in value.lower() and '<div' not in value.lower():
            raise serializers.ValidationError(
                "HTML –∫–æ–¥ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –≤–∞–ª–∏–¥–Ω—É—é —Ä–∞–∑–º–µ—Ç–∫—É"
            )
        
        return value.strip()
    
    def validate_css_code(self, value):
        """–í–∞–ª–∏–¥–∞—Ü–∏—è CSS –∫–æ–¥–∞"""
        if not value.strip():
            raise serializers.ValidationError("CSS –∫–æ–¥ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω")
        
        return value.strip()
    
    def validate_tags(self, value):
        """–í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–µ–≥–æ–≤"""
        if not isinstance(value, list):
            raise serializers.ValidationError("–¢–µ–≥–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Å–ø–∏—Å–∫–æ–º")
        
        # –ú–∞–∫—Å–∏–º—É–º 10 —Ç–µ–≥–æ–≤
        if len(value) > 10:
            raise serializers.ValidationError("–ú–∞–∫—Å–∏–º—É–º 10 —Ç–µ–≥–æ–≤")
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–∞–∂–¥–æ–≥–æ —Ç–µ–≥–∞
        validated_tags = []
        for tag in value:
            if isinstance(tag, str) and tag.strip():
                clean_tag = tag.strip().lower()
                if len(clean_tag) >= 2 and clean_tag not in validated_tags:
                    validated_tags.append(clean_tag)
        
        return validated_tags
    
    def create(self, validated_data):
        """–°–æ–∑–¥–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞"""
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–∑–¥–∞—Ç–µ–ª—è
        validated_data['created_by'] = self.context['request'].user
        return super().create(validated_data)


class TemplateUsageSerializer(serializers.ModelSerializer):
    """
    üìä –°–ï–†–ò–ê–õ–ò–ó–ê–¢–û–† –î–õ–Ø –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–ô –®–ê–ë–õ–û–ù–ê
    """
    
    template_title = serializers.CharField(source='template.title', read_only=True)
    user_username = serializers.CharField(source='user.username', read_only=True)
    portfolio_title = serializers.CharField(source='portfolio_created.title', read_only=True)
    
    class Meta:
        model = TemplateUsage
        fields = [
            'id', 'template', 'template_title', 'user', 'user_username',
            'portfolio_created', 'portfolio_title', 'used_at'
        ]


class TemplateLikeSerializer(serializers.ModelSerializer):
    """
    üëç –°–ï–†–ò–ê–õ–ò–ó–ê–¢–û–† –î–õ–Ø –õ–ê–ô–ö–û–í –®–ê–ë–õ–û–ù–û–í
    """
    
    template_title = serializers.CharField(source='template.title', read_only=True)
    user_username = serializers.CharField(source='user.username', read_only=True)
    
    class Meta:
        model = TemplateLike
        fields = [
            'id', 'template', 'template_title', 'user', 'user_username', 'liked_at'
        ]


class TemplateStatsSerializer(serializers.Serializer):
    """
    üìà –°–ï–†–ò–ê–õ–ò–ó–ê–¢–û–† –î–õ–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ò –®–ê–ë–õ–û–ù–û–í
    """
    
    total_templates = serializers.IntegerField()
    active_templates = serializers.IntegerField()
    featured_templates = serializers.IntegerField()
    premium_templates = serializers.IntegerField()
    total_likes = serializers.IntegerField()
    total_views = serializers.IntegerField()
    total_uses = serializers.IntegerField()
    popular_categories = serializers.ListField()
    recent_templates = serializers.ListField()


class UseTemplateSerializer(serializers.Serializer):
    """
    üéØ –°–ï–†–ò–ê–õ–ò–ó–ê–¢–û–† –î–õ–Ø –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Ø –®–ê–ë–õ–û–ù–ê
    """
    
    template_id = serializers.IntegerField()
    portfolio_title = serializers.CharField(max_length=200, required=False)
    portfolio_description = serializers.CharField(required=False, allow_blank=True)
    
    def validate_template_id(self, value):
        """–í–∞–ª–∏–¥–∞—Ü–∏—è ID —à–∞–±–ª–æ–Ω–∞"""
        try:
            template = PortfolioTemplate.objects.get(
                id=value, 
                is_active=True
            )
        except PortfolioTemplate.DoesNotExist:
            raise serializers.ValidationError("–®–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω")
        
        return value 