import time
import logging
from django.utils.deprecation import MiddlewareMixin
from .authentication import get_api_key_from_request, log_api_request

logger = logging.getLogger(__name__)


class PublicAPILoggingMiddleware(MiddlewareMixin):
    """
    üìù MIDDLEWARE –î–õ–Ø –õ–û–ì–ò–†–û–í–ê–ù–ò–Ø –ü–£–ë–õ–ò–ß–ù–û–ì–û API
    
    –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ª–æ–≥–∏—Ä—É–µ—Ç –≤—Å–µ API –∑–∞–ø—Ä–æ—Å—ã
    """
    
    def process_request(self, request):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞"""
        request.start_time = time.time()
        return None
    
    def process_response(self, request, response):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏—Å—Ö–æ–¥—è—â–µ–≥–æ –æ—Ç–≤–µ—Ç–∞"""
        if request.path.startswith('/api/remote/storage/'):
            is_external = self._is_external_api_request(request)
            logger.debug(f"[MIDDLEWARE] –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø—Ä–æ—Å: {request.path} - –≤–Ω–µ—à–Ω–∏–π: {is_external}")
            
            if is_external:
                logger.info(f"[MIDDLEWARE] –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –í–ù–ï–®–ù–ò–ô API –∑–∞–ø—Ä–æ—Å: {request.path}")
                api_key = get_api_key_from_request(request)
                if api_key:
                    logger.info(f"[MIDDLEWARE] –ù–∞–π–¥–µ–Ω API –∫–ª—é—á: {str(api_key.api_key)[:10]}...")
                    log_api_request(request, response, api_key, request.start_time)
                else:
                    logger.warning(f"[MIDDLEWARE] API –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞: {request.path}")
            else:
                logger.debug(f"[MIDDLEWARE] –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –∑–∞–ø—Ä–æ—Å: {request.path}")
        
        return response
    
    def _is_external_api_request(self, request):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∑–∞–ø—Ä–æ—Å –≤–Ω–µ—à–Ω–∏–º API –∑–∞–ø—Ä–æ—Å–æ–º"""
        if request.path.endswith('/stats/') or request.path.endswith('/keys/'):
            logger.debug(f"[MIDDLEWARE] –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –∑–∞–ø—Ä–æ—Å (—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞/–∫–ª—é—á–∏): {request.path}")
            return False
        user_agent = request.META.get('HTTP_USER_AGENT', '').lower()
        if any(browser in user_agent for browser in ['mozilla', 'chrome', 'safari', 'firefox', 'edge']):
            logger.debug(f"[MIDDLEWARE] –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –∑–∞–ø—Ä–æ—Å (–±—Ä–∞—É–∑–µ—Ä): {request.path} - UA: {user_agent[:50]}")
            return False
        referer = request.META.get('HTTP_REFERER', '')
        if referer and any(domain in referer.lower() for domain in ['localhost', '127.0.0.1', 'devcommerce.com']):
            logger.debug(f"[MIDDLEWARE] –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –∑–∞–ø—Ä–æ—Å (referer): {request.path} - Referer: {referer}")
            return False
        origin = request.META.get('HTTP_ORIGIN', '')
        if origin and any(domain in origin.lower() for domain in ['localhost', '127.0.0.1', 'devcommerce.com']):
            return False
        
        if request.META.get('HTTP_X_API_KEY'):
            return True
        return True 