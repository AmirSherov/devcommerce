import uuid
import time
from datetime import datetime, timedelta
from django.db import models
from django.contrib.auth import get_user_model
from django.utils import timezone
from storage.models import StorageContainer

User = get_user_model()


class PublicAPIKey(models.Model):
    """
    üîë –ú–û–î–ï–õ–¨ –î–õ–Ø API –ö–õ–Æ–ß–ï–ô –ü–£–ë–õ–ò–ß–ù–û–ì–û API
    
    –ö–∞–∂–¥—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –º–æ–∂–µ—Ç –∏–º–µ—Ç—å API –∫–ª—é—á –¥–ª—è –ø—É–±–ª–∏—á–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
    """
    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)
    container = models.OneToOneField(StorageContainer, on_delete=models.CASCADE, related_name='public_api_key')
    api_key = models.CharField(max_length=64, unique=True, help_text="–£–Ω–∏–∫–∞–ª—å–Ω—ã–π API –∫–ª—é—á –¥–ª—è –¥–æ—Å—Ç—É–ø–∞")
    api_secret = models.CharField(max_length=128, help_text="–°–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á –¥–ª—è –ø–æ–¥–ø–∏—Å–∏ –∑–∞–ø—Ä–æ—Å–æ–≤")
    is_active = models.BooleanField(default=True, help_text="–ê–∫—Ç–∏–≤–µ–Ω –ª–∏ API –∫–ª—é—á")
    permissions = models.JSONField(default=dict, help_text="–†–∞–∑—Ä–µ—à–µ–Ω–∏—è API –∫–ª—é—á–∞")
    rate_limit_per_hour = models.IntegerField(default=1000, help_text="–õ–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ —á–∞—Å")
    max_file_size_mb = models.IntegerField(default=100, help_text="–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –≤ MB")
    total_requests = models.IntegerField(default=0, help_text="–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤")
    last_used_at = models.DateTimeField(null=True, blank=True, help_text="–ü–æ—Å–ª–µ–¥–Ω–µ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ")
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)
    
    class Meta:
        verbose_name = 'API –∫–ª—é—á –ø—É–±–ª–∏—á–Ω–æ–≥–æ API'
        verbose_name_plural = 'API –∫–ª—é—á–∏ –ø—É–±–ª–∏—á–Ω–æ–≥–æ API'
    
    def __str__(self):
        return f"API –∫–ª—é—á –¥–ª—è {self.container.name}"
    
    def save(self, *args, **kwargs):
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º API –∫–ª—é—á –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏
        if not self.api_key:
            self.api_key = self.generate_api_key()
        if not self.api_secret:
            self.api_secret = self.generate_api_secret()
        super().save(*args, **kwargs)
    
    @staticmethod
    def generate_api_key():
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ API –∫–ª—é—á–∞"""
        return f"devcommerce_{uuid.uuid4().hex[:16]}"
    
    @staticmethod
    def generate_api_secret():
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–µ–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞"""
        return uuid.uuid4().hex
    
    def can_make_request(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞"""
        if not self.is_active:
            return False, "API –∫–ª—é—á –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ —á–∞—Å
        hour_ago = timezone.now() - timedelta(hours=1)
        recent_requests = PublicAPIRequest.objects.filter(
            api_key=self,
            created_at__gte=hour_ago
        ).count()
        
        if recent_requests >= self.rate_limit_per_hour:
            return False, f"–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ ({self.rate_limit_per_hour}/—á–∞—Å)"
        
        return True, "–ú–æ–∂–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å"
    
    def update_usage(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è"""
        self.total_requests += 1
        self.last_used_at = timezone.now()
        self.save(update_fields=['total_requests', 'last_used_at'])


class PublicAPIRequest(models.Model):
    """
    üìù –ú–û–î–ï–õ–¨ –î–õ–Ø –õ–û–ì–ò–†–û–í–ê–ù–ò–Ø –ó–ê–ü–†–û–°–û–í –ü–£–ë–õ–ò–ß–ù–û–ì–û API
    
    –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ –ø—É–±–ª–∏—á–Ω–æ–º—É API
    """
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–ø—Ä–æ—Å–µ
    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)
    api_key = models.ForeignKey(PublicAPIKey, on_delete=models.CASCADE, related_name='requests')
    
    # –î–µ—Ç–∞–ª–∏ –∑–∞–ø—Ä–æ—Å–∞
    method = models.CharField(max_length=10, help_text="HTTP –º–µ—Ç–æ–¥")
    endpoint = models.CharField(max_length=200, help_text="–≠–Ω–¥–ø–æ–∏–Ω—Ç API")
    status_code = models.IntegerField(help_text="HTTP —Å—Ç–∞—Ç—É—Å –∫–æ–¥")
    
    # –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
    user_agent = models.CharField(max_length=500, blank=True, help_text="User Agent")
    ip_address = models.GenericIPAddressField(blank=True, null=True, help_text="IP –∞–¥—Ä–µ—Å")
    request_size = models.IntegerField(default=0, help_text="–†–∞–∑–º–µ—Ä –∑–∞–ø—Ä–æ—Å–∞ –≤ –±–∞–π—Ç–∞—Ö")
    response_size = models.IntegerField(default=0, help_text="–†–∞–∑–º–µ—Ä –æ—Ç–≤–µ—Ç–∞ –≤ –±–∞–π—Ç–∞—Ö")
    
    # –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
    response_time = models.FloatField(null=True, blank=True, help_text="–í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö")
    
    # –û—à–∏–±–∫–∏
    error_message = models.TextField(blank=True, help_text="–°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ")
    error_code = models.CharField(max_length=50, blank=True, help_text="–ö–æ–¥ –æ—à–∏–±–∫–∏")
    
    # –§–∞–π–ª—ã (–µ—Å–ª–∏ –ø—Ä–∏–º–µ–Ω–∏–º–æ)
    file_uploaded = models.ForeignKey(
        'storage.StorageFile', 
        on_delete=models.SET_NULL, 
        null=True, 
        blank=True,
        related_name='public_api_requests'
    )
    
    created_at = models.DateTimeField(auto_now_add=True)
    
    class Meta:
        ordering = ['-created_at']
        verbose_name = '–ó–∞–ø—Ä–æ—Å –ø—É–±–ª–∏—á–Ω–æ–≥–æ API'
        verbose_name_plural = '–ó–∞–ø—Ä–æ—Å—ã –ø—É–±–ª–∏—á–Ω–æ–≥–æ API'
    
    def __str__(self):
        return f"API –∑–∞–ø—Ä–æ—Å {self.method} {self.endpoint} - {self.status_code}"


class PublicAPIUsage(models.Model):
    """
    üìä –ú–û–î–ï–õ–¨ –î–õ–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ò –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Ø –ü–£–ë–õ–ò–ß–ù–û–ì–û API
    
    –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è API –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
    """
    
    api_key = models.ForeignKey(PublicAPIKey, on_delete=models.CASCADE, related_name='usage_stats')
    date = models.DateField(help_text="–î–∞—Ç–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
    
    # –ú–µ—Ç—Ä–∏–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤
    total_requests = models.IntegerField(default=0, help_text="–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤")
    successful_requests = models.IntegerField(default=0, help_text="–£—Å–ø–µ—à–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤")
    failed_requests = models.IntegerField(default=0, help_text="–ù–µ—É–¥–∞—á–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤")
    
    # –ú–µ—Ç—Ä–∏–∫–∏ —Ñ–∞–π–ª–æ–≤
    files_uploaded = models.IntegerField(default=0, help_text="–ó–∞–≥—Ä—É–∂–µ–Ω–æ —Ñ–∞–π–ª–æ–≤")
    files_downloaded = models.IntegerField(default=0, help_text="–°–∫–∞—á–∞–Ω–æ —Ñ–∞–π–ª–æ–≤")
    total_upload_size = models.BigIntegerField(default=0, help_text="–û–±—â–∏–π —Ä–∞–∑–º–µ—Ä –∑–∞–≥—Ä—É–∑–æ–∫")
    total_download_size = models.BigIntegerField(default=0, help_text="–û–±—â–∏–π —Ä–∞–∑–º–µ—Ä —Å–∫–∞—á–∏–≤–∞–Ω–∏–π")
    
    # –ú–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    total_response_time = models.FloatField(default=0.0, help_text="–û–±—â–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–æ–≤")
    average_response_time = models.FloatField(default=0.0, help_text="–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞")
    
    # –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã
    popular_endpoints = models.JSONField(default=dict, help_text="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞–º")
    
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)
    
    class Meta:
        unique_together = ['api_key', 'date']
        ordering = ['-date']
        verbose_name = '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—É–±–ª–∏—á–Ω–æ–≥–æ API'
        verbose_name_plural = '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—É–±–ª–∏—á–Ω–æ–≥–æ API'
    
    def __str__(self):
        return f"API —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ {self.api_key.container.name} - {self.date}"
    
    @property
    def success_rate(self):
        """–ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—à–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤"""
        if self.total_requests == 0:
            return 0
        return round((self.successful_requests / self.total_requests) * 100, 2)


class PublicAPILimit(models.Model):
    """
    üö´ –ú–û–î–ï–õ–¨ –î–õ–Ø –û–ì–†–ê–ù–ò–ß–ï–ù–ò–ô –ü–£–ë–õ–ò–ß–ù–û–ì–û API
    
    –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–∏–º–∏—Ç–æ–≤ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –ø–ª–∞–Ω–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    """
    
    PLAN_CHOICES = [
        ('standard', 'Standard'),
        ('premium', 'Premium'),
        ('pro', 'Pro'),
    ]
    
    plan = models.CharField(max_length=20, choices=PLAN_CHOICES, unique=True)
    
    # –õ–∏–º–∏—Ç—ã –∑–∞–ø—Ä–æ—Å–æ–≤
    requests_per_hour = models.IntegerField(help_text="–ó–∞–ø—Ä–æ—Å–æ–≤ –≤ —á–∞—Å")
    requests_per_day = models.IntegerField(help_text="–ó–∞–ø—Ä–æ—Å–æ–≤ –≤ –¥–µ–Ω—å")
    
    # –õ–∏–º–∏—Ç—ã —Ñ–∞–π–ª–æ–≤
    max_file_size_mb = models.IntegerField(help_text="–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –≤ MB")
    max_files_per_request = models.IntegerField(help_text="–ú–∞–∫—Å–∏–º—É–º —Ñ–∞–π–ª–æ–≤ –∑–∞ –∑–∞–ø—Ä–æ—Å")
    
    # –õ–∏–º–∏—Ç—ã —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
    storage_limit_mb = models.IntegerField(null=True, blank=True, help_text="–õ–∏–º–∏—Ç —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ –≤ MB (null = –±–µ–∑–ª–∏–º–∏—Ç–Ω–æ)")
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏
    api_access = models.BooleanField(default=False, help_text="–î–æ—Å—Ç—É–ø –∫ API")
    custom_domains = models.BooleanField(default=False, help_text="–ö–∞—Å—Ç–æ–º–Ω—ã–µ –¥–æ–º–µ–Ω—ã")
    advanced_analytics = models.BooleanField(default=False, help_text="–ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞")
    
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)
    
    class Meta:
        verbose_name = '–õ–∏–º–∏—Ç –ø—É–±–ª–∏—á–Ω–æ–≥–æ API'
        verbose_name_plural = '–õ–∏–º–∏—Ç—ã –ø—É–±–ª–∏—á–Ω–æ–≥–æ API'
    
    def __str__(self):
        return f"–õ–∏–º–∏—Ç—ã –¥–ª—è –ø–ª–∞–Ω–∞ {self.plan}"
    
    @classmethod
    def get_limits_for_plan(cls, plan):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ª–∏–º–∏—Ç–æ–≤ –¥–ª—è –ø–ª–∞–Ω–∞"""
        try:
            return cls.objects.get(plan=plan)
        except cls.DoesNotExist:
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ª–∏–º–∏—Ç—ã –µ—Å–ª–∏ –ø–ª–∞–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω
            return cls.objects.get(plan='standard')
