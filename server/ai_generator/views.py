import time
import logging
from datetime import datetime, timedelta
from typing import Dict, Any

from django.db.models import Count, Q, Avg, Sum
from django.utils import timezone
from django.contrib.auth import get_user_model
from django.shortcuts import get_object_or_404

from rest_framework.views import APIView
from rest_framework.decorators import api_view, permission_classes
from rest_framework.response import Response
from rest_framework import status, permissions
from rest_framework.exceptions import PermissionDenied, ValidationError

from portfolio_templates.models import PortfolioTemplate
from portfolio.models import Portfolio
from .models import (
    TemplateAIGeneration, TemplateAIStats, 
    GlobalTemplateAIStats
)
from .serializers import (
    TemplateAIGenerationSerializer,
    TemplateAIStatsSerializer,
    TemplateAIGenerationRequestSerializer
)
from .services import TemplateAIService

logger = logging.getLogger(__name__)
User = get_user_model()


class TemplateAIGenerateView(APIView):
    """
    ü§ñ API –î–õ–Ø AI –ó–ê–ü–û–õ–ù–ï–ù–ò–Ø –®–ê–ë–õ–û–ù–û–í
    
    POST /api/ai-generator/templates/{template_id}/generate/ - AI –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞
    """
    permission_classes = [permissions.IsAuthenticated]
    
    def post(self, request, template_id):
        """AI –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏"""
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–µ–º–∏—É–º
            if not request.user.is_premium:
                return Response({
                    'success': False,
                    'error': 'AI –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–æ–≤ –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ Premium –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º',
                    'error_code': 'PREMIUM_REQUIRED'
                }, status=status.HTTP_403_FORBIDDEN)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            can_generate, limit_message = self._check_user_limits(request.user)
            if not can_generate:
                return Response({
                    'success': False,
                    'error': limit_message,
                    'error_code': 'LIMIT_EXCEEDED'
                }, status=status.HTTP_429_TOO_MANY_REQUESTS)
            
            # –ü–æ–ª—É—á–∞–µ–º —à–∞–±–ª–æ–Ω
            template = get_object_or_404(
                PortfolioTemplate, 
                id=template_id, 
                is_active=True
            )
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–µ–º–∏—É–º —à–∞–±–ª–æ–Ω
            if template.is_premium and not request.user.is_premium:
                return Response({
                    'success': False,
                    'error': '–ü—Ä–µ–º–∏—É–º —à–∞–±–ª–æ–Ω –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ Premium –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º',
                    'error_code': 'PREMIUM_TEMPLATE_REQUIRED'
                }, status=status.HTTP_403_FORBIDDEN)
            
            # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞
            serializer = TemplateAIGenerationRequestSerializer(data=request.data)
            if not serializer.is_valid():
                return Response({
                    'success': False,
                    'error': '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ',
                    'details': serializer.errors
                }, status=status.HTTP_400_BAD_REQUEST)
            
            validated_data = serializer.validated_data
            
            logger.info(f"ü§ñ [AI TEMPLATE] –ó–∞–ø—Ä–æ—Å –æ—Ç {request.user.username} –¥–ª—è —à–∞–±–ª–æ–Ω–∞ '{template.title}'")
            
            # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
            ai_generation = TemplateAIGeneration.objects.create(
                user=request.user,
                template=template,
                project_title=validated_data['project_title'],
                project_description=validated_data['project_description'],
                user_data=validated_data['user_data'],
                original_html=template.html_code,
                status='processing'
            )
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º AI —Å–µ—Ä–≤–∏—Å (–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ)
            ai_service = TemplateAIService()
            result = ai_service.generate_personalized_template(
                template=template,
                user_data=validated_data['user_data'],
                project_title=validated_data['project_title'],
                project_description=validated_data['project_description'],
                user=request.user,
                ai_generation=ai_generation
            )
            
            if result['success']:
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                self._update_user_stats(request.user, 'ai_success')
                self._update_template_stats(template, 'ai_success')
                
                logger.info(f"‚úÖ [AI TEMPLATE] –£—Å–ø–µ—à–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–ª—è {request.user.username}")
                
                return Response({
                    'success': True,
                    'portfolio': {
                        'id': str(result['portfolio'].id),
                        'title': result['portfolio'].title,
                        'slug': result['portfolio'].slug,
                        'edit_url': f'/portfolio/edit/me?project={result["portfolio"].id}',
                        'public_url': result['portfolio'].public_url if result['portfolio'].is_public else None
                    },
                    'generation_info': {
                        'generation_id': ai_generation.id,
                        'response_time': result.get('response_time', 0),
                        'template_used': template.title,
                        'ai_enhanced': True
                    },
                    'message': '–®–∞–±–ª–æ–Ω —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–æ–ª–Ω–µ–Ω AI –∏ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ —Å–æ–∑–¥–∞–Ω–æ'
                }, status=status.HTTP_201_CREATED)
            
            else:
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ—à–∏–±–æ–∫
                self._update_user_stats(request.user, 'ai_failed')
                self._update_template_stats(template, 'ai_failed')
                
                logger.error(f"‚ùå [AI TEMPLATE] –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {result.get('error', 'Unknown error')}")
                
                return Response({
                    'success': False,
                    'error': '–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —Å–µ—Ä–≤–µ—Ä—ã –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω—ã, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ',
                    'error_code': 'SERVER_OVERLOAD',
                    'generation_id': ai_generation.id
                }, status=status.HTTP_503_SERVICE_UNAVAILABLE)
                
        except Exception as e:
            logger.error(f"üí• [AI TEMPLATE] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
            
            return Response({
                'success': False,
                'error': '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
                'error_code': 'INTERNAL_ERROR'
            }, status=status.HTTP_500_INTERNAL_SERVER_ERROR)
    
    def _check_user_limits(self, user: User) -> tuple[bool, str]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (10 AI –≥–µ–Ω–µ—Ä–∞—Ü–∏–π –≤ –¥–µ–Ω—å)"""
        today = timezone.now().date()
        
        stats, created = TemplateAIStats.objects.get_or_create(
            user=user,
            date=today,
            defaults={
                'ai_requests_count': 0,
                'ai_successful_count': 0,
                'ai_failed_count': 0,
                'regular_usage_count': 0
            }
        )
        
        daily_limit = 10  # –°—Ç—Ä–æ–≥–∏–π –ª–∏–º–∏—Ç –¥–ª—è –ø—Ä–µ–º–∏—É–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        used_today = stats.ai_requests_count
        remaining = max(0, daily_limit - used_today)
        
        if remaining <= 0:
            return False, f"–ü—Ä–µ–≤—ã—à–µ–Ω –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç AI –≥–µ–Ω–µ—Ä–∞—Ü–∏–π ({daily_limit}/–¥–µ–Ω—å). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–≤—Ç—Ä–∞."
        
        return True, f"–û—Å—Ç–∞–ª–æ—Å—å {remaining} –∏–∑ {daily_limit} AI –≥–µ–Ω–µ—Ä–∞—Ü–∏–π –Ω–∞ —Å–µ–≥–æ–¥–Ω—è"
    
    def _update_user_stats(self, user: User, result_type: str):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        today = timezone.now().date()
        
        stats, created = TemplateAIStats.objects.get_or_create(
            user=user,
            date=today,
            defaults={
                'ai_requests_count': 0,
                'ai_successful_count': 0,
                'ai_failed_count': 0,
                'regular_usage_count': 0
            }
        )
        
        stats.ai_requests_count += 1
        
        if result_type == 'ai_success':
            stats.ai_successful_count += 1
        elif result_type == 'ai_failed':
            stats.ai_failed_count += 1
        
        stats.save()
    
    def _update_template_stats(self, template: PortfolioTemplate, result_type: str):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —à–∞–±–ª–æ–Ω–∞"""
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π —à–∞–±–ª–æ–Ω–∞
        if result_type == 'ai_success':
            template.increment_uses()


class GetUserAILimitsView(APIView):
    """
    üìä API –î–õ–Ø –ü–û–õ–£–ß–ï–ù–ò–Ø –õ–ò–ú–ò–¢–û–í AI –ì–ï–ù–ï–†–ê–¶–ò–ô
    
    GET /api/ai-generator/limits/ - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ª–∏–º–∏—Ç–∞—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    permission_classes = [permissions.IsAuthenticated]
    
    def get(self, request):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ª–∏–º–∏—Ç–∞—Ö AI –≥–µ–Ω–µ—Ä–∞—Ü–∏–π"""
        try:
            user = request.user
            today = timezone.now().date()
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ —Å–µ–≥–æ–¥–Ω—è
            stats, created = TemplateAIStats.objects.get_or_create(
                user=user,
                date=today,
                defaults={
                    'ai_requests_count': 0,
                    'ai_successful_count': 0,
                    'ai_failed_count': 0,
                    'regular_usage_count': 0
                }
            )
            
            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–∏–º–∏—Ç—ã
            daily_limit = 10 if user.is_premium else 0
            used_today = stats.ai_requests_count
            remaining_today = max(0, daily_limit - used_today)
            can_generate = user.is_premium and remaining_today > 0
            
            # –í—Ä–µ–º—è —Å–±—Ä–æ—Å–∞ –ª–∏–º–∏—Ç–∞
            tomorrow = today + timedelta(days=1)
            next_reset = timezone.make_aware(datetime.combine(tomorrow, datetime.min.time()))
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            if not user.is_premium:
                limit_message = "AI –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–æ–≤ –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ Premium –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"
            elif remaining_today == 0:
                limit_message = f"–ò—Å—á–µ—Ä–ø–∞–Ω –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç ({daily_limit}/–¥–µ–Ω—å). –°–±—Ä–æ—Å–∏—Ç—Å—è –∑–∞–≤—Ç—Ä–∞."
            else:
                limit_message = f"–û—Å—Ç–∞–ª–æ—Å—å {remaining_today} –∏–∑ {daily_limit} AI –≥–µ–Ω–µ—Ä–∞—Ü–∏–π –Ω–∞ —Å–µ–≥–æ–¥–Ω—è"
            
            return Response({
                'success': True,
                'data': {
                    'is_premium': user.is_premium,
                    'daily_limit': daily_limit,
                    'used_today': used_today,
                    'remaining_today': remaining_today,
                    'next_reset': next_reset.isoformat(),
                    'can_generate': can_generate,
                    'limit_message': limit_message,
                    'regular_usage_today': stats.regular_usage_count,
                    'total_usage_today': stats.total_usage
                }
            })
            
        except Exception as e:
            logger.error(f"[AI LIMITS] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–∏–º–∏—Ç–æ–≤: {str(e)}")
            return Response({
                'success': False,
                'error': '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–∏–º–∏—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'
            }, status=status.HTTP_500_INTERNAL_SERVER_ERROR)


class TemplateAIStatsView(APIView):
    """
    üìà API –î–õ–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ò AI –ì–ï–ù–ï–†–ê–¶–ò–ô
    
    GET /api/ai-generator/stats/ - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ AI –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    """
    permission_classes = [permissions.IsAuthenticated]
    
    def get(self, request):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ AI –≥–µ–Ω–µ—Ä–∞—Ü–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            user = request.user
            
            # –û–±—â–∏–µ –º–µ—Ç—Ä–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            total_ai_requests = TemplateAIGeneration.objects.filter(user=user).count()
            total_ai_successful = TemplateAIGeneration.objects.filter(user=user, status='success').count()
            total_ai_failed = total_ai_requests - total_ai_successful
            
            ai_success_rate = (total_ai_successful / total_ai_requests * 100) if total_ai_requests > 0 else 0
            
            # –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ AI
            avg_ai_response_time = TemplateAIGeneration.objects.filter(
                user=user, 
                status='success', 
                response_time__isnull=False
            ).aggregate(avg_time=Avg('response_time'))['avg_time'] or 0
            
            # –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            popular_templates = TemplateAIGeneration.objects.filter(user=user).values(
                'template__title'
            ).annotate(
                count=Count('template')
            ).order_by('-count')[:5]
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π
            last_week_stats = TemplateAIStats.objects.filter(
                user=user,
                date__gte=timezone.now().date() - timedelta(days=7)
            ).aggregate(
                total_ai=Sum('ai_requests_count'),
                total_regular=Sum('regular_usage_count')
            )
            
            return Response({
                'success': True,
                'data': {
                    'total_ai_requests': total_ai_requests,
                    'total_ai_successful': total_ai_successful,
                    'total_ai_failed': total_ai_failed,
                    'ai_success_rate': round(ai_success_rate, 1),
                    'average_ai_response_time': round(avg_ai_response_time, 2),
                    'popular_templates': popular_templates,
                    'last_week': {
                        'ai_requests': last_week_stats['total_ai'] or 0,
                        'regular_usage': last_week_stats['total_regular'] or 0
                    }
                }
            })
            
        except Exception as e:
            logger.error(f"[AI STATS] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}")
            return Response({
                'success': False,
                'error': '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏'
            }, status=status.HTTP_500_INTERNAL_SERVER_ERROR)


class TemplateAIHistoryView(APIView):
    """
    üìö API –î–õ–Ø –ò–°–¢–û–†–ò–ò AI –ì–ï–ù–ï–†–ê–¶–ò–ô
    
    GET /api/ai-generator/history/ - –∏—Å—Ç–æ—Ä–∏—è AI –≥–µ–Ω–µ—Ä–∞—Ü–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    permission_classes = [permissions.IsAuthenticated]
    
    def get(self, request):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ AI –≥–µ–Ω–µ—Ä–∞—Ü–∏–π"""
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 20 AI –≥–µ–Ω–µ—Ä–∞—Ü–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            generations = TemplateAIGeneration.objects.filter(
                user=request.user
            ).select_related('template', 'portfolio_created').order_by('-created_at')[:20]
            
            history_data = []
            for gen in generations:
                generation_data = {
                    'id': gen.id,
                    'project_title': gen.project_title,
                    'template': {
                        'id': gen.template.id,
                        'title': gen.template.title,
                        'category': gen.template.category
                    },
                    'status': gen.status,
                    'response_time': gen.response_time,
                    'created_at': gen.created_at.isoformat(),
                    'portfolio': None
                }
                
                if gen.portfolio_created:
                    generation_data['portfolio'] = {
                        'id': str(gen.portfolio_created.id),
                        'slug': gen.portfolio_created.slug,
                        'edit_url': f'/portfolio/edit/me?project={gen.portfolio_created.id}',
                        'public_url': gen.portfolio_created.public_url,
                        'is_public': gen.portfolio_created.is_public
                    }
                
                history_data.append(generation_data)
            
            return Response({
                'success': True,
                'history': history_data,
                'total_generations': TemplateAIGeneration.objects.filter(user=request.user).count()
            })
        
        except Exception as e:
            logger.error(f"[AI HISTORY] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏: {str(e)}")
            
            return Response({
                'success': False,
                'error': '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏'
            }, status=status.HTTP_500_INTERNAL_SERVER_ERROR)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ–±—ã—á–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —à–∞–±–ª–æ–Ω–æ–≤
@api_view(['POST'])
@permission_classes([permissions.IsAuthenticated])
def track_regular_template_usage(request):
    """
    üìä –û–¢–°–õ–ï–ñ–ò–í–ê–ù–ò–ï –û–ë–´–ß–ù–û–ì–û –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Ø –®–ê–ë–õ–û–ù–û–í
    
    POST /api/ai-generator/track-regular-usage/ - —É—á–µ—Ç –æ–±—ã—á–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    """
    try:
        user = request.user
        today = timezone.now().date()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ–±—ã—á–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        stats, created = TemplateAIStats.objects.get_or_create(
            user=user,
            date=today,
            defaults={
                'ai_requests_count': 0,
                'ai_successful_count': 0,
                'ai_failed_count': 0,
                'regular_usage_count': 0
            }
        )
        
        stats.regular_usage_count += 1
        stats.save()
        
        logger.info(f"üìä [REGULAR USAGE] –£—á—Ç–µ–Ω–æ –æ–±—ã—á–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –¥–ª—è {user.username}")
        
        return Response({
            'success': True,
            'message': '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞'
        })
        
    except Exception as e:
        logger.error(f"[REGULAR USAGE] –û—à–∏–±–∫–∞: {str(e)}")
        return Response({
            'success': False,
            'error': '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏'
        }, status=status.HTTP_500_INTERNAL_SERVER_ERROR)
