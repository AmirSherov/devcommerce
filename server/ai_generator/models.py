from django.db import models
from django.contrib.auth import get_user_model
from django.utils import timezone
from portfolio.models import Portfolio
from portfolio_templates.models import PortfolioTemplate

User = get_user_model()


class TemplateAIGeneration(models.Model):
    """
    ü§ñ –ú–û–î–ï–õ–¨ –î–õ–Ø AI –ó–ê–ü–û–õ–ù–ï–ù–ò–Ø –®–ê–ë–õ–û–ù–û–í
    
    –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –∫–∞–∂–¥—ã–π —Å–ª—É—á–∞–π –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è AI –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏ —à–∞–±–ª–æ–Ω–æ–≤
    """
    
    STATUS_CHOICES = [
        ('processing', '–û–±—Ä–∞–±–æ—Ç–∫–∞'),
        ('success', '–£—Å–ø–µ—à–Ω–æ'),
        ('failed', '–û—à–∏–±–∫–∞'),
        ('ai_error', '–û—à–∏–±–∫–∞ AI'),
        ('invalid_html', '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π HTML'),
        ('server_overload', '–ü–µ—Ä–µ–≥—Ä—É–∑–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'),
    ]
    
    # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    user = models.ForeignKey(User, on_delete=models.CASCADE, related_name='template_ai_generations')
    template = models.ForeignKey(PortfolioTemplate, on_delete=models.CASCADE, related_name='ai_generations')
    
    # –î–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞
    project_title = models.CharField(max_length=200, help_text="–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞")
    project_description = models.TextField(help_text="–û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞")
    user_data = models.TextField(help_text="–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è AI")
    
    # –†–µ–∑—É–ª—å—Ç–∞—Ç
    status = models.CharField(max_length=30, choices=STATUS_CHOICES, default='processing')
    portfolio_created = models.ForeignKey(
        Portfolio, 
        null=True, 
        blank=True, 
        on_delete=models.SET_NULL,
        help_text="–°–æ–∑–¥–∞–Ω–Ω–æ–µ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ"
    )
    
    # –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –º–µ—Ç—Ä–∏–∫–∏
    response_time = models.FloatField(null=True, blank=True, help_text="–í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ AI –≤ —Å–µ–∫—É–Ω–¥–∞—Ö")
    tokens_used = models.IntegerField(null=True, blank=True, help_text="–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤")
    
    # –û—Ç–ª–∞–¥–∫–∞ –∏ –æ—à–∏–±–∫–∏
    error_message = models.TextField(blank=True, help_text="–°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ")
    ai_raw_response = models.TextField(blank=True, help_text="–°—ã—Ä–æ–π –æ—Ç–≤–µ—Ç –æ—Ç AI")
    original_html = models.TextField(blank=True, help_text="–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π HTML —à–∞–±–ª–æ–Ω–∞")
    generated_html = models.TextField(blank=True, help_text="HTML –ø–æ—Å–ª–µ AI –æ–±—Ä–∞–±–æ—Ç–∫–∏")
    
    # –í—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏
    created_at = models.DateTimeField(auto_now_add=True)
    started_at = models.DateTimeField(null=True, blank=True)
    completed_at = models.DateTimeField(null=True, blank=True)
    
    class Meta:
        ordering = ['-created_at']
        verbose_name = 'AI –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —à–∞–±–ª–æ–Ω–∞'
        verbose_name_plural = 'AI –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —à–∞–±–ª–æ–Ω–æ–≤'
    
    def __str__(self):
        return f"AI –≥–µ–Ω–µ—Ä–∞—Ü–∏—è #{self.id} - {self.user.username} ({self.template.title})"
    
    @property
    def duration(self):
        """–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
        if self.started_at and self.completed_at:
            return (self.completed_at - self.started_at).total_seconds()
        return None
    
    def mark_started(self):
        """–û—Ç–º–µ—Ç–∏—Ç—å –Ω–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
        self.started_at = timezone.now()
        self.status = 'processing'
        self.save(update_fields=['started_at', 'status'])
    
    def mark_completed(self, status='success', portfolio=None, error_message='', generated_html=''):
        """–û—Ç–º–µ—Ç–∏—Ç—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
        self.completed_at = timezone.now()
        self.status = status
        if portfolio:
            self.portfolio_created = portfolio
        if error_message:
            self.error_message = error_message
        if generated_html:
            self.generated_html = generated_html
        
        # –í—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞
        if self.started_at:
            self.response_time = self.duration
        
        self.save()


class TemplateAIStats(models.Model):
    """
    üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê AI –ì–ï–ù–ï–†–ê–¶–ò–ô –ü–û –®–ê–ë–õ–û–ù–ê–ú
    
    –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è AI –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    
    user = models.ForeignKey(User, on_delete=models.CASCADE, related_name='template_ai_stats')
    date = models.DateField(help_text="–î–∞—Ç–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
    
    # –°—á–µ—Ç—á–∏–∫–∏ AI –≥–µ–Ω–µ—Ä–∞—Ü–∏–π
    ai_requests_count = models.IntegerField(default=0, help_text="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ AI –∑–∞–ø—Ä–æ—Å–æ–≤")
    ai_successful_count = models.IntegerField(default=0, help_text="–£—Å–ø–µ—à–Ω—ã—Ö AI –≥–µ–Ω–µ—Ä–∞—Ü–∏–π")
    ai_failed_count = models.IntegerField(default=0, help_text="–ù–µ—É–¥–∞—á–Ω—ã—Ö AI –≥–µ–Ω–µ—Ä–∞—Ü–∏–π")
    
    # –°—á–µ—Ç—á–∏–∫–∏ –æ–±—ã—á–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —à–∞–±–ª–æ–Ω–æ–≤
    regular_usage_count = models.IntegerField(default=0, help_text="–û–±—ã—á–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–æ–≤")
    
    # –ú–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    total_ai_response_time = models.FloatField(default=0.0, help_text="–û–±—â–µ–µ –≤—Ä–µ–º—è AI –æ—Ç–≤–µ—Ç–æ–≤")
    total_tokens_used = models.IntegerField(default=0, help_text="–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤")
    
    # –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã
    popular_templates = models.JSONField(default=dict, help_text="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —à–∞–±–ª–æ–Ω–∞–º")
    
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)
    
    class Meta:
        unique_together = ['user', 'date']
        ordering = ['-date']
        verbose_name = '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ AI —à–∞–±–ª–æ–Ω–æ–≤'
        verbose_name_plural = '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ AI —à–∞–±–ª–æ–Ω–æ–≤'
    
    def __str__(self):
        return f"AI —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ {self.user.username} - {self.date}"
    
    @property
    def ai_success_rate(self):
        """–ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—à–Ω—ã—Ö AI –≥–µ–Ω–µ—Ä–∞—Ü–∏–π"""
        if self.ai_requests_count == 0:
            return 0
        return round((self.ai_successful_count / self.ai_requests_count) * 100, 2)
    
    @property
    def total_usage(self):
        """–û–±—â–µ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ (AI + –æ–±—ã—á–Ω–æ–µ)"""
        return self.ai_requests_count + self.regular_usage_count


class GlobalTemplateAIStats(models.Model):
    """
    üåç –ì–õ–û–ë–ê–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê AI –ì–ï–ù–ï–†–ê–¶–ò–ô –®–ê–ë–õ–û–ù–û–í
    """
    
    date = models.DateField(unique=True, help_text="–î–∞—Ç–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
    
    # AI –º–µ—Ç—Ä–∏–∫–∏
    total_ai_requests = models.IntegerField(default=0)
    total_ai_successful = models.IntegerField(default=0)
    total_ai_failed = models.IntegerField(default=0)
    
    # –û–±—ã—á–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ
    total_regular_usage = models.IntegerField(default=0)
    
    # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
    active_ai_users = models.IntegerField(default=0, help_text="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–≤—à–∏—Ö AI")
    premium_users_count = models.IntegerField(default=0, help_text="–í—Å–µ–≥–æ –ø—Ä–µ–º–∏—É–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
    
    # –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
    average_ai_response_time = models.FloatField(default=0.0)
    total_tokens_consumed = models.IntegerField(default=0)
    
    # –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    popular_templates_ai = models.JSONField(default=dict, help_text="–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã –¥–ª—è AI")
    popular_templates_regular = models.JSONField(default=dict, help_text="–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã –æ–±—ã—á–Ω–æ")
    error_distribution = models.JSONField(default=dict, help_text="–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ—à–∏–±–æ–∫")
    
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)
    
    class Meta:
        ordering = ['-date']
        verbose_name = '–ì–ª–æ–±–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ AI —à–∞–±–ª–æ–Ω–æ–≤'
        verbose_name_plural = '–ì–ª–æ–±–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ AI —à–∞–±–ª–æ–Ω–æ–≤'
    
    def __str__(self):
        return f"–ì–ª–æ–±–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ AI —à–∞–±–ª–æ–Ω–æ–≤ - {self.date}"
    
    @property
    def ai_vs_regular_ratio(self):
        """–°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ AI –∫ –æ–±—ã—á–Ω–æ–º—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é"""
        total = self.total_ai_requests + self.total_regular_usage
        if total == 0:
            return {"ai": 0, "regular": 0}
        return {
            "ai": round((self.total_ai_requests / total) * 100, 1),
            "regular": round((self.total_regular_usage / total) * 100, 1)
        } 