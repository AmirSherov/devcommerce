const API_BASE_URL = process.env.NEXT_PUBLIC_API_URL || 'http://127.0.0.1:8000/api';

/**
 * ü§ñ API –î–õ–Ø –†–ê–ë–û–¢–´ –° AI –ó–ê–ü–û–õ–ù–ï–ù–ò–ï–ú –®–ê–ë–õ–û–ù–û–í
 */

import { getSessionHeaders } from '@/lib/auth-utils';

class AIAPI {
    constructor() {
        this.baseURL = `${API_BASE_URL}/ai`;
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
     */
    getAuthHeaders() {
        const token = localStorage.getItem('access_token');
        return token ? {
            'Authorization': `Bearer ${token}`,
            'Content-Type': 'application/json',
        } : {
            'Content-Type': 'application/json',
        };
    }

    /**
     * ü§ñ AI –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞
     */
    async generateTemplate(templateId, aiData) {
        try {
            const response = await fetch(`${this.baseURL}/templates/${templateId}/generate/`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    ...this.getAuthHeaders(),
                    ...getSessionHeaders(),
                },
                body: JSON.stringify({
                    project_title: aiData.projectTitle,
                    project_description: aiData.projectDescription,
                    user_data: aiData.userData,
                }),
            });

            const data = await response.json()

            return data;
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ AI –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:', error);
            throw error;
        }
    }

    /**
     * üîí –ü–æ–ª—É—á–µ–Ω–∏–µ –ª–∏–º–∏—Ç–æ–≤ AI –≥–µ–Ω–µ—Ä–∞—Ü–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    async getUserLimits() {
        try {
            const response = await fetch(`${this.baseURL}/limits/`, {
                method: 'GET',
                headers: {
                    'Content-Type': 'application/json',
                    ...this.getAuthHeaders(),
                    ...getSessionHeaders(),
                },
            });

            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }

            const data = await response.json();
            return data;
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–∏–º–∏—Ç–æ–≤:', error);
            throw error;
        }
    }

    /**
     * üìä –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ AI –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
     */
    async getAIStats() {
        try {
            const response = await fetch(`${this.baseURL}/stats/`, {
                method: 'GET',
                headers: {
                    'Content-Type': 'application/json',
                    ...this.getAuthHeaders(),
                    ...getSessionHeaders(),
                },
            });

            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }

            const data = await response.json();
            return data;
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ AI:', error);
            throw error;
        }
    }

    /**
     * üìù –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ AI –≥–µ–Ω–µ—Ä–∞—Ü–∏–π
     */
    async getAIHistory(params = {}) {
        try {
            const queryParams = new URLSearchParams();
            
            if (params.page) queryParams.append('page', params.page);
            if (params.page_size) queryParams.append('page_size', params.page_size);

            const url = `${this.baseURL}/history/?${queryParams.toString()}`;
            
            const response = await fetch(url, {
                method: 'GET',
                headers: {
                    'Content-Type': 'application/json',
                    ...this.getAuthHeaders(),
                    ...getSessionHeaders(),
                },
            });

            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }

            const data = await response.json();
            return data;
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ AI:', error);
            throw error;
        }
    }

    /**
     * üìà –£—á–µ—Ç –æ–±—ã—á–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —à–∞–±–ª–æ–Ω–∞
     */
    async trackRegularUsage(templateId) {
        try {
            const response = await fetch(`${this.baseURL}/track-regular-usage/`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    ...this.getAuthHeaders(),
                    ...getSessionHeaders(),
                },
                body: JSON.stringify({
                    template_id: templateId,
                }),
            });

            const data = await response.json();

            if (!response.ok) {
                throw new Error(data.error || '–û—à–∏–±–∫–∞ —É—á–µ—Ç–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è');
            }

            return data;
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —É—á–µ—Ç–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:', error);
            throw error;
        }
    }
}

// –°–æ–∑–¥–∞–µ–º –∏ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä API
export const aiAPI = new AIAPI();

// –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –æ—à–∏–±–∫–∞–º–∏
export const getAIErrorMessage = (error) => {
    switch (error.code) {
        case 'PREMIUM_REQUIRED':
            return 'AI –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ Premium –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º';
        case 'DAILY_LIMIT_EXCEEDED':
            return '–ü—Ä–µ–≤—ã—à–µ–Ω –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç AI –≥–µ–Ω–µ—Ä–∞—Ü–∏–π';
        case 'TEMPLATE_NOT_FOUND':
            return '–®–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω';
        case 'AI_SERVICE_ERROR':
            return '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–∏—Å–∞ AI. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ';
        case 'VALIDATION_ERROR':
            return '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö';
        default:
            return error.message || '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ AI –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏';
    }
};

// –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
export const AI_STATUS = {
    'pending': '–û–∂–∏–¥–∞–µ—Ç',
    'processing': '–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è',
    'completed': '–ó–∞–≤–µ—Ä—à–µ–Ω–æ',
    'failed': '–û—à–∏–±–∫–∞'
};

export const DEFAULT_USER_DATA_PLACEHOLDER = `–ü—Ä–∏–º–µ—Ä –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è:

–ü–ï–†–°–û–ù–ê–õ–¨–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø:
- –ò–º—è: –ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤
- –°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: Frontend —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫
- –û–ø—ã—Ç: 3 –≥–æ–¥–∞
- –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ: –ú–æ—Å–∫–≤–∞

–û–ë–†–ê–ó–û–í–ê–ù–ò–ï:
- –£–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç: –ú–ì–£
- –°–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å: –ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞
- –ì–æ–¥ –æ–∫–æ–Ω—á–∞–Ω–∏—è: 2020

–ù–ê–í–´–ö–ò:
- JavaScript, React, Vue.js
- HTML5, CSS3, SASS
- Git, Webpack, Node.js
- Figma, Adobe XD

–û–ü–´–¢ –†–ê–ë–û–¢–´:
- Frontend Developer –≤ TechCorp (2021-2024)
- Junior Developer –≤ StartupXYZ (2020-2021)

–ü–†–û–ï–ö–¢–´:
- –ò–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω –Ω–∞ React
- –ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–π —Å–∞–π—Ç —Å CMS
- –ú–æ–±–∏–ª—å–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–∞ React Native

–ö–û–ù–¢–ê–ö–¢–´:
- Email: ivan@example.com
- GitHub: github.com/ivan
- LinkedIn: linkedin.com/in/ivan
- –¢–µ–ª–µ—Ñ–æ–Ω: +7 999 123-45-67`; 