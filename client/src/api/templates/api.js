const API_BASE_URL = process.env.NEXT_PUBLIC_API_URL || 'http://127.0.0.1:8000';
    
/**
 * üé® API –î–õ–Ø –†–ê–ë–û–¢–´ –° –®–ê–ë–õ–û–ù–ê–ú–ò –ü–û–†–¢–§–û–õ–ò–û
 */

class TemplatesAPI {
    constructor() {
        this.baseURL = `${API_BASE_URL}/templates`;
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
     */
    getAuthHeaders() {
        const token = localStorage.getItem('access_token');
        return token ? {
            'Authorization': `Bearer ${token}`,
            'Content-Type': 'application/json',
        } : {
            'Content-Type': 'application/json',
        };
    }

    /**
     * üìã –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —à–∞–±–ª–æ–Ω–æ–≤
     */
    async getTemplates(params = {}) {
        try {
            const queryParams = new URLSearchParams();
            
            // –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
            if (params.category) queryParams.append('category', params.category);
            if (params.difficulty) queryParams.append('difficulty', params.difficulty);
            if (params.is_premium !== undefined) queryParams.append('is_premium', params.is_premium);
            if (params.featured) queryParams.append('featured', params.featured);
            if (params.search) queryParams.append('search', params.search);
            if (params.sort) queryParams.append('sort', params.sort);
            if (params.page) queryParams.append('page', params.page);
            if (params.page_size) queryParams.append('page_size', params.page_size);

            const url = `${this.baseURL}/?${queryParams.toString()}`;
            
            const response = await fetch(url, {
                method: 'GET',
                headers: this.getAuthHeaders(),
            });

            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }

            const data = await response.json();
            return data;
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–æ–≤:', error);
            throw error;
        }
    }

    /**
     * üìÑ –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —à–∞–±–ª–æ–Ω–µ
     */
    async getTemplate(templateId) {
        try {
            const response = await fetch(`${this.baseURL}/${templateId}/`, {
                method: 'GET',
                headers: this.getAuthHeaders(),
            });

            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }

            const data = await response.json();
            return data;
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–∞:', error);
            throw error;
        }
    }

    /**
     * üëÅÔ∏è –ü–æ–ª—É—á–µ–Ω–∏–µ URL –ø—Ä–µ–≤—å—é —à–∞–±–ª–æ–Ω–∞
     */
    getPreviewUrl(template) {
        return template.demo_url;
    }

    /**
     * üéØ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ
     */
    async useTemplate(templateId, portfolioData = {}) {
        try {
            const response = await fetch(`${this.baseURL}/use/`, {
                method: 'POST',
                headers: this.getAuthHeaders(),
                body: JSON.stringify({
                    template_id: templateId,
                    portfolio_title: portfolioData.title,
                    portfolio_description: portfolioData.description,
                }),
            });

            const data = await response.json();

            if (!response.ok) {
                throw {
                    status: response.status,
                    message: data.error || '–û—à–∏–±–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —à–∞–±–ª–æ–Ω–∞',
                    code: data.error_code,
                    details: data.details
                };
            }

            return data;
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —à–∞–±–ª–æ–Ω–∞:', error);
            throw error;
        }
    }

    /**
     * üëç –õ–∞–π–∫–Ω—É—Ç—å —à–∞–±–ª–æ–Ω
     */
    async likeTemplate(templateId) {
        try {
            const response = await fetch(`${this.baseURL}/${templateId}/like/`, {
                method: 'POST',
                headers: this.getAuthHeaders(),
            });

            const data = await response.json();

            if (!response.ok) {
                throw new Error(data.error || '–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ª–∞–π–∫–∞');
            }

            return data;
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ª–∞–π–∫–∞ —à–∞–±–ª–æ–Ω–∞:', error);
            throw error;
        }
    }

    /**
     * üíî –£–±—Ä–∞—Ç—å –ª–∞–π–∫ —Å —à–∞–±–ª–æ–Ω–∞
     */
    async unlikeTemplate(templateId) {
        try {
            const response = await fetch(`${this.baseURL}/${templateId}/like/`, {
                method: 'DELETE',
                headers: this.getAuthHeaders(),
            });

            const data = await response.json();

            if (!response.ok) {
                throw new Error(data.error || '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ª–∞–π–∫–∞');
            }

            return data;
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ª–∞–π–∫–∞:', error);
            throw error;
        }
    }

    /**
     * üìà –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —à–∞–±–ª–æ–Ω–æ–≤
     */
    async getStats() {
        try {
            const response = await fetch(`${this.baseURL}/stats/`, {
                method: 'GET',
                headers: this.getAuthHeaders(),
            });

            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }

            const data = await response.json();
            return data;
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
            throw error;
        }
    }

    /**
     * üè∑Ô∏è –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
     */
    async getCategories() {
        try {
            const response = await fetch(`${this.baseURL}/categories/`, {
                method: 'GET',
                headers: this.getAuthHeaders(),
            });

            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }

            const data = await response.json();
            return data;
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π:', error);
            throw error;
        }
    }
}

// –°–æ–∑–¥–∞–µ–º –∏ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä API
export const templatesAPI = new TemplatesAPI();

// –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
export const TEMPLATE_DIFFICULTIES = {
    'beginner': '–ù–∞—á–∏–Ω–∞—é—â–∏–π',
    'intermediate': '–°—Ä–µ–¥–Ω–∏–π', 
    'advanced': '–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π'
};

export const TEMPLATE_SORT_OPTIONS = {
    'featured': '–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ',
    'popular': '–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ',
    'newest': '–ù–æ–≤—ã–µ',
    'most_used': '–ß–∞—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ',
    'alphabetical': '–ü–æ –∞–ª—Ñ–∞–≤–∏—Ç—É'
};

// –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –æ—à–∏–±–∫–∞–º–∏
export const getTemplateErrorMessage = (error) => {
    if (error.code === 'PREMIUM_REQUIRED') {
        return '–≠—Ç–æ—Ç —à–∞–±–ª–æ–Ω –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ Premium –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º';
    }
    
    return error.message || '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å —à–∞–±–ª–æ–Ω–∞–º–∏';
}; 